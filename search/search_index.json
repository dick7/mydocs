{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to mydocs \u00b6 mydocs made by python MkDocs Source: mydocs Site: http://doc.ztloadfield.com/ Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs gh-deploy - Deploy on github address . Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Now layout Tree \u00b6 cat mkdocs.yml >> docs/mydocs-yaml.md README \u00b6 README.md mydocs made by python MkDocs Themed by mkdocs-material Source: mydocs Deploy site on: github aliyun","title":"Home"},{"location":"#welcome-to-mydocs","text":"mydocs made by python MkDocs Source: mydocs Site: http://doc.ztloadfield.com/","title":"Welcome to mydocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs gh-deploy - Deploy on github address .","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#now-layout-tree","text":"cat mkdocs.yml >> docs/mydocs-yaml.md","title":"Now layout Tree"},{"location":"#readme","text":"README.md mydocs made by python MkDocs Themed by mkdocs-material Source: mydocs Deploy site on: github aliyun","title":"README"},{"location":"cheat-sheets/","text":"Cheat-Sheets \u00b6","title":"Cheat-Sheets"},{"location":"cheat-sheets/#cheat-sheets","text":"","title":"Cheat-Sheets"},{"location":"git/","text":"Git/Github \u00b6 1.git push without password \u00b6 ssh-keygen # \u516c\u94a5\u751f\u6210\uff0c\u7136\u540e\u628a\u516c\u94a5\u653e\u5230GitHub\u4e0a git config --global user.email \"xxx@xxmail.com\" git config --global user.name \"xxx\" git config --global user.password \"xxx\" git config --global credential.helper store # git push\u7684\u65f6\u5019\u8bb0\u4f4f\u7528\u6237\u540d\u548c\u5bc6\u7801 git config --global push.default simple 2.git basic operations \u00b6 # git clone https://github.com/dick7/mydocs.git git init # git reset --hard origin/master # git branch --set-upstream-to=origin/master # git branch --set-upstream-to=origin/dev git add . git commit -m '1st upload to github' git remote add origin https://github.com/dick7/mydocs.git git pull [--rebase] git push [-f -u origin dev] vi .gitignore venv / * . pyc __pycache__ / instance / . pytest_cache / . coverage htmlcov / dist / build / * . egg - info / 3.webhook on github \u00b6 mywebhook.sh mywebhook.sh 3.1 github webhook config and test \u00b6 Webhooks / Manage webhook We\u2019ll send a POST request to the URL below with details of any subscribed events. You can also specify which data format you\u2019d like to receive (JSON, x-www-form-urlencoded, etc). More information can be found in our developer documentation. Payload URL http://IP:8888/hook?access_key=***bTk&param=mydocs Content type default Secret default NULL Which events would you like to trigger this webhook? Just the push event. default Send me everything. Let me select individual events. Active When activated, the github.com will give a message below: Okay, that hook was successfully created. We sent a ping payload to test it out! Read more about it at https://developer.github.com/webhooks/#ping-event. , stands for setting ok and completed. We will deliver event details when this hook is triggered. Recent Deliveries Recent Deliveries e3125208-5c62-11ea-8fe3-094f6a057ebd Request Response URL: http://IP:8888/hook?access_key= ***&param=mydocs {\"code\": 1} ... ... 4.git server \u00b6 \u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u81ea\u5df1\u642d\u5efa\u4e00\u53f0 Git \u670d\u52a1\u5668\u4f5c\u4e3a\u79c1\u6709\u4ed3\u5e93\u4f7f\u7528\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4ee5 Centos \u4e3a\u4f8b\u642d\u5efa Git \u670d\u52a1\u5668\u3002 (1)\u3001\u5b89\u88c5Git \u00b6 $ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel $ yum install git \u63a5\u4e0b\u6765\u6211\u4eec \u521b\u5efa\u4e00\u4e2agit\u7528\u6237\u7ec4\u548c\u7528\u6237\uff0c\u7528\u6765\u8fd0\u884cgit\u670d\u52a1\uff1a $ groupadd git $ useradd git -g git (2)\u3001\u521b\u5efa\u8bc1\u4e66\u767b\u5f55 \u00b6 \u6536\u96c6\u6240\u6709\u9700\u8981\u767b\u5f55\u7684\u7528\u6237\u7684\u516c\u94a5\uff0c\u516c\u94a5\u4f4d\u4e8eid_rsa.pub\u6587\u4ef6\u4e2d\uff0c\u628a\u6211\u4eec\u7684\u516c\u94a5\u5bfc\u5165\u5230/home/git/.ssh/authorized_keys\u6587\u4ef6\u91cc\uff0c\u4e00\u884c\u4e00\u4e2a\u3002 \u5982\u679c\u6ca1\u6709\u8be5\u6587\u4ef6\u521b\u5efa\u5b83\uff1a $ cd /home/git/ $ mkdir .ssh $ chmod 755 .ssh $ touch .ssh/authorized_keys $ chmod 644 .ssh/authorized_keys (3)\u3001\u521d\u59cb\u5316Git\u4ed3\u5e93 \u00b6 \u9996\u5148\u6211\u4eec\u9009\u5b9a\u4e00\u4e2a\u76ee\u5f55\u4f5c\u4e3aGit\u4ed3\u5e93\uff0c\u5047\u5b9a\u662f/home/gitrepo/mygit.git\uff0c\u5728/home/gitrepo\u76ee\u5f55\u4e0b\u8f93\u5165\u547d\u4ee4\uff1a $ cd /home $ mkdir gitrepo $ chown git:git gitrepo/ $ cd gitrepo $ git init --bare mygit.git Initialized empty Git repository in /home/gitrepo/mygit.git \u4ee5\u4e0a\u547d\u4ee4Git\u521b\u5efa\u4e00\u4e2a\u7a7a\u4ed3\u5e93\uff0c\u670d\u52a1\u5668\u4e0a\u7684Git\u4ed3\u5e93\u901a\u5e38\u90fd\u4ee5.git\u7ed3\u5c3e\u3002\u7136\u540e\uff0c\u628a\u4ed3\u5e93\u6240\u5c5e\u7528\u6237\u6539\u4e3agit\uff1a $ chown -R git:git mygit.git (4)\u3001\u514b\u9686\u4ed3\u5e93 \u00b6 $ git clone git @192.168.45.4 :/ home / gitrepo / mygit . git Cloning into ' runoob ' ... warning : You appear to have cloned an empty repository . Checking connectivity ... done . 192.168.45.4 \u4e3a Git \u6240\u5728\u670d\u52a1\u5668 ip \uff0c\u4f60\u9700\u8981\u5c06\u5176\u4fee\u6539\u4e3a\u4f60\u81ea\u5df1\u7684 Git \u670d\u52a1 ip\u3002\u8fd9\u6837\u6211\u4eec\u7684 Git \u670d\u52a1\u5668\u5b89\u88c5\u5c31\u5b8c\u6210\u3002","title":"Git Github"},{"location":"git/#gitgithub","text":"","title":"Git/Github"},{"location":"git/#1git-push-without-password","text":"ssh-keygen # \u516c\u94a5\u751f\u6210\uff0c\u7136\u540e\u628a\u516c\u94a5\u653e\u5230GitHub\u4e0a git config --global user.email \"xxx@xxmail.com\" git config --global user.name \"xxx\" git config --global user.password \"xxx\" git config --global credential.helper store # git push\u7684\u65f6\u5019\u8bb0\u4f4f\u7528\u6237\u540d\u548c\u5bc6\u7801 git config --global push.default simple","title":"1.git push without password"},{"location":"git/#2git-basic-operations","text":"# git clone https://github.com/dick7/mydocs.git git init # git reset --hard origin/master # git branch --set-upstream-to=origin/master # git branch --set-upstream-to=origin/dev git add . git commit -m '1st upload to github' git remote add origin https://github.com/dick7/mydocs.git git pull [--rebase] git push [-f -u origin dev] vi .gitignore venv / * . pyc __pycache__ / instance / . pytest_cache / . coverage htmlcov / dist / build / * . egg - info /","title":"2.git basic operations"},{"location":"git/#3webhook-on-github","text":"mywebhook.sh mywebhook.sh","title":"3.webhook on github"},{"location":"git/#31-github-webhook-config-and-test","text":"Webhooks / Manage webhook We\u2019ll send a POST request to the URL below with details of any subscribed events. You can also specify which data format you\u2019d like to receive (JSON, x-www-form-urlencoded, etc). More information can be found in our developer documentation. Payload URL http://IP:8888/hook?access_key=***bTk&param=mydocs Content type default Secret default NULL Which events would you like to trigger this webhook? Just the push event. default Send me everything. Let me select individual events. Active When activated, the github.com will give a message below: Okay, that hook was successfully created. We sent a ping payload to test it out! Read more about it at https://developer.github.com/webhooks/#ping-event. , stands for setting ok and completed. We will deliver event details when this hook is triggered. Recent Deliveries Recent Deliveries e3125208-5c62-11ea-8fe3-094f6a057ebd Request Response URL: http://IP:8888/hook?access_key= ***&param=mydocs {\"code\": 1} ... ...","title":"3.1 github webhook config and test"},{"location":"git/#4git-server","text":"\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u81ea\u5df1\u642d\u5efa\u4e00\u53f0 Git \u670d\u52a1\u5668\u4f5c\u4e3a\u79c1\u6709\u4ed3\u5e93\u4f7f\u7528\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4ee5 Centos \u4e3a\u4f8b\u642d\u5efa Git \u670d\u52a1\u5668\u3002","title":"4.git server"},{"location":"git/#1git","text":"$ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel $ yum install git \u63a5\u4e0b\u6765\u6211\u4eec \u521b\u5efa\u4e00\u4e2agit\u7528\u6237\u7ec4\u548c\u7528\u6237\uff0c\u7528\u6765\u8fd0\u884cgit\u670d\u52a1\uff1a $ groupadd git $ useradd git -g git","title":"(1)\u3001\u5b89\u88c5Git"},{"location":"git/#2","text":"\u6536\u96c6\u6240\u6709\u9700\u8981\u767b\u5f55\u7684\u7528\u6237\u7684\u516c\u94a5\uff0c\u516c\u94a5\u4f4d\u4e8eid_rsa.pub\u6587\u4ef6\u4e2d\uff0c\u628a\u6211\u4eec\u7684\u516c\u94a5\u5bfc\u5165\u5230/home/git/.ssh/authorized_keys\u6587\u4ef6\u91cc\uff0c\u4e00\u884c\u4e00\u4e2a\u3002 \u5982\u679c\u6ca1\u6709\u8be5\u6587\u4ef6\u521b\u5efa\u5b83\uff1a $ cd /home/git/ $ mkdir .ssh $ chmod 755 .ssh $ touch .ssh/authorized_keys $ chmod 644 .ssh/authorized_keys","title":"(2)\u3001\u521b\u5efa\u8bc1\u4e66\u767b\u5f55"},{"location":"git/#3git","text":"\u9996\u5148\u6211\u4eec\u9009\u5b9a\u4e00\u4e2a\u76ee\u5f55\u4f5c\u4e3aGit\u4ed3\u5e93\uff0c\u5047\u5b9a\u662f/home/gitrepo/mygit.git\uff0c\u5728/home/gitrepo\u76ee\u5f55\u4e0b\u8f93\u5165\u547d\u4ee4\uff1a $ cd /home $ mkdir gitrepo $ chown git:git gitrepo/ $ cd gitrepo $ git init --bare mygit.git Initialized empty Git repository in /home/gitrepo/mygit.git \u4ee5\u4e0a\u547d\u4ee4Git\u521b\u5efa\u4e00\u4e2a\u7a7a\u4ed3\u5e93\uff0c\u670d\u52a1\u5668\u4e0a\u7684Git\u4ed3\u5e93\u901a\u5e38\u90fd\u4ee5.git\u7ed3\u5c3e\u3002\u7136\u540e\uff0c\u628a\u4ed3\u5e93\u6240\u5c5e\u7528\u6237\u6539\u4e3agit\uff1a $ chown -R git:git mygit.git","title":"(3)\u3001\u521d\u59cb\u5316Git\u4ed3\u5e93"},{"location":"git/#4","text":"$ git clone git @192.168.45.4 :/ home / gitrepo / mygit . git Cloning into ' runoob ' ... warning : You appear to have cloned an empty repository . Checking connectivity ... done . 192.168.45.4 \u4e3a Git \u6240\u5728\u670d\u52a1\u5668 ip \uff0c\u4f60\u9700\u8981\u5c06\u5176\u4fee\u6539\u4e3a\u4f60\u81ea\u5df1\u7684 Git \u670d\u52a1 ip\u3002\u8fd9\u6837\u6211\u4eec\u7684 Git \u670d\u52a1\u5668\u5b89\u88c5\u5c31\u5b8c\u6210\u3002","title":"(4)\u3001\u514b\u9686\u4ed3\u5e93"},{"location":"imgs/","text":"test images on mkdocs \u00b6 1.favicon.ico 2.my ico-head.jpg 3.all types of pics # ![](imgs/*.*)","title":"Imgs"},{"location":"imgs/#test-images-on-mkdocs","text":"1.favicon.ico 2.my ico-head.jpg 3.all types of pics # ![](imgs/*.*)","title":"test images on mkdocs"},{"location":"links/","text":"add links \u00b6 MkDocs offical site \u83dc\u9e1f\u6559\u7a0b Github \u8f7d\u7530 \u65b0\u5883\u754c","title":"Links"},{"location":"links/#add-links","text":"MkDocs offical site \u83dc\u9e1f\u6559\u7a0b Github \u8f7d\u7530 \u65b0\u5883\u754c","title":"add links"},{"location":"back-end/soap/","text":"SOAP \u00b6","title":"SOAP"},{"location":"back-end/soap/#soap","text":"","title":"SOAP"},{"location":"back-end/xml/","text":"XML \u00b6","title":"XML"},{"location":"back-end/xml/#xml","text":"","title":"XML"},{"location":"dbs/mongo/","text":"Mongo Database \u00b6 Backup & Restore \u00b6 1. backup mongodb \u00b6 bash: a.backup all dbs: [mongodump --host HOST_NAME --port PORT_NUMBER --dbpath DB_PATH --out BACKUP_DIRECTORY] b.backup selected db: [mongodump --collection COLLECTION --db DB_NAME] ig: [mongodump -h 127.0.0.1:27017] [ --dbpath /data/db --out /www/backup/database] exp: mongodump 2. restore mongodb \u00b6 bash: [mongorestore][ -h <:port>][ -d dbname][ --dir ] exp: mongorestore exp: echo \"restart mongod\" killall -9 mongod a.without configuration ,NOT RECOMMENTED nohup mongod & b.with conf mongod -f /www/server/mongodb/config.conf echo \"waiting for 7s:using:[read -t 7]\" read -t 7 mongorestore --dir /www/backup/database/dump","title":"Mongo"},{"location":"dbs/mongo/#mongo-database","text":"","title":"Mongo Database"},{"location":"dbs/mongo/#backup-restore","text":"","title":"Backup &amp; Restore"},{"location":"dbs/mongo/#1-backup-mongodb","text":"bash: a.backup all dbs: [mongodump --host HOST_NAME --port PORT_NUMBER --dbpath DB_PATH --out BACKUP_DIRECTORY] b.backup selected db: [mongodump --collection COLLECTION --db DB_NAME] ig: [mongodump -h 127.0.0.1:27017] [ --dbpath /data/db --out /www/backup/database] exp: mongodump","title":"1. backup mongodb"},{"location":"dbs/mongo/#2-restore-mongodb","text":"bash: [mongorestore][ -h <:port>][ -d dbname][ --dir ] exp: mongorestore exp: echo \"restart mongod\" killall -9 mongod a.without configuration ,NOT RECOMMENTED nohup mongod & b.with conf mongod -f /www/server/mongodb/config.conf echo \"waiting for 7s:using:[read -t 7]\" read -t 7 mongorestore --dir /www/backup/database/dump","title":"2. restore mongodb"},{"location":"dbs/mysql/","text":"MySQL \u00b6 \u767b\u5f55\uff1a \u00b6 mysql -u root -p 123 \u521d\u59cb\u5316/\u5bfc\u5165\u6570\u636e\u5e93 \u00b6 mysql>use [database-name];source *.sql; or >mysql -u root -p 123 [database-name] < *.sql \u4f7f\u7528cat\u547d\u4ee4\u67e5\u770b\u9ed8\u8ba4\u5bc6\u7801 \u00b6 sudo cat /etc/mysql/debian.cnf \u663e\u793a\u7684\u5185\u5bb9\uff1a # Automatically generated for Debian scripts . DO NOT TOUCH ! [ client ] host = localhost user = debian - sys - maint password = 6 b76NDnr65gNCcia socket = / var / run / mysqld / mysqld . sock [ mysql_upgrade ] host = localhost user = debian - sys - maint password = 6 b76NDnr65gNCcia socket = / var / run / mysqld / mysqld . sock \u4f7f\u7528\u9ed8\u8ba4\u5bc6\u7801\u767b\u5f55 \u00b6 # mysql -udebian-sys-maint -p Enter password: ... mysql> \u4fee\u6539\u5bc6\u7801 \u00b6 UPDATE mysql.user SET authentication_string=PASSWORD('root'), PLUGIN='mysql_native_password' WHERE USER='root'; \u91cd\u542f\u670d\u52a1 \u00b6 /etc/init.d/mysql restart \u9000\u51fa\u91cd\u65b0\u767b\u5f55 \u00b6 mysql -u root -p root \u5373\u53ef\u767b\u9646\u6210\u529f\uff01\uff01\uff01 Ubuntu\u7cfb\u7edf\u4e0bMySQL\u6570\u636e\u5e93\u57fa\u672c\u64cd\u4f5c \u00b6 Ubuntu\u7cfb\u7edf\u4e0b\u5b89\u88c5MySQL\u540e,\u6240\u6709\u65b0\u521b\u5efa\u7684\u6570\u636e\u5e93\u7684\u9ed8\u8ba4\u76ee\u5f55\u4e3a/var/lib/mysql\u76ee\u5f55,\u4ee5\u540e\u7528\u6237\u81ea\u5df1\u521b\u5efa\u7684\u6570\u636e\u5e93\u9ed8\u8ba4\u5c31\u4fdd\u5b58\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e0b.\u5728\u7ec8\u7aef\u8f93\u5165mysql\u56de\u8f66\u540e,\u542f\u52a8mysql\u670d\u52a1,\u53ef\u4ee5\u5f00\u59cb\u8f93\u5165\u547d\u4ee4\u4e86.\u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e9b\u6700\u57fa\u672c\u7684\u6570\u636e\u64cd\u4f5c\u547d\u4ee4: 1. show databases ; #\u67e5\u770b\u6709\u54ea\u4e9b\u6570\u636e\u5e93\u5b58\u5728 2. create database name ; #\u521b\u5efa\u4e00\u4e2a\u53eb name\u7684\u6570\u636e\u5e93 3. use name ; #\u8fdb\u5165 ( \u6253\u5f00 ) \u540d\u5b57\u53eb name\u7684\u6570\u636e\u5e93 4. show tables ; #\u67e5\u770b\u8fd9\u4e2a\u6570\u636e\u5e93\u4e2d\u6709\u54ea\u4e9b\u8868 5. create table tb1 ( nid int , name varchar ( 20 ), pwd varchar ( 64 )) ; #\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u53eb tb1\u7684\u8868 , \u8868\u4e2d\u5171\u6709 3 \u4e2a\u5b57\u6bb5 , \u7b2c 1 \u4e2a\u5b57\u6bb5\u53eb nid , \u662f int\u578b\u7684 , \u7b2c 2 \u5916\u5b57\u6bb5\u53eb name , \u662f varchar () \u578b\u7684 , \u957f\u5ea6\u4e3a 20 , \u7b2c 3 \u4e2a\u5b57\u6bb5\u540d\u53eb pwd , \u4e5f\u662f varchar () \u578b\u7684 , \u957f\u5ea6\u4e3a 64 6. select * from tb1 ; #\u67e5\u770b tb1\u8868\u4e2d\u7684\u6240\u6709\u6570\u636e 7. insert into tb1 ( nid , name , pwd ) values ( 1 , ' alex ',' 123 ' ); #\u5728 tb1\u8868\u4e2d\u63d2\u5165\u4e00\u884c\u6570\u636e . 8. create user guoming @ localhost identified by ' 990310 ' ; #\u521b\u5efa\u65b0\u7528\u6237 , \u7528\u6237\u540d\u662f guoming , \u5bc6\u7801\u662f 990310 9. mysql - u guoming - p #\u4f7f\u7528 guoming\u7528\u6237\u542f\u52a8mysql , \u8981\u6c42\u8f93\u5165\u5bc6\u7801 , \u8f93\u5165 990310 , \u901a\u8fc7\u9a8c\u8bc1\u540e\u542f\u52a8\u4e86 mysql . 10. drop user guoming @ localhost #\u5c06\u7528\u6237 guoming \u5220\u9664 11. rename user guoming @ localhost to dongyang @127.0.0.1 \u5c06 guoming\u7528\u6237\u66f4\u540d\u4e3adongyang\u7528\u6237 12. set password for root @ localhost = Password ( ' 990310 ' ); #\u5c06 root\u7528\u6237\u5bc6\u7801\u8bbe\u7f6e\u4e3a990310 MySQL\u521b\u5efa\u6570\u636e\u5e93\u4e0e\u521b\u5efa\u7528\u6237\u4ee5\u53ca\u6388\u6743 \u00b6 1 \u3001 create schema [ \u6570\u636e\u5e93\u540d\u79f0 ] default character set utf8 collate utf8_general_ci ; --\u521b\u5efa\u6570\u636e\u5e93 \u91c7\u7528create schema\u548ccreate database\u521b\u5efa\u6570\u636e\u5e93\u7684\u6548\u679c\u4e00\u6837 \u3002 2 \u3001 create user '[\u7528\u6237\u540d\u79f0]' @ '%' identified by '[\u7528\u6237\u5bc6\u7801]' ; --\u521b\u5efa\u7528\u6237 \u5bc6\u78018\u4f4d\u4ee5\u4e0a \uff0c \u5305\u62ec \uff1a \u5927\u5199\u5b57\u6bcd \u3001 \u5c0f\u5199\u5b57\u6bcd \u3001 \u6570\u5b57 \u3001 \u7279\u6b8a\u5b57\u7b26 % \uff1a \u5339\u914d\u6240\u6709\u4e3b\u673a \uff0c \u8be5\u5730\u65b9\u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u6210 \u2018 localhost \u2019\uff0c \u4ee3\u8868\u53ea\u80fd\u672c\u5730\u8bbf\u95ee \uff0c \u4f8b\u5982root\u8d26\u6237\u9ed8\u8ba4\u4e3a \u2018 localhost \u2018 3 \u3001 grant select , insert , update , delete , create , ALTER , REFERENCES , INDEX on [ \u6570\u636e\u5e93\u540d\u79f0 ] . * to [ \u7528\u6237\u540d\u79f0 ] ; --\u7528\u6237\u6388\u6743\u6570\u636e\u5e93 * \u4ee3\u8868\u6574\u4e2a\u6570\u636e\u5e93 --------------------------------- GRANT all ON djangoblog . * TO 'djangoblog' @ 'localhost' ; GRANT all ON [ \u6570\u636e\u5e93\u540d\u79f0 ] . * TO [ \u6570\u636e\u5e93\u540d\u79f0 ] . * to '[\u7528\u6237\u540d\u79f0]' ; --\u7528\u6237\u6388\u6743\u6570\u636e\u5e93\uff0c*\u4ee3\u8868\u6574\u4e2a\u6570\u636e\u5e93 -------------------------------- 4 \u3001 flush privileges ; --\u7acb\u5373\u542f\u7528\u4fee\u6539 5 \u3001 revoke all on * . * from tester ; --\u53d6\u6d88\u7528\u6237\u6240\u6709\u6570\u636e\u5e93\uff08\u8868\uff09\u7684\u6240\u6709\u6743\u9650 6 \u3001 delete from mysql . user where user = 'tester' ; --\u5220\u9664\u7528\u6237 7 \u3001 drop database [ schema\u540d\u79f0|\u6570\u636e\u5e93\u540d\u79f0 ] ; --\u5220\u9664\u6570\u636e\u5e93 create user 'erp_test' @ '%' identified by 'erp_test@abc' ; -- \u521b\u5efa\u7528\u6237 grant select , insert , update , delete , create on * . * to erp_test ; --\u7528\u6237\u6388\u6743\u6570\u636e\u5e93 flush privileges ; --\u7acb\u5373\u542f\u7528\u4fee\u6539","title":"MySQL"},{"location":"dbs/mysql/#mysql","text":"","title":"MySQL"},{"location":"dbs/mysql/#_1","text":"mysql -u root -p 123","title":"\u767b\u5f55\uff1a"},{"location":"dbs/mysql/#_2","text":"mysql>use [database-name];source *.sql; or >mysql -u root -p 123 [database-name] < *.sql","title":"\u521d\u59cb\u5316/\u5bfc\u5165\u6570\u636e\u5e93"},{"location":"dbs/mysql/#cat","text":"sudo cat /etc/mysql/debian.cnf \u663e\u793a\u7684\u5185\u5bb9\uff1a # Automatically generated for Debian scripts . DO NOT TOUCH ! [ client ] host = localhost user = debian - sys - maint password = 6 b76NDnr65gNCcia socket = / var / run / mysqld / mysqld . sock [ mysql_upgrade ] host = localhost user = debian - sys - maint password = 6 b76NDnr65gNCcia socket = / var / run / mysqld / mysqld . sock","title":"\u4f7f\u7528cat\u547d\u4ee4\u67e5\u770b\u9ed8\u8ba4\u5bc6\u7801"},{"location":"dbs/mysql/#_3","text":"# mysql -udebian-sys-maint -p Enter password: ... mysql>","title":"\u4f7f\u7528\u9ed8\u8ba4\u5bc6\u7801\u767b\u5f55"},{"location":"dbs/mysql/#_4","text":"UPDATE mysql.user SET authentication_string=PASSWORD('root'), PLUGIN='mysql_native_password' WHERE USER='root';","title":"\u4fee\u6539\u5bc6\u7801"},{"location":"dbs/mysql/#_5","text":"/etc/init.d/mysql restart","title":"\u91cd\u542f\u670d\u52a1"},{"location":"dbs/mysql/#_6","text":"mysql -u root -p root \u5373\u53ef\u767b\u9646\u6210\u529f\uff01\uff01\uff01","title":"\u9000\u51fa\u91cd\u65b0\u767b\u5f55"},{"location":"dbs/mysql/#ubuntumysql","text":"Ubuntu\u7cfb\u7edf\u4e0b\u5b89\u88c5MySQL\u540e,\u6240\u6709\u65b0\u521b\u5efa\u7684\u6570\u636e\u5e93\u7684\u9ed8\u8ba4\u76ee\u5f55\u4e3a/var/lib/mysql\u76ee\u5f55,\u4ee5\u540e\u7528\u6237\u81ea\u5df1\u521b\u5efa\u7684\u6570\u636e\u5e93\u9ed8\u8ba4\u5c31\u4fdd\u5b58\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e0b.\u5728\u7ec8\u7aef\u8f93\u5165mysql\u56de\u8f66\u540e,\u542f\u52a8mysql\u670d\u52a1,\u53ef\u4ee5\u5f00\u59cb\u8f93\u5165\u547d\u4ee4\u4e86.\u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e9b\u6700\u57fa\u672c\u7684\u6570\u636e\u64cd\u4f5c\u547d\u4ee4: 1. show databases ; #\u67e5\u770b\u6709\u54ea\u4e9b\u6570\u636e\u5e93\u5b58\u5728 2. create database name ; #\u521b\u5efa\u4e00\u4e2a\u53eb name\u7684\u6570\u636e\u5e93 3. use name ; #\u8fdb\u5165 ( \u6253\u5f00 ) \u540d\u5b57\u53eb name\u7684\u6570\u636e\u5e93 4. show tables ; #\u67e5\u770b\u8fd9\u4e2a\u6570\u636e\u5e93\u4e2d\u6709\u54ea\u4e9b\u8868 5. create table tb1 ( nid int , name varchar ( 20 ), pwd varchar ( 64 )) ; #\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u53eb tb1\u7684\u8868 , \u8868\u4e2d\u5171\u6709 3 \u4e2a\u5b57\u6bb5 , \u7b2c 1 \u4e2a\u5b57\u6bb5\u53eb nid , \u662f int\u578b\u7684 , \u7b2c 2 \u5916\u5b57\u6bb5\u53eb name , \u662f varchar () \u578b\u7684 , \u957f\u5ea6\u4e3a 20 , \u7b2c 3 \u4e2a\u5b57\u6bb5\u540d\u53eb pwd , \u4e5f\u662f varchar () \u578b\u7684 , \u957f\u5ea6\u4e3a 64 6. select * from tb1 ; #\u67e5\u770b tb1\u8868\u4e2d\u7684\u6240\u6709\u6570\u636e 7. insert into tb1 ( nid , name , pwd ) values ( 1 , ' alex ',' 123 ' ); #\u5728 tb1\u8868\u4e2d\u63d2\u5165\u4e00\u884c\u6570\u636e . 8. create user guoming @ localhost identified by ' 990310 ' ; #\u521b\u5efa\u65b0\u7528\u6237 , \u7528\u6237\u540d\u662f guoming , \u5bc6\u7801\u662f 990310 9. mysql - u guoming - p #\u4f7f\u7528 guoming\u7528\u6237\u542f\u52a8mysql , \u8981\u6c42\u8f93\u5165\u5bc6\u7801 , \u8f93\u5165 990310 , \u901a\u8fc7\u9a8c\u8bc1\u540e\u542f\u52a8\u4e86 mysql . 10. drop user guoming @ localhost #\u5c06\u7528\u6237 guoming \u5220\u9664 11. rename user guoming @ localhost to dongyang @127.0.0.1 \u5c06 guoming\u7528\u6237\u66f4\u540d\u4e3adongyang\u7528\u6237 12. set password for root @ localhost = Password ( ' 990310 ' ); #\u5c06 root\u7528\u6237\u5bc6\u7801\u8bbe\u7f6e\u4e3a990310","title":"Ubuntu\u7cfb\u7edf\u4e0bMySQL\u6570\u636e\u5e93\u57fa\u672c\u64cd\u4f5c"},{"location":"dbs/mysql/#mysql_1","text":"1 \u3001 create schema [ \u6570\u636e\u5e93\u540d\u79f0 ] default character set utf8 collate utf8_general_ci ; --\u521b\u5efa\u6570\u636e\u5e93 \u91c7\u7528create schema\u548ccreate database\u521b\u5efa\u6570\u636e\u5e93\u7684\u6548\u679c\u4e00\u6837 \u3002 2 \u3001 create user '[\u7528\u6237\u540d\u79f0]' @ '%' identified by '[\u7528\u6237\u5bc6\u7801]' ; --\u521b\u5efa\u7528\u6237 \u5bc6\u78018\u4f4d\u4ee5\u4e0a \uff0c \u5305\u62ec \uff1a \u5927\u5199\u5b57\u6bcd \u3001 \u5c0f\u5199\u5b57\u6bcd \u3001 \u6570\u5b57 \u3001 \u7279\u6b8a\u5b57\u7b26 % \uff1a \u5339\u914d\u6240\u6709\u4e3b\u673a \uff0c \u8be5\u5730\u65b9\u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u6210 \u2018 localhost \u2019\uff0c \u4ee3\u8868\u53ea\u80fd\u672c\u5730\u8bbf\u95ee \uff0c \u4f8b\u5982root\u8d26\u6237\u9ed8\u8ba4\u4e3a \u2018 localhost \u2018 3 \u3001 grant select , insert , update , delete , create , ALTER , REFERENCES , INDEX on [ \u6570\u636e\u5e93\u540d\u79f0 ] . * to [ \u7528\u6237\u540d\u79f0 ] ; --\u7528\u6237\u6388\u6743\u6570\u636e\u5e93 * \u4ee3\u8868\u6574\u4e2a\u6570\u636e\u5e93 --------------------------------- GRANT all ON djangoblog . * TO 'djangoblog' @ 'localhost' ; GRANT all ON [ \u6570\u636e\u5e93\u540d\u79f0 ] . * TO [ \u6570\u636e\u5e93\u540d\u79f0 ] . * to '[\u7528\u6237\u540d\u79f0]' ; --\u7528\u6237\u6388\u6743\u6570\u636e\u5e93\uff0c*\u4ee3\u8868\u6574\u4e2a\u6570\u636e\u5e93 -------------------------------- 4 \u3001 flush privileges ; --\u7acb\u5373\u542f\u7528\u4fee\u6539 5 \u3001 revoke all on * . * from tester ; --\u53d6\u6d88\u7528\u6237\u6240\u6709\u6570\u636e\u5e93\uff08\u8868\uff09\u7684\u6240\u6709\u6743\u9650 6 \u3001 delete from mysql . user where user = 'tester' ; --\u5220\u9664\u7528\u6237 7 \u3001 drop database [ schema\u540d\u79f0|\u6570\u636e\u5e93\u540d\u79f0 ] ; --\u5220\u9664\u6570\u636e\u5e93 create user 'erp_test' @ '%' identified by 'erp_test@abc' ; -- \u521b\u5efa\u7528\u6237 grant select , insert , update , delete , create on * . * to erp_test ; --\u7528\u6237\u6388\u6743\u6570\u636e\u5e93 flush privileges ; --\u7acb\u5373\u542f\u7528\u4fee\u6539","title":"MySQL\u521b\u5efa\u6570\u636e\u5e93\u4e0e\u521b\u5efa\u7528\u6237\u4ee5\u53ca\u6388\u6743"},{"location":"dbs/sqlite3/","text":"Sqlite3 \u00b6","title":"Sqlite"},{"location":"dbs/sqlite3/#sqlite3","text":"","title":"Sqlite3"},{"location":"diaries/0/","text":"Hello Myself! \u00b6 Smail faces \u00b6 :) _ :D _ _ \u751f\u6d3b\u5982\u8bd7\uff0c\u5982\u68a6\u5982\u5e7b...","title":"Test"},{"location":"diaries/0/#hello-myself","text":"","title":"Hello Myself!"},{"location":"diaries/0/#smail-faces","text":":) _ :D _ _ \u751f\u6d3b\u5982\u8bd7\uff0c\u5982\u68a6\u5982\u5e7b...","title":"Smail faces"},{"location":"diaries/20200303/","text":"Editor On line \u00b6 1.Use my sites: \u00b6 dev.ztloadfield.com ,which soure is osroom realized by flask+SimpleMDE . My realizing Vist link is: , in researching . Or the developing project: my markdown . Next, try to develop and make the sites contact with Public Popular Plateferm ,such as Aliyun , Baidu , Wechat , Github , Sina , 163.com . blog.new-realm.cn ,which source is PHP+wordpress .(Easy but negative) 2.Use other sites:(negative) \u00b6 3.Use Vim + Term \u00b6 github-vimrc Needing more linux exp. 4. \u8f7d\u7530\u4fe1\u606f \u963f\u91cc\u4e91 \u5907\u6848\u5b8c\u6210\uff0c \u8d1d\u9510\u79d1\u6280 \u8f6c\u5165\u6ce8\u518c\u5546\u5b8c\u6210 \u00b6 \u57df\u540d\u89e3\u6790\u8be6\u89c1\u5b9d\u5854\u9762\u677f\uff0c \u7f51\u7ad9\u7ba1\u7406 5. \u5373\u65f6\u5907\u4efd\uff0c\u5373\u65f6\u4e0a\u4f20 \uff08\u5230 Github \uff09\uff0c\u80fd\u6709\u6548\u6539\u5584\u5f00\u53d1\u53ca\u8fd0\u7ef4\u8fc7\u7a0b\u7684\u5931\u8bef\u3002 \u00b6","title":"First day"},{"location":"diaries/20200303/#editor-on-line","text":"","title":"Editor On line"},{"location":"diaries/20200303/#1use-my-sites","text":"dev.ztloadfield.com ,which soure is osroom realized by flask+SimpleMDE . My realizing Vist link is: , in researching . Or the developing project: my markdown . Next, try to develop and make the sites contact with Public Popular Plateferm ,such as Aliyun , Baidu , Wechat , Github , Sina , 163.com . blog.new-realm.cn ,which source is PHP+wordpress .(Easy but negative)","title":"1.Use my sites:"},{"location":"diaries/20200303/#2use-other-sitesnegative","text":"","title":"2.Use other sites:(negative)"},{"location":"diaries/20200303/#3use-vim-term","text":"github-vimrc Needing more linux exp.","title":"3.Use Vim + Term"},{"location":"diaries/20200303/#4","text":"\u57df\u540d\u89e3\u6790\u8be6\u89c1\u5b9d\u5854\u9762\u677f\uff0c \u7f51\u7ad9\u7ba1\u7406","title":"4.\u8f7d\u7530\u4fe1\u606f\u963f\u91cc\u4e91\u5907\u6848\u5b8c\u6210\uff0c\u8d1d\u9510\u79d1\u6280\u8f6c\u5165\u6ce8\u518c\u5546\u5b8c\u6210"},{"location":"diaries/20200303/#5github","text":"","title":"5.\u5373\u65f6\u5907\u4efd\uff0c\u5373\u65f6\u4e0a\u4f20\uff08\u5230Github\uff09\uff0c\u80fd\u6709\u6548\u6539\u5584\u5f00\u53d1\u53ca\u8fd0\u7ef4\u8fc7\u7a0b\u7684\u5931\u8bef\u3002"},{"location":"diaries/4/","text":"\u4f2a\u9759\u6001 & test.new-realm.cn webhook & \u5fae\u4fe1\u6d4b\u8bd5\u5f00\u53d1 \u00b6 \u5b9d\u5854\u9762\u677f-\u7f51\u7ad9-\u5b50\u76ee\u5f55\u7ed1\u5b9a-\u57df\u540d,\u914d\u7f6e \u4f2a\u9759\u6001 \u00b6 \u57df\u540d test.new-realm.cn \u5bf9\u5e94\u76ee\u5f55 /www/wwwroot/new-realm.cn/test location / { proxy_pass http://127.0.0.1:5050; } test.new-realm.cn webhook \u00b6 \u914d\u7f6e\u6587\u4ef6 #!/bin/bash echo \"Some ('push') event(s) makes webhook start!\" echo \"-------------------Start-------------------\" date --date = '0 days ago' \"+%Y-%m-%d %H:%M:%S\" # PARAM=myflask PARAM = $1 echo \"Use ' $PARAM ' instead of passing by param ' $1 '\" if [ ! -n \" $PARAM \" ] ; then echo \" $PARAM is NULL!No param come in!\" echo \"--------------------End--------------------\" exit fi gitLocal = \"/www/wwwroot/new-realm.cn/test/ $PARAM \" gitRemote = \"https://github.com/dick7/ $PARAM .git\" echo \"gitLocal: $gitLocal \" echo \"gitRemote: $gitRemote \" if [ -d \" $gitLocal \" ] ; then echo \" $gitLocal EXISTs\uff01\" cd $gitLocal if [ ! -d \".git\" ] ; then echo \" $gitLocal dir does NOT contain '.git'!Needs 'git clone ...'\" git clone $gitRemote gittemp echo \"git clone completed!\" echo \"mv gittemp/.git .\" mv gittemp/.git . echo \"rm -rf gittemp\" rm -rf gittemp fi echo \"'git pull ...' from $gitRemote .\" #git reset --hard origin/master git pull echo \"change $gitLocal own rights to 'www:www'\" chown -R www:www $gitLocal echo \"--------------------End--------------------\" exit else echo \" $gitLocal does NOT EXIST!\" echo \"--------------------End--------------------\" exit fi \u5176\u4e2d\uff0c\u4e3b\u8981\u4fee\u6539\u90e8\u5206\uff1a gitLocal=\"/www/wwwroot/new-realm.cn/test/$PARAM\" \u5fae\u4fe1\u6d4b\u8bd5\u5f00\u53d1 \u00b6","title":"Second day"},{"location":"diaries/4/#testnew-realmcn-webhook","text":"","title":"\u4f2a\u9759\u6001 &amp; test.new-realm.cn webhook &amp; \u5fae\u4fe1\u6d4b\u8bd5\u5f00\u53d1"},{"location":"diaries/4/#-","text":"\u57df\u540d test.new-realm.cn \u5bf9\u5e94\u76ee\u5f55 /www/wwwroot/new-realm.cn/test location / { proxy_pass http://127.0.0.1:5050; }","title":"\u5b9d\u5854\u9762\u677f-\u7f51\u7ad9-\u5b50\u76ee\u5f55\u7ed1\u5b9a-\u57df\u540d,\u914d\u7f6e\u4f2a\u9759\u6001"},{"location":"diaries/4/#testnew-realmcn-webhook_1","text":"\u914d\u7f6e\u6587\u4ef6 #!/bin/bash echo \"Some ('push') event(s) makes webhook start!\" echo \"-------------------Start-------------------\" date --date = '0 days ago' \"+%Y-%m-%d %H:%M:%S\" # PARAM=myflask PARAM = $1 echo \"Use ' $PARAM ' instead of passing by param ' $1 '\" if [ ! -n \" $PARAM \" ] ; then echo \" $PARAM is NULL!No param come in!\" echo \"--------------------End--------------------\" exit fi gitLocal = \"/www/wwwroot/new-realm.cn/test/ $PARAM \" gitRemote = \"https://github.com/dick7/ $PARAM .git\" echo \"gitLocal: $gitLocal \" echo \"gitRemote: $gitRemote \" if [ -d \" $gitLocal \" ] ; then echo \" $gitLocal EXISTs\uff01\" cd $gitLocal if [ ! -d \".git\" ] ; then echo \" $gitLocal dir does NOT contain '.git'!Needs 'git clone ...'\" git clone $gitRemote gittemp echo \"git clone completed!\" echo \"mv gittemp/.git .\" mv gittemp/.git . echo \"rm -rf gittemp\" rm -rf gittemp fi echo \"'git pull ...' from $gitRemote .\" #git reset --hard origin/master git pull echo \"change $gitLocal own rights to 'www:www'\" chown -R www:www $gitLocal echo \"--------------------End--------------------\" exit else echo \" $gitLocal does NOT EXIST!\" echo \"--------------------End--------------------\" exit fi \u5176\u4e2d\uff0c\u4e3b\u8981\u4fee\u6539\u90e8\u5206\uff1a gitLocal=\"/www/wwwroot/new-realm.cn/test/$PARAM\"","title":"test.new-realm.cn webhook"},{"location":"diaries/4/#_1","text":"","title":"\u5fae\u4fe1\u6d4b\u8bd5\u5f00\u53d1"},{"location":"fields/algorithms/","text":"Algorithems and Data Structure \u00b6 python","title":"Algorithms and Data Structure"},{"location":"fields/algorithms/#algorithems-and-data-structure","text":"python","title":"Algorithems and Data Structure"},{"location":"fields/blt/","text":"head1 \u00b6","title":"Behavior/Learning/Teaching"},{"location":"fields/blt/#head1","text":"","title":"head1"},{"location":"fields/control/","text":"head1 \u00b6","title":"Auto-Control"},{"location":"fields/control/#head1","text":"","title":"head1"},{"location":"fields/geo/","text":"head1 \u00b6","title":"Geo"},{"location":"fields/geo/#head1","text":"","title":"head1"},{"location":"fields/medical/","text":"head1 \u00b6","title":"Medical"},{"location":"fields/medical/#head1","text":"","title":"head1"},{"location":"fields/phisics/","text":"head1 \u00b6","title":"Phisics"},{"location":"fields/phisics/#head1","text":"","title":"head1"},{"location":"fields/v/","text":"VR/AR/AI/DL/ML \u00b6","title":"VR/AR/AI/DL/ML"},{"location":"fields/v/#vraraidlml","text":"","title":"VR/AR/AI/DL/ML"},{"location":"front-end/ajax/","text":"AJAX \u00b6","title":"AJAX"},{"location":"front-end/ajax/#ajax","text":"","title":"AJAX"},{"location":"front-end/bootstrap/","text":"BOOTSTRAP \u00b6","title":"BOOTSTRAP"},{"location":"front-end/bootstrap/#bootstrap","text":"","title":"BOOTSTRAP"},{"location":"front-end/css/","text":"CSS \u00b6","title":"CSS"},{"location":"front-end/css/#css","text":"","title":"CSS"},{"location":"front-end/html/","text":"HTML \u00b6","title":"HTML"},{"location":"front-end/html/#html","text":"","title":"HTML"},{"location":"front-end/jquery/","text":"JQUERY \u00b6","title":"JQUERY"},{"location":"front-end/jquery/#jquery","text":"","title":"JQUERY"},{"location":"front-end/js/","text":"JS \u00b6","title":"JS"},{"location":"front-end/js/#js","text":"","title":"JS"},{"location":"front-end/json/","text":"JSON \u00b6","title":"JSON"},{"location":"front-end/json/#json","text":"","title":"JSON"},{"location":"front-end/layui/","text":"LayUI \u00b6","title":"LayUI"},{"location":"front-end/layui/#layui","text":"","title":"LayUI"},{"location":"front-end/xadmin/","text":"Xadmin \u00b6","title":"Xadmin"},{"location":"front-end/xadmin/#xadmin","text":"","title":"Xadmin"},{"location":"mkdocs/jupyter-book/","text":"Jupyter-Book \u00b6 Writing Books With Jupyter-Notebook Start. 1.Install \u00b6 pip install jupyter-book 2.Create \u00b6 jupyter-book create myJupyter-book --demo tree myJupyter-book -L 2 myJupyter - book / \u251c\u2500\u2500 Gemfile \u251c\u2500\u2500 Gemfile . lock \u251c\u2500\u2500 Guardfile \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 _bibliography \u2502 \u2514\u2500\u2500 references . bib \u251c\u2500\u2500 _config . yml \u251c\u2500\u2500 _data \u2502 \u2514\u2500\u2500 toc . yml \u251c\u2500\u2500 _includes \u2502 \u251c\u2500\u2500 buttons \u2502 \u251c\u2500\u2500 buttons . html \u2502 \u251c\u2500\u2500 css_entry . scss \u2502 \u251c\u2500\u2500 fb_tags . html \u2502 \u251c\u2500\u2500 footer . html \u2502 \u251c\u2500\u2500 google_analytics . html \u2502 \u251c\u2500\u2500 head . html \u2502 \u251c\u2500\u2500 js \u2502 \u251c\u2500\u2500 mathjax . html \u2502 \u251c\u2500\u2500 metadata . json \u2502 \u251c\u2500\u2500 page - nav . html \u2502 \u251c\u2500\u2500 search \u2502 \u251c\u2500\u2500 sidebar . html \u2502 \u2514\u2500\u2500 topbar . html \u251c\u2500\u2500 _layouts \u2502 \u2514\u2500\u2500 default . html \u251c\u2500\u2500 _sass \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 hamburgers \u2502 \u251c\u2500\u2500 main . scss \u2502 \u251c\u2500\u2500 objects \u2502 \u2514\u2500\u2500 page \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 css \u2502 \u251c\u2500\u2500 custom \u2502 \u251c\u2500\u2500 html \u2502 \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 js \u251c\u2500\u2500 content \u2502 \u251c\u2500\u2500 01 \u2502 \u251c\u2500\u2500 02 \u2502 \u251c\u2500\u2500 03 \u2502 \u251c\u2500\u2500 04 \u2502 \u251c\u2500\u2500 LICENSE . md \u2502 \u251c\u2500\u2500 advanced \u2502 \u251c\u2500\u2500 beta \u2502 \u251c\u2500\u2500 contributing . md \u2502 \u251c\u2500\u2500 features \u2502 \u251c\u2500\u2500 guide \u2502 \u251c\u2500\u2500 images \u2502 \u251c\u2500\u2500 intro . ipynb \u2502 \u2514\u2500\u2500 test_pages \u251c\u2500\u2500 requirements . txt \u251c\u2500\u2500 runtime . txt \u2514\u2500\u2500 scripts \u251c\u2500\u2500 __pycache__ \u2514\u2500\u2500 clean . py 31 directories , 26 files All your writes is in /content : features.md and notebooks.ipynb . 3.Theme \u00b6 Notice: css and js . The yml markup structure of the book. 4.Build \u00b6 jupyter-book build myJupyter-book To generate Markdown files being used by Jekyll . Then: tree myJupyter-book -L 2 myJupyter - book / \u251c\u2500\u2500 Gemfile \u251c\u2500\u2500 Gemfile . lock \u251c\u2500\u2500 Guardfile \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 _bibliography \u2502 \u2514\u2500\u2500 references . bib \u251c\u2500\u2500 _build \u2502 \u251c\u2500\u2500 01 \u2502 \u251c\u2500\u2500 02 \u2502 \u251c\u2500\u2500 03 \u2502 \u251c\u2500\u2500 04 \u2502 \u251c\u2500\u2500 advanced \u2502 \u251c\u2500\u2500 contributing . html \u2502 \u251c\u2500\u2500 features \u2502 \u251c\u2500\u2500 guide \u2502 \u251c\u2500\u2500 images \u2502 \u251c\u2500\u2500 intro . html \u2502 \u2514\u2500\u2500 test_pages \u251c\u2500\u2500 _config . yml \u251c\u2500\u2500 _data \u2502 \u2514\u2500\u2500 toc . yml \u251c\u2500\u2500 _includes \u2502 \u251c\u2500\u2500 buttons \u2502 \u251c\u2500\u2500 buttons . html \u2502 \u251c\u2500\u2500 css_entry . scss \u2502 \u251c\u2500\u2500 fb_tags . html \u2502 \u251c\u2500\u2500 footer . html \u2502 \u251c\u2500\u2500 google_analytics . html \u2502 \u251c\u2500\u2500 head . html \u2502 \u251c\u2500\u2500 js \u2502 \u251c\u2500\u2500 mathjax . html \u2502 \u251c\u2500\u2500 metadata . json \u2502 \u251c\u2500\u2500 page - nav . html \u2502 \u251c\u2500\u2500 search \u2502 \u251c\u2500\u2500 sidebar . html \u2502 \u2514\u2500\u2500 topbar . html \u251c\u2500\u2500 _layouts \u2502 \u2514\u2500\u2500 default . html \u251c\u2500\u2500 _sass \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 hamburgers \u2502 \u251c\u2500\u2500 main . scss \u2502 \u251c\u2500\u2500 objects \u2502 \u2514\u2500\u2500 page \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 css \u2502 \u251c\u2500\u2500 custom \u2502 \u251c\u2500\u2500 html \u2502 \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 js \u251c\u2500\u2500 content \u2502 \u251c\u2500\u2500 01 \u2502 \u251c\u2500\u2500 02 \u2502 \u251c\u2500\u2500 03 \u2502 \u251c\u2500\u2500 04 \u2502 \u251c\u2500\u2500 LICENSE . md \u2502 \u251c\u2500\u2500 advanced \u2502 \u251c\u2500\u2500 beta \u2502 \u251c\u2500\u2500 contributing . md \u2502 \u251c\u2500\u2500 features \u2502 \u251c\u2500\u2500 guide \u2502 \u251c\u2500\u2500 images \u2502 \u251c\u2500\u2500 intro . ipynb \u2502 \u2514\u2500\u2500 test_pages \u251c\u2500\u2500 requirements . txt \u251c\u2500\u2500 runtime . txt \u2514\u2500\u2500 scripts \u251c\u2500\u2500 __pycache__ \u2514\u2500\u2500 clean . py 41 directories , 28 files","title":"Jupyter-Book"},{"location":"mkdocs/jupyter-book/#jupyter-book","text":"Writing Books With Jupyter-Notebook Start.","title":"Jupyter-Book"},{"location":"mkdocs/jupyter-book/#1install","text":"pip install jupyter-book","title":"1.Install"},{"location":"mkdocs/jupyter-book/#2create","text":"jupyter-book create myJupyter-book --demo tree myJupyter-book -L 2 myJupyter - book / \u251c\u2500\u2500 Gemfile \u251c\u2500\u2500 Gemfile . lock \u251c\u2500\u2500 Guardfile \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 _bibliography \u2502 \u2514\u2500\u2500 references . bib \u251c\u2500\u2500 _config . yml \u251c\u2500\u2500 _data \u2502 \u2514\u2500\u2500 toc . yml \u251c\u2500\u2500 _includes \u2502 \u251c\u2500\u2500 buttons \u2502 \u251c\u2500\u2500 buttons . html \u2502 \u251c\u2500\u2500 css_entry . scss \u2502 \u251c\u2500\u2500 fb_tags . html \u2502 \u251c\u2500\u2500 footer . html \u2502 \u251c\u2500\u2500 google_analytics . html \u2502 \u251c\u2500\u2500 head . html \u2502 \u251c\u2500\u2500 js \u2502 \u251c\u2500\u2500 mathjax . html \u2502 \u251c\u2500\u2500 metadata . json \u2502 \u251c\u2500\u2500 page - nav . html \u2502 \u251c\u2500\u2500 search \u2502 \u251c\u2500\u2500 sidebar . html \u2502 \u2514\u2500\u2500 topbar . html \u251c\u2500\u2500 _layouts \u2502 \u2514\u2500\u2500 default . html \u251c\u2500\u2500 _sass \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 hamburgers \u2502 \u251c\u2500\u2500 main . scss \u2502 \u251c\u2500\u2500 objects \u2502 \u2514\u2500\u2500 page \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 css \u2502 \u251c\u2500\u2500 custom \u2502 \u251c\u2500\u2500 html \u2502 \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 js \u251c\u2500\u2500 content \u2502 \u251c\u2500\u2500 01 \u2502 \u251c\u2500\u2500 02 \u2502 \u251c\u2500\u2500 03 \u2502 \u251c\u2500\u2500 04 \u2502 \u251c\u2500\u2500 LICENSE . md \u2502 \u251c\u2500\u2500 advanced \u2502 \u251c\u2500\u2500 beta \u2502 \u251c\u2500\u2500 contributing . md \u2502 \u251c\u2500\u2500 features \u2502 \u251c\u2500\u2500 guide \u2502 \u251c\u2500\u2500 images \u2502 \u251c\u2500\u2500 intro . ipynb \u2502 \u2514\u2500\u2500 test_pages \u251c\u2500\u2500 requirements . txt \u251c\u2500\u2500 runtime . txt \u2514\u2500\u2500 scripts \u251c\u2500\u2500 __pycache__ \u2514\u2500\u2500 clean . py 31 directories , 26 files All your writes is in /content : features.md and notebooks.ipynb .","title":"2.Create"},{"location":"mkdocs/jupyter-book/#3theme","text":"Notice: css and js . The yml markup structure of the book.","title":"3.Theme"},{"location":"mkdocs/jupyter-book/#4build","text":"jupyter-book build myJupyter-book To generate Markdown files being used by Jekyll . Then: tree myJupyter-book -L 2 myJupyter - book / \u251c\u2500\u2500 Gemfile \u251c\u2500\u2500 Gemfile . lock \u251c\u2500\u2500 Guardfile \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 _bibliography \u2502 \u2514\u2500\u2500 references . bib \u251c\u2500\u2500 _build \u2502 \u251c\u2500\u2500 01 \u2502 \u251c\u2500\u2500 02 \u2502 \u251c\u2500\u2500 03 \u2502 \u251c\u2500\u2500 04 \u2502 \u251c\u2500\u2500 advanced \u2502 \u251c\u2500\u2500 contributing . html \u2502 \u251c\u2500\u2500 features \u2502 \u251c\u2500\u2500 guide \u2502 \u251c\u2500\u2500 images \u2502 \u251c\u2500\u2500 intro . html \u2502 \u2514\u2500\u2500 test_pages \u251c\u2500\u2500 _config . yml \u251c\u2500\u2500 _data \u2502 \u2514\u2500\u2500 toc . yml \u251c\u2500\u2500 _includes \u2502 \u251c\u2500\u2500 buttons \u2502 \u251c\u2500\u2500 buttons . html \u2502 \u251c\u2500\u2500 css_entry . scss \u2502 \u251c\u2500\u2500 fb_tags . html \u2502 \u251c\u2500\u2500 footer . html \u2502 \u251c\u2500\u2500 google_analytics . html \u2502 \u251c\u2500\u2500 head . html \u2502 \u251c\u2500\u2500 js \u2502 \u251c\u2500\u2500 mathjax . html \u2502 \u251c\u2500\u2500 metadata . json \u2502 \u251c\u2500\u2500 page - nav . html \u2502 \u251c\u2500\u2500 search \u2502 \u251c\u2500\u2500 sidebar . html \u2502 \u2514\u2500\u2500 topbar . html \u251c\u2500\u2500 _layouts \u2502 \u2514\u2500\u2500 default . html \u251c\u2500\u2500 _sass \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 hamburgers \u2502 \u251c\u2500\u2500 main . scss \u2502 \u251c\u2500\u2500 objects \u2502 \u2514\u2500\u2500 page \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 css \u2502 \u251c\u2500\u2500 custom \u2502 \u251c\u2500\u2500 html \u2502 \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 js \u251c\u2500\u2500 content \u2502 \u251c\u2500\u2500 01 \u2502 \u251c\u2500\u2500 02 \u2502 \u251c\u2500\u2500 03 \u2502 \u251c\u2500\u2500 04 \u2502 \u251c\u2500\u2500 LICENSE . md \u2502 \u251c\u2500\u2500 advanced \u2502 \u251c\u2500\u2500 beta \u2502 \u251c\u2500\u2500 contributing . md \u2502 \u251c\u2500\u2500 features \u2502 \u251c\u2500\u2500 guide \u2502 \u251c\u2500\u2500 images \u2502 \u251c\u2500\u2500 intro . ipynb \u2502 \u2514\u2500\u2500 test_pages \u251c\u2500\u2500 requirements . txt \u251c\u2500\u2500 runtime . txt \u2514\u2500\u2500 scripts \u251c\u2500\u2500 __pycache__ \u2514\u2500\u2500 clean . py 41 directories , 28 files","title":"4.Build"},{"location":"mkdocs/markdown/","text":"Markdown Guide \u00b6 ref Emphasis \u00b6 **bold** *italics* ~~strikethrough~~ Headers \u00b6 # Big header ## Medium header ### Small header #### Tiny header Lists \u00b6 * Generic list item * Generic list item * Generic list item 1 . Numbered list item 2 . Numbered list item 3 . Numbered list item Links \u00b6 [Text to display](http://www.example.com) Quotes \u00b6 > This is a quote. > It can span multiple lines! Images \u00b6 Need to upload an image? SimpleMDE has a great interface. ![](http://www.example.com/image.jpg) Tables \u00b6 | Column 1 | Column 2 | Column 3 | | -------- | -------- | -------- | | John | Doe | Male | | Mary | Smith | Female | Or without aligning the columns... | Column 1 | Column 2 | Column 3 | | -------- | -------- | -------- | | John | Doe | Male | | Mary | Smith | Female | Displaying code \u00b6 `var example = \"hello!\";` Or spanning multiple lines... var example = \"hello!\"; alert(example);","title":"Markdown Guide"},{"location":"mkdocs/markdown/#markdown-guide","text":"ref","title":"Markdown Guide"},{"location":"mkdocs/markdown/#emphasis","text":"**bold** *italics* ~~strikethrough~~","title":"Emphasis"},{"location":"mkdocs/markdown/#headers","text":"# Big header ## Medium header ### Small header #### Tiny header","title":"Headers"},{"location":"mkdocs/markdown/#lists","text":"* Generic list item * Generic list item * Generic list item 1 . Numbered list item 2 . Numbered list item 3 . Numbered list item","title":"Lists"},{"location":"mkdocs/markdown/#links","text":"[Text to display](http://www.example.com)","title":"Links"},{"location":"mkdocs/markdown/#quotes","text":"> This is a quote. > It can span multiple lines!","title":"Quotes"},{"location":"mkdocs/markdown/#images","text":"Need to upload an image? SimpleMDE has a great interface. ![](http://www.example.com/image.jpg)","title":"Images"},{"location":"mkdocs/markdown/#tables","text":"| Column 1 | Column 2 | Column 3 | | -------- | -------- | -------- | | John | Doe | Male | | Mary | Smith | Female | Or without aligning the columns... | Column 1 | Column 2 | Column 3 | | -------- | -------- | -------- | | John | Doe | Male | | Mary | Smith | Female |","title":"Tables"},{"location":"mkdocs/markdown/#displaying-code","text":"`var example = \"hello!\";` Or spanning multiple lines... var example = \"hello!\"; alert(example);","title":"Displaying code"},{"location":"mkdocs/mkdocs/","text":"MkDocs \u00b6 Project documentation with Markdown. Overview \u00b6 MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Start by reading the introduction below, then check the User Guide for more info. Host anywhere MkDocs builds completely static HTML sites that you can host on GitHub pages, Amazon S3, or anywhere else you choose. Great themes available There's a stack of good looking themes available for MkDocs. Choose between the built in themes: mkdocs and readthedocs, select one of the 3 rd party themes listed on the MkDocs Themes wiki page, or build your own. Preview your site as you work The built-in dev-server allows you to preview your documentation as you're writing it. It will even auto-reload and refresh your browser whenever you save your changes. Easy to customize Get your project documentation looking just the way you want it by customizing the theme and/or installing some plugins. Installation \u00b6 Install with a Package Manager If you have and use a package manager (such as apt-get, dnf, homebrew, yum, chocolatey, etc.) to install packages on your system, then you may want to search for a \"MkDocs\" package and, if a recent version is available, install it with your package manager (check your system's documentation for details). That's it, you're done! Skip down to Getting Started. If your package manager does not have a recent \"MkDocs\" package, you can still use your package manager to install \"Python\" and \"pip\". Then you can use pip to install MkDocs. Manual Installation In order to manually install MkDocs you'll need Python installed on your system, as well as the Python package manager, pip. You can check if you have these already installed from the command line: $ python --version Python 2 .7.14 $ pip --version pip 18 .1 from /usr/local/lib/python2.7/site-packages/pip ( python 2 .7 ) MkDocs supports Python versions 2.7.9+, 3.4, 3.5, 3.6, 3.7, and pypy. Installing Python Install Python by downloading an installer appropriate for your system from python.org and running it. Note If you are installing Python on Windows, be sure to check the box to have Python added to your PATH if the installer offers such an option (it's normally off by default). Add Python to PATH \u00b6 Installing pip \u00b6 If you're using a recent version of Python, the Python package manager, pip, is most likely installed by default. However, you may need to upgrade pip to the lasted version: pip install --upgrade pip If you need to install pip for the first time, download get-pip.py. Then run the following command to install it: python get-pip.py Installing MkDocs \u00b6 Install the mkdocs package using pip: pip install mkdocs You should now have the mkdocs command installed on your system. Run mkdocs --version to check that everything worked okay. $ mkdocs --version mkdocs, version 0 .15.3 Note If you would like manpages installed for MkDocs, the click-man tool can generate and install them for you. Simply run the following two commands: pip install click-man click-man --target path/to/man/pages mkdocs See the click-man documentation for an explanation of why manpages are not automatically generated and installed by pip. Note If you are using Windows, some of the above commands may not work out-of-the-box. A quick solution may be to preface every Python command with python -m like this: python -m pip install mkdocs python -m mkdocs For a more permanent solution, you may need to edit your PATH environment variable to include the Scripts directory of your Python installation. Recent versions of Python include a script to do this for you. Navigate to your Python installation directory (for example C:\\Python34), open the Tools, then Scripts folder, and run the win_add2path.py file by double clicking on it. Alternatively, you can download the script and run it (python win_add2path.py). Getting Started \u00b6 Getting started is super easy. mkdocs new my-project cd my-project Take a moment to review the initial project that has been created for you. The initial MkDocs layout There's a single configuration file named mkdocs.yml, and a folder named docs that will contain your documentation source files. Right now the docs folder just contains a single documentation page, named index.md. MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. Make sure you're in the same directory as the mkdocs.yml configuration file, and then start the server by running the mkdocs serve command: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [ I 160402 15 :50:43 server:271 ] Serving on http://127.0.0.1:8000 [ I 160402 15 :50:43 handlers:58 ] Start watching changes [ I 160402 15 :50:43 handlers:60 ] Start detecting changes Open up http://127.0.0.1:8000/ in your browser, and you'll see the default home page being displayed: The MkDocs live server The dev-server also supports auto-reloading, and will rebuild your documentation whenever anything in the configuration file, documentation directory, or theme directory changes. Open the docs/index.md document in your text editor of choice, change the initial heading to MkLorum, and save your changes. Your browser will auto-reload and you should see your updated documentation immediately. Now try editing the configuration file: mkdocs.yml. Change the site_name setting to MkLorum and save the file. site_name : MkLorum Your browser should immediately reload, and you'll see your new site name take effect. The site_name setting Adding pages \u00b6 Now add a second page to your documentation: curl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > docs/about.md As our documentation site will include some navigation headers, you may want to edit the configuration file and add some information about the order, title, and nesting of each page in the navigation header by adding a nav setting: site_name : MkLorum nav : - Home : index . md - About : about . md Save your changes and you'll now see a navigation bar with Home and About items on the left as well as Search, Previous, and Next items on the right. Screenshot Try the menu items and navigate back and forth between pages. Then click on Search. A search dialog will appear, allowing you to search for any text on any page. Notice that the search results include every occurrence of the search term on the site and links directly to the section of the page in which the search term appears. You get all of that with no effort or configuration on your part! Screenshot Theming our documentation \u00b6 Now change the configuration file to alter how the documentation is displayed by changing the theme. Edit the mkdocs.yml file and add a theme setting: site_name : MkLorum nav : - Home : index . md - About : about . md theme : readthedocs Save your changes, and you'll see the ReadTheDocs theme being used. Screenshot Changing the Favicon Icon By default, MkDocs uses the MkDocs favicon icon. To use a different icon, create an img subdirectory in your docs_dir and copy your custom favicon.ico file to that directory. MkDocs will automatically detect and use that file as your favicon icon. Building the site \u00b6 That's looking good. You're ready to deploy the first pass of your MkLorum documentation. First build the documentation: mkdocs build This will create a new directory, named site. Take a look inside the directory: $ ls site about fonts index.html license search.html css img js mkdocs sitemap.xml Notice that your source documentation has been output as two HTML files named index.html and about/index.html. You also have various other media that's been copied into the site directory as part of the documentation theme. You even have a sitemap.xml file and mkdocs/search_index.json. If you're using source code control such as git you probably don't want to check your documentation builds into the repository. Add a line containing site/ to your .gitignore file. echo \"site/\" >> .gitignore If you're using another source code control tool you'll want to check its documentation on how to ignore specific directories. After some time, files may be removed from the documentation but they will still reside in the site directory. To remove those stale files, just run mkdocs with the --clean switch. mkdocs build --clean Other Commands and Options There are various other commands and options available. For a complete list of commands, use the --help flag: mkdocs --help To view a list of options available on a given command, use the --help flag with that command. For example, to get a list of all options available for the build command run the following: mkdocs build --help Deploying \u00b6 mkdocs gh-deploy Default deploying address The documentation site that you just built only uses static files so you'll be able to host it from pretty much anywhere. GitHub project pages and Amazon S3 may be good hosting options, depending upon your needs. Upload the contents of the entire site directory to wherever you're hosting your website from and you're done. For specific instructions on a number of common hosts, see the Deploying your Docs page. Getting help To get help with MkDocs, please use the discussion group, GitHub issues or the MkDocs IRC channel #mkdocs on freenode.","title":"MkDocs"},{"location":"mkdocs/mkdocs/#mkdocs","text":"Project documentation with Markdown.","title":"MkDocs"},{"location":"mkdocs/mkdocs/#overview","text":"MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Start by reading the introduction below, then check the User Guide for more info. Host anywhere MkDocs builds completely static HTML sites that you can host on GitHub pages, Amazon S3, or anywhere else you choose. Great themes available There's a stack of good looking themes available for MkDocs. Choose between the built in themes: mkdocs and readthedocs, select one of the 3 rd party themes listed on the MkDocs Themes wiki page, or build your own. Preview your site as you work The built-in dev-server allows you to preview your documentation as you're writing it. It will even auto-reload and refresh your browser whenever you save your changes. Easy to customize Get your project documentation looking just the way you want it by customizing the theme and/or installing some plugins.","title":"Overview"},{"location":"mkdocs/mkdocs/#installation","text":"Install with a Package Manager If you have and use a package manager (such as apt-get, dnf, homebrew, yum, chocolatey, etc.) to install packages on your system, then you may want to search for a \"MkDocs\" package and, if a recent version is available, install it with your package manager (check your system's documentation for details). That's it, you're done! Skip down to Getting Started. If your package manager does not have a recent \"MkDocs\" package, you can still use your package manager to install \"Python\" and \"pip\". Then you can use pip to install MkDocs. Manual Installation In order to manually install MkDocs you'll need Python installed on your system, as well as the Python package manager, pip. You can check if you have these already installed from the command line: $ python --version Python 2 .7.14 $ pip --version pip 18 .1 from /usr/local/lib/python2.7/site-packages/pip ( python 2 .7 ) MkDocs supports Python versions 2.7.9+, 3.4, 3.5, 3.6, 3.7, and pypy. Installing Python Install Python by downloading an installer appropriate for your system from python.org and running it. Note If you are installing Python on Windows, be sure to check the box to have Python added to your PATH if the installer offers such an option (it's normally off by default).","title":"Installation"},{"location":"mkdocs/mkdocs/#add-python-to-path","text":"","title":"Add Python to PATH"},{"location":"mkdocs/mkdocs/#installing-pip","text":"If you're using a recent version of Python, the Python package manager, pip, is most likely installed by default. However, you may need to upgrade pip to the lasted version: pip install --upgrade pip If you need to install pip for the first time, download get-pip.py. Then run the following command to install it: python get-pip.py","title":"Installing pip"},{"location":"mkdocs/mkdocs/#installing-mkdocs","text":"Install the mkdocs package using pip: pip install mkdocs You should now have the mkdocs command installed on your system. Run mkdocs --version to check that everything worked okay. $ mkdocs --version mkdocs, version 0 .15.3 Note If you would like manpages installed for MkDocs, the click-man tool can generate and install them for you. Simply run the following two commands: pip install click-man click-man --target path/to/man/pages mkdocs See the click-man documentation for an explanation of why manpages are not automatically generated and installed by pip. Note If you are using Windows, some of the above commands may not work out-of-the-box. A quick solution may be to preface every Python command with python -m like this: python -m pip install mkdocs python -m mkdocs For a more permanent solution, you may need to edit your PATH environment variable to include the Scripts directory of your Python installation. Recent versions of Python include a script to do this for you. Navigate to your Python installation directory (for example C:\\Python34), open the Tools, then Scripts folder, and run the win_add2path.py file by double clicking on it. Alternatively, you can download the script and run it (python win_add2path.py).","title":"Installing MkDocs"},{"location":"mkdocs/mkdocs/#getting-started","text":"Getting started is super easy. mkdocs new my-project cd my-project Take a moment to review the initial project that has been created for you. The initial MkDocs layout There's a single configuration file named mkdocs.yml, and a folder named docs that will contain your documentation source files. Right now the docs folder just contains a single documentation page, named index.md. MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. Make sure you're in the same directory as the mkdocs.yml configuration file, and then start the server by running the mkdocs serve command: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [ I 160402 15 :50:43 server:271 ] Serving on http://127.0.0.1:8000 [ I 160402 15 :50:43 handlers:58 ] Start watching changes [ I 160402 15 :50:43 handlers:60 ] Start detecting changes Open up http://127.0.0.1:8000/ in your browser, and you'll see the default home page being displayed: The MkDocs live server The dev-server also supports auto-reloading, and will rebuild your documentation whenever anything in the configuration file, documentation directory, or theme directory changes. Open the docs/index.md document in your text editor of choice, change the initial heading to MkLorum, and save your changes. Your browser will auto-reload and you should see your updated documentation immediately. Now try editing the configuration file: mkdocs.yml. Change the site_name setting to MkLorum and save the file. site_name : MkLorum Your browser should immediately reload, and you'll see your new site name take effect. The site_name setting","title":"Getting Started"},{"location":"mkdocs/mkdocs/#adding-pages","text":"Now add a second page to your documentation: curl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > docs/about.md As our documentation site will include some navigation headers, you may want to edit the configuration file and add some information about the order, title, and nesting of each page in the navigation header by adding a nav setting: site_name : MkLorum nav : - Home : index . md - About : about . md Save your changes and you'll now see a navigation bar with Home and About items on the left as well as Search, Previous, and Next items on the right. Screenshot Try the menu items and navigate back and forth between pages. Then click on Search. A search dialog will appear, allowing you to search for any text on any page. Notice that the search results include every occurrence of the search term on the site and links directly to the section of the page in which the search term appears. You get all of that with no effort or configuration on your part! Screenshot","title":"Adding pages"},{"location":"mkdocs/mkdocs/#theming-our-documentation","text":"Now change the configuration file to alter how the documentation is displayed by changing the theme. Edit the mkdocs.yml file and add a theme setting: site_name : MkLorum nav : - Home : index . md - About : about . md theme : readthedocs Save your changes, and you'll see the ReadTheDocs theme being used. Screenshot Changing the Favicon Icon By default, MkDocs uses the MkDocs favicon icon. To use a different icon, create an img subdirectory in your docs_dir and copy your custom favicon.ico file to that directory. MkDocs will automatically detect and use that file as your favicon icon.","title":"Theming our documentation"},{"location":"mkdocs/mkdocs/#building-the-site","text":"That's looking good. You're ready to deploy the first pass of your MkLorum documentation. First build the documentation: mkdocs build This will create a new directory, named site. Take a look inside the directory: $ ls site about fonts index.html license search.html css img js mkdocs sitemap.xml Notice that your source documentation has been output as two HTML files named index.html and about/index.html. You also have various other media that's been copied into the site directory as part of the documentation theme. You even have a sitemap.xml file and mkdocs/search_index.json. If you're using source code control such as git you probably don't want to check your documentation builds into the repository. Add a line containing site/ to your .gitignore file. echo \"site/\" >> .gitignore If you're using another source code control tool you'll want to check its documentation on how to ignore specific directories. After some time, files may be removed from the documentation but they will still reside in the site directory. To remove those stale files, just run mkdocs with the --clean switch. mkdocs build --clean Other Commands and Options There are various other commands and options available. For a complete list of commands, use the --help flag: mkdocs --help To view a list of options available on a given command, use the --help flag with that command. For example, to get a list of all options available for the build command run the following: mkdocs build --help","title":"Building the site"},{"location":"mkdocs/mkdocs/#deploying","text":"mkdocs gh-deploy Default deploying address The documentation site that you just built only uses static files so you'll be able to host it from pretty much anywhere. GitHub project pages and Amazon S3 may be good hosting options, depending upon your needs. Upload the contents of the entire site directory to wherever you're hosting your website from and you're done. For specific instructions on a number of common hosts, see the Deploying your Docs page. Getting help To get help with MkDocs, please use the discussion group, GitHub issues or the MkDocs IRC channel #mkdocs on freenode.","title":"Deploying"},{"location":"nat/frp/","text":"frp \u00b6 Source on github zt-bd-yun config 1.frps \u00b6 frps.ini 1.0.simple conf \u00b6 [common] bind_port = 7000 1.1.complex conf \u00b6 [common] vhost_http_port = 8080 dashboard_addr = 0.0.0.0 bind_udp_port = 7001 max_pool_count = 5 dashboard_user = admin heartbeat_timeout = 90 bind_addr = 0.0.0.0 subdomain_host = @.new-realm.cn vhost_http_timeout = 60 disable_log_color = false proxy_bind_addr = 0.0.0.0 dashboard_port = 7500 token = dick206530 max_ports_per_client = 0 vhost_https_port = 443 log_max_days = 3 bind_port = 7000 dashboard_pwd = admin kcp_bind_port = 7000 log_level = info tcp_mux = true log_file = /www/server/panel/plugin/btp_frps/temp/frps.log 2.frpc \u00b6 frpc.ini 2.0.simple conf \u00b6 [common] server_addr = 106.13.213.177 server_port = 7000 token = dick206530 # Same as the 'kcp_bind_port' in frps.ini # start kcp in client # protocol = kcp [ssh] type = tcp local_ip = 127.0.0.1 local_port = 22 remote_port = 6000 2.1.complex conf \u00b6 # [common] is integral section [ common ] # A literal address or host name for IPv6 must be enclosed # in square brackets, as in \"[::1]:80\", \"[ipv6-host]:http\" or \"[ipv6-host%zone]:80\" # server_addr = 0.0.0.0 server_addr = 106.13.213.177 server_port = 7000 # if you want to connect frps by http proxy or socks5 proxy, you can set http_proxy here or in global environment variables # it only works when protocol is tcp # http_proxy = http: //user:passwd@127.0.0.1:8080 # http_proxy = socks5: //user:passwd@127.0.0.1:1080 # http_proxy = http: //dick7:dick206530@127.0.0.1:8080 # http_proxy = socks5: //dick7:dick206530@127.0.0.1:1080 # console or real logFile path like ./frpc.log # log_file = ./frpc.log # trace, debug, info, warn, error log_level = info log_max_days = 3 # disable log colors when log_file is console, default is false disable_log_color = false # for authentication token = dick206530 # set admin address for control frpc's action by http api such as reload admin_addr = 127.0.0.1 admin_port = 7500 admin_user = admin admin_pwd = admin # Admin assets directory. By default, these assets are bundled with frpc. # assets_dir = ./static # connections will be established in advance, default value is zero pool_count = 5 # if tcp stream multiplexing is used, default is true, it must be same with frps tcp_mux = true # your proxy name will be changed to {user}.{proxy} # user = user_name user = dick7 # decide if exit program when first login failed, otherwise continuous relogin to frps # default is true login_fail_exit = true # communication protocol used to connect to server # now it supports tcp and kcp and websocket, default is tcp # protocol = tcp protocol = kcp # if tls_enable is true, frpc will connect frps by tls tls_enable = true # specify a dns server, so frpc will use this instead of default one dns_server = 8.8.8.8 # proxy names you want to start seperated by ',' # default is empty, means all proxies # start = ssh,dns # heartbeat configure, it's not recommended to modify the default value # the default value of heartbeat_interval is 10 and heartbeat_timeout is 90 # heartbeat_interval = 30 # heartbeat_timeout = 90 # 'ssh' is the unique proxy name # if user in [common] section is not empty, it will be changed to {user}.{proxy} such as 'your_name.ssh' [ ssh ] # tcp | udp | http | https | stcp | xtcp, default is tcp type = tcp local_ip = 127.0.0.1 local_port = 22 # limit bandwith for this proxy, unit is KB and MB bandwith_limit = 1 MB # true or false, if true, messages between frps and frpc will be encrypted, default is false use_encryption = false # if true, message will be compressed use_compression = false # remote port listen by frps remote_port = 6001 # frps will load balancing connections for proxies in same group group = test_group # group should have same group key group_key = 123456 # enable health check for the backend service, it support 'tcp' and 'http' now # frpc will connect local service's port to detect it's healthy status health_check_type = tcp # health check connection timeout health_check_timeout_s = 3 # if continuous failed in 3 times, the proxy will be removed from frps health_check_max_failed = 3 # every 10 seconds will do a health check health_check_interval_s = 10 [ ssh_random ] type = tcp local_ip = 127.0.0.1 local_port = 22 # if remote_port is 0, frps will assign a random port for you remote_port = 0 # if you want to expose multiple ports, add 'range:' prefix to the section name # frpc will generate multiple proxies such as 'tcp_port_6010', 'tcp_port_6011' and so on. [ range : tcp_port ] type = tcp local_ip = 127.0.0.1 local_port = 6010 - 6020 , 6022 , 6024 - 6028 remote_port = 6010 - 6020 , 6022 , 6024 - 6028 use_encryption = false use_compression = false [ dns ] type = udp # local_ip = 114.114.114.114 local_ip = 1.1.1.1 local_port = 53 remote_port = 6002 use_encryption = false use_compression = false [ range : udp_port ] type = udp local_ip = 127.0.0.1 local_port = 6010 - 6020 remote_port = 6010 - 6020 use_encryption = false use_compression = false # Resolve your domain names to [server_addr] so you can use http: //web01.yourdomain.com to browse web01 and http://web02.yourdomain.com to browse web02 [ web01 - www ] type = http local_ip = 127.0.0.1 local_port = 8080 use_encryption = false use_compression = true # http username and password are safety certification for http protocol # if not set, you can access this custom_domains without certification # http_user = admin # http_pwd = admin # if domain for frps is frps.com, then you can access [web01] proxy by URL http: //test.frps.com subdomain = www # custom_domains = www.new-realm.cn # locations is only available for http type locations = / , / pic # host_header_rewrite = example.com host_header_rewrite = ztloadfield . com # params with prefix \"header_\" will be used to update http request headers header_X - From - Where = frp # health_check_type = http # frpc will send a GET http request '/status' to local http service # http service is alive when it return 2xx http response code health_check_url = / status health_check_interval_s = 10 health_check_max_failed = 3 health_check_timeout_s = 3 [ web02 - dev ] type = https local_ip = 127.0.0.1 local_port = 8000 use_encryption = false use_compression = true subdomain = dev # custom_domains = dev.new-realm.cn # if not empty, frpc will use proxy protocol to transfer connection info to your local service # v1 or v2 or empty proxy_protocol_version = v2 [ plugin_unix_domain_socket ] type = tcp remote_port = 6003 # if plugin is defined, local_ip and local_port is useless # plugin will handle connections got from frps plugin = unix_domain_socket # params with prefix \"plugin_\" that plugin needed plugin_unix_path = / var / run / docker . sock [ plugin_http_proxy ] type = tcp remote_port = 6004 plugin = http_proxy plugin_http_user = dick7 plugin_http_passwd = dick206530 [ plugin_socks5 ] type = tcp remote_port = 6005 plugin = socks5 plugin_user = dick7 plugin_passwd = dick206530 [ plugin_static_file ] type = tcp remote_port = 6006 plugin = static_file plugin_local_path = / var / www / blog plugin_strip_prefix = static plugin_http_user = dick7 plugin_http_passwd = dick206530 # [plugin_https2http] # type = https # subdomain = ai # # custom_domains = ai.new-realm.cn # plugin = https2http # plugin_local_addr = 127.0.0.1:80 # plugin_crt_path = ./server.crt # plugin_key_path = ./server.key # plugin_host_header_rewrite = 127.0.0.1 # plugin_header_X-From-Where = frp [ plugin_http2https ] type = http subdomain = ai # custom_domains = ai.new-realm.cn plugin = http2https plugin_local_addr = 127.0.0.1 : 443 plugin_host_header_rewrite = 127.0.0.1 plugin_header_X - From - Where = frp [ secret_tcp ] # If the type is secret tcp, remote_port is useless # Who want to connect local port should deploy another frpc with stcp proxy and role is visitor type = stcp # sk used for authentication for visitors sk = abcdefg local_ip = 127.0.0.1 local_port = 22 use_encryption = false use_compression = false # user of frpc should be same in both stcp server and stcp visitor [ secret_tcp_visitor ] # frpc role visitor -> frps -> frpc role server role = visitor type = stcp # the server name you want to visitor server_name = secret_tcp sk = abcdefg # connect this address to visitor stcp server bind_addr = 127.0.0.1 bind_port = 9000 use_encryption = false use_compression = false [ p2p_tcp ] type = xtcp sk = abcdefg local_ip = 127.0.0.1 local_port = 22 use_encryption = false use_compression = false [ p2p_tcp_visitor ] role = visitor type = xtcp server_name = p2p_tcp sk = abcdefg bind_addr = 127.0.0.1 bind_port = 9001 use_encryption = false use_compression = false","title":"frp"},{"location":"nat/frp/#frp","text":"Source on github zt-bd-yun config","title":"frp"},{"location":"nat/frp/#1frps","text":"frps.ini","title":"1.frps"},{"location":"nat/frp/#10simple-conf","text":"[common] bind_port = 7000","title":"1.0.simple conf"},{"location":"nat/frp/#11complex-conf","text":"[common] vhost_http_port = 8080 dashboard_addr = 0.0.0.0 bind_udp_port = 7001 max_pool_count = 5 dashboard_user = admin heartbeat_timeout = 90 bind_addr = 0.0.0.0 subdomain_host = @.new-realm.cn vhost_http_timeout = 60 disable_log_color = false proxy_bind_addr = 0.0.0.0 dashboard_port = 7500 token = dick206530 max_ports_per_client = 0 vhost_https_port = 443 log_max_days = 3 bind_port = 7000 dashboard_pwd = admin kcp_bind_port = 7000 log_level = info tcp_mux = true log_file = /www/server/panel/plugin/btp_frps/temp/frps.log","title":"1.1.complex conf"},{"location":"nat/frp/#2frpc","text":"frpc.ini","title":"2.frpc"},{"location":"nat/frp/#20simple-conf","text":"[common] server_addr = 106.13.213.177 server_port = 7000 token = dick206530 # Same as the 'kcp_bind_port' in frps.ini # start kcp in client # protocol = kcp [ssh] type = tcp local_ip = 127.0.0.1 local_port = 22 remote_port = 6000","title":"2.0.simple conf"},{"location":"nat/frp/#21complex-conf","text":"# [common] is integral section [ common ] # A literal address or host name for IPv6 must be enclosed # in square brackets, as in \"[::1]:80\", \"[ipv6-host]:http\" or \"[ipv6-host%zone]:80\" # server_addr = 0.0.0.0 server_addr = 106.13.213.177 server_port = 7000 # if you want to connect frps by http proxy or socks5 proxy, you can set http_proxy here or in global environment variables # it only works when protocol is tcp # http_proxy = http: //user:passwd@127.0.0.1:8080 # http_proxy = socks5: //user:passwd@127.0.0.1:1080 # http_proxy = http: //dick7:dick206530@127.0.0.1:8080 # http_proxy = socks5: //dick7:dick206530@127.0.0.1:1080 # console or real logFile path like ./frpc.log # log_file = ./frpc.log # trace, debug, info, warn, error log_level = info log_max_days = 3 # disable log colors when log_file is console, default is false disable_log_color = false # for authentication token = dick206530 # set admin address for control frpc's action by http api such as reload admin_addr = 127.0.0.1 admin_port = 7500 admin_user = admin admin_pwd = admin # Admin assets directory. By default, these assets are bundled with frpc. # assets_dir = ./static # connections will be established in advance, default value is zero pool_count = 5 # if tcp stream multiplexing is used, default is true, it must be same with frps tcp_mux = true # your proxy name will be changed to {user}.{proxy} # user = user_name user = dick7 # decide if exit program when first login failed, otherwise continuous relogin to frps # default is true login_fail_exit = true # communication protocol used to connect to server # now it supports tcp and kcp and websocket, default is tcp # protocol = tcp protocol = kcp # if tls_enable is true, frpc will connect frps by tls tls_enable = true # specify a dns server, so frpc will use this instead of default one dns_server = 8.8.8.8 # proxy names you want to start seperated by ',' # default is empty, means all proxies # start = ssh,dns # heartbeat configure, it's not recommended to modify the default value # the default value of heartbeat_interval is 10 and heartbeat_timeout is 90 # heartbeat_interval = 30 # heartbeat_timeout = 90 # 'ssh' is the unique proxy name # if user in [common] section is not empty, it will be changed to {user}.{proxy} such as 'your_name.ssh' [ ssh ] # tcp | udp | http | https | stcp | xtcp, default is tcp type = tcp local_ip = 127.0.0.1 local_port = 22 # limit bandwith for this proxy, unit is KB and MB bandwith_limit = 1 MB # true or false, if true, messages between frps and frpc will be encrypted, default is false use_encryption = false # if true, message will be compressed use_compression = false # remote port listen by frps remote_port = 6001 # frps will load balancing connections for proxies in same group group = test_group # group should have same group key group_key = 123456 # enable health check for the backend service, it support 'tcp' and 'http' now # frpc will connect local service's port to detect it's healthy status health_check_type = tcp # health check connection timeout health_check_timeout_s = 3 # if continuous failed in 3 times, the proxy will be removed from frps health_check_max_failed = 3 # every 10 seconds will do a health check health_check_interval_s = 10 [ ssh_random ] type = tcp local_ip = 127.0.0.1 local_port = 22 # if remote_port is 0, frps will assign a random port for you remote_port = 0 # if you want to expose multiple ports, add 'range:' prefix to the section name # frpc will generate multiple proxies such as 'tcp_port_6010', 'tcp_port_6011' and so on. [ range : tcp_port ] type = tcp local_ip = 127.0.0.1 local_port = 6010 - 6020 , 6022 , 6024 - 6028 remote_port = 6010 - 6020 , 6022 , 6024 - 6028 use_encryption = false use_compression = false [ dns ] type = udp # local_ip = 114.114.114.114 local_ip = 1.1.1.1 local_port = 53 remote_port = 6002 use_encryption = false use_compression = false [ range : udp_port ] type = udp local_ip = 127.0.0.1 local_port = 6010 - 6020 remote_port = 6010 - 6020 use_encryption = false use_compression = false # Resolve your domain names to [server_addr] so you can use http: //web01.yourdomain.com to browse web01 and http://web02.yourdomain.com to browse web02 [ web01 - www ] type = http local_ip = 127.0.0.1 local_port = 8080 use_encryption = false use_compression = true # http username and password are safety certification for http protocol # if not set, you can access this custom_domains without certification # http_user = admin # http_pwd = admin # if domain for frps is frps.com, then you can access [web01] proxy by URL http: //test.frps.com subdomain = www # custom_domains = www.new-realm.cn # locations is only available for http type locations = / , / pic # host_header_rewrite = example.com host_header_rewrite = ztloadfield . com # params with prefix \"header_\" will be used to update http request headers header_X - From - Where = frp # health_check_type = http # frpc will send a GET http request '/status' to local http service # http service is alive when it return 2xx http response code health_check_url = / status health_check_interval_s = 10 health_check_max_failed = 3 health_check_timeout_s = 3 [ web02 - dev ] type = https local_ip = 127.0.0.1 local_port = 8000 use_encryption = false use_compression = true subdomain = dev # custom_domains = dev.new-realm.cn # if not empty, frpc will use proxy protocol to transfer connection info to your local service # v1 or v2 or empty proxy_protocol_version = v2 [ plugin_unix_domain_socket ] type = tcp remote_port = 6003 # if plugin is defined, local_ip and local_port is useless # plugin will handle connections got from frps plugin = unix_domain_socket # params with prefix \"plugin_\" that plugin needed plugin_unix_path = / var / run / docker . sock [ plugin_http_proxy ] type = tcp remote_port = 6004 plugin = http_proxy plugin_http_user = dick7 plugin_http_passwd = dick206530 [ plugin_socks5 ] type = tcp remote_port = 6005 plugin = socks5 plugin_user = dick7 plugin_passwd = dick206530 [ plugin_static_file ] type = tcp remote_port = 6006 plugin = static_file plugin_local_path = / var / www / blog plugin_strip_prefix = static plugin_http_user = dick7 plugin_http_passwd = dick206530 # [plugin_https2http] # type = https # subdomain = ai # # custom_domains = ai.new-realm.cn # plugin = https2http # plugin_local_addr = 127.0.0.1:80 # plugin_crt_path = ./server.crt # plugin_key_path = ./server.key # plugin_host_header_rewrite = 127.0.0.1 # plugin_header_X-From-Where = frp [ plugin_http2https ] type = http subdomain = ai # custom_domains = ai.new-realm.cn plugin = http2https plugin_local_addr = 127.0.0.1 : 443 plugin_host_header_rewrite = 127.0.0.1 plugin_header_X - From - Where = frp [ secret_tcp ] # If the type is secret tcp, remote_port is useless # Who want to connect local port should deploy another frpc with stcp proxy and role is visitor type = stcp # sk used for authentication for visitors sk = abcdefg local_ip = 127.0.0.1 local_port = 22 use_encryption = false use_compression = false # user of frpc should be same in both stcp server and stcp visitor [ secret_tcp_visitor ] # frpc role visitor -> frps -> frpc role server role = visitor type = stcp # the server name you want to visitor server_name = secret_tcp sk = abcdefg # connect this address to visitor stcp server bind_addr = 127.0.0.1 bind_port = 9000 use_encryption = false use_compression = false [ p2p_tcp ] type = xtcp sk = abcdefg local_ip = 127.0.0.1 local_port = 22 use_encryption = false use_compression = false [ p2p_tcp_visitor ] role = visitor type = xtcp server_name = p2p_tcp sk = abcdefg bind_addr = 127.0.0.1 bind_port = 9001 use_encryption = false use_compression = false","title":"2.1.complex conf"},{"location":"nat/openwrt/","text":"OpenWrt \u00b6","title":"OpenWrt"},{"location":"nat/openwrt/#openwrt","text":"","title":"OpenWrt"},{"location":"nat/zerotieone/","text":"ZeroTieOne \u00b6","title":"ZeroTieOne"},{"location":"nat/zerotieone/#zerotieone","text":"","title":"ZeroTieOne"},{"location":"program-languages/C/","text":"C \u00b6 C programe language #include <stdio.h> int main (){ printf ( \"Hello,world! \\n \" ); return 0 ; }","title":"C"},{"location":"program-languages/C/#c","text":"C programe language #include <stdio.h> int main (){ printf ( \"Hello,world! \\n \" ); return 0 ; }","title":"C"},{"location":"program-languages/F/","text":"Fortran \u00b6","title":"F"},{"location":"program-languages/F/#fortran","text":"","title":"Fortran"},{"location":"program-languages/Java/","text":"Java \u00b6","title":"J"},{"location":"program-languages/Java/#java","text":"","title":"Java"},{"location":"python/django/","text":"Django \u00b6","title":"Django"},{"location":"python/django/#django","text":"","title":"Django"},{"location":"python/flask/","text":"Flask \u00b6 Welcome to Flask\u2019s documentation. Get started with Installation and then get an overview with the Quickstart. There is also a more detailed Tutorial that shows how to create a small but complete application with Flask. Common patterns are described in the Patterns for Flask section. The rest of the docs describe each component of Flask in detail, with a full reference in the API section. Flask depends on the Jinja template engine and the Werkzeug WSGI toolkit. The documentation for these libraries can be found at: Jinja documentation Werkzeug documentation User\u2019s Guide This part of the documentation, which is mostly prose, begins with some background information about Flask, then focuses on step-by-step instructions for web development with Flask. Foreword Read this before you get started with Flask. This hopefully answers some questions about the purpose and goals of the project, and when you should or should not be using it. What does \u201cmicro\u201d mean? \u201cMicro\u201d does not mean that your whole web application has to fit into a single Python file (although it certainly can), nor does it mean that Flask is lacking in functionality. The \u201cmicro\u201d in microframework means Flask aims to keep the core simple but extensible. Flask won\u2019t make many decisions for you, such as what database to use. Those decisions that it does make, such as what templating engine to use, are easy to change. Everything else is up to you, so that Flask can be everything you need and nothing you don\u2019t. By default, Flask does not include a database abstraction layer, form validation or anything else where different libraries already exist that can handle that. Instead, Flask supports extensions to add such functionality to your application as if it was implemented in Flask itself. Numerous extensions provide database integration, form validation, upload handling, various open authentication technologies, and more. Flask may be \u201cmicro\u201d, but it\u2019s ready for production use on a variety of needs. Configuration and Conventions Flask has many configuration values, with sensible defaults, and a few conventions when getting started. By convention, templates and static files are stored in subdirectories within the application\u2019s Python source tree, with the names templates and static respectively. While this can be changed, you usually don\u2019t have to, especially when getting started. Growing with Flask Once you have Flask up and running, you\u2019ll find a variety of extensions available in the community to integrate your project for production. As your codebase grows, you are free to make the design decisions appropriate for your project. Flask will continue to provide a very simple glue layer to the best that Python has to offer. You can implement advanced patterns in SQLAlchemy or another database tool, introduce non-relational data persistence as appropriate, and take advantage of framework-agnostic tools built for WSGI, the Python web interface. Flask includes many hooks to customize its behavior. Should you need more customization, the Flask class is built for subclassing. If you are interested in that, check out the Becoming Big chapter. If you are curious about the Flask design principles, head over to the section about Design Decisions in Flask. Continue to Installation, the Quickstart, or the Foreword for Experienced Programmers. Foreword for Experienced Programmers Thread-Locals in Flask One of the design decisions in Flask was that simple tasks should be simple; they should not take a lot of code and yet they should not limit you. Because of that, Flask has a few design choices that some people might find surprising or unorthodox. For example, Flask uses thread-local objects internally so that you don\u2019t have to pass objects around from function to function within a request in order to stay threadsafe. This approach is convenient, but requires a valid request context for dependency injection or when attempting to reuse code which uses a value pegged to the request. The Flask project is honest about thread-locals, does not hide them, and calls out in the code and documentation where they are used. Develop for the Web with Caution Always keep security in mind when building web applications. If you write a web application, you are probably allowing users to register and leave their data on your server. The users are entrusting you with data. And even if you are the only user that might leave data in your application, you still want that data to be stored securely. Unfortunately, there are many ways the security of a web application can be compromised. Flask protects you against one of the most common security problems of modern web applications: cross-site scripting (XSS). Unless you deliberately mark insecure HTML as secure, Flask and the underlying Jinja2 template engine have you covered. But there are many more ways to cause security problems. The documentation will warn you about aspects of web development that require attention to security. Some of these security concerns are far more complex than one might think, and we all sometimes underestimate the likelihood that a vulnerability will be exploited - until a clever attacker figures out a way to exploit our applications. And don\u2019t think that your application is not important enough to attract an attacker. Depending on the kind of attack, chances are that automated bots are probing for ways to fill your database with spam, links to malicious software, and the like. Flask is no different from any other framework in that you the developer must build with caution, watching for exploits when building to your requirements. Installation Python Version We recommend using the latest version of Python 3. Flask supports Python 3.5 and newer, Python 2.7, and PyPy. Dependencies These distributions will be installed automatically when installing Flask. Werkzeug implements WSGI , the standard Python interface between applications and servers . Jinja is a template language that renders the pages your application serves . MarkupSafe comes with Jinja . It escapes untrusted input when rendering templates to avoid injection attacks . ItsDangerous securely signs data to ensure its integrity . This is used to protect Flask \u2019 s session cookie . Click is a framework for writing command line applications . It provides the flask command and allows adding custom management commands . Optional dependencies These distributions will not be installed automatically. Flask will detect and use them if you install them. Blinker provides support for Signals . SimpleJSON is a fast JSON implementation that is compatible with Python \u2019 s json module . It is preferred for JSON operations if it is installed . python - dotenv enables support for Environment Variables From dotenv when running flask commands . Watchdog provides a faster , more efficient reloader for the development server . Virtual environments Use a virtual environment to manage the dependencies for your project, both in development and in production. What problem does a virtual environment solve? The more Python projects you have, the more likely it is that you need to work with different versions of Python libraries, or even Python itself. Newer versions of libraries for one project can break compatibility in another project. Virtual environments are independent groups of Python libraries, one for each project. Packages installed for one project will not affect other projects or the operating system\u2019s packages. Python 3 comes bundled with the venv module to create virtual environments. If you\u2019re using a modern version of Python, you can continue on to the next section. If you\u2019re using Python 2, see Install virtualenv first. Create an environment Create a project folder and a venv folder within: $ mkdir myproject $ cd myproject $ python3 -m venv venv On Windows: $ py -3 -m venv venv If you needed to install virtualenv because you are using Python 2, use the following command instead: $ python2 -m virtualenv venv On Windows: \\Python27\\Scripts\\virtualenv.exe venv Activate the environment Before you work on your project, activate the corresponding environment: $ . venv/bin/activate On Windows: venv\\Scripts\\activate Your shell prompt will change to show the name of the activated environment. Install Flask Within the activated environment, use the following command to install Flask: $ pip install Flask Flask is now installed. Check out the Quickstart or go to the Documentation Overview. Living on the edge If you want to work with the latest Flask code before it\u2019s released, install or update the code from the master branch: $ pip install -U https://github.com/pallets/flask/archive/master.tar.gz Install virtualenv If you are using Python 2, the venv module is not available. Instead, install virtualenv. On Linux, virtualenv is provided by your package manager: Debian, Ubuntu \u00b6 $ sudo apt-get install python-virtualenv CentOS, Fedora \u00b6 $ sudo yum install python-virtualenv Arch \u00b6 $ sudo pacman -S python-virtualenv If you are on Mac OS X or Windows, download get-pip.py, then: $ sudo python2 Downloads/get-pip.py $ sudo python2 -m pip install virtualenv On Windows, as an administrator: \\Python27\\python.exe Downloads\\get-pip.py \\Python27\\python.exe -m pip install virtualenv Now you can return above and Create an environment. Quickstart Eager to get started? This page gives a good introduction to Flask. Follow Installation to set up a project and install Flask first. A Minimal Application A minimal Flask application looks something like this: from flask import Flask from markupsafe import escape app = Flask( name ) @app.route(\"/\") def hello_world(): return f\" Hello, {escape(name)}! \" So what did that code do? First we imported the Flask class . An instance of this class will be our WSGI application . Next we create an instance of this class . The first argument is the name of the application \u2019 s module or package . __name__ is a convenient shortcut for this that is appropriate for most cases . This is needed so that Flask knows where to look for resources such as templates and static files . We then use the route () decorator to tell Flask what URL should trigger our function . The function returns the message we want to display in the user \u2019 s browser . The default content type is HTML , so HTML in the string will be rendered by the browser . Note HTML escaping When returning HTML (the default response type in Flask), any user input rendered in the output must be escaped to protect from injection attacks. HTML templates in Jinja, introduced later, will do this automatically. escape(), shown above, can be used manually. It\u2019s omitted for brevity in the examples below. Save it as hello.py or something similar. Make sure to not call your application flask.py because this would conflict with Flask itself. To run the application, use the flask command or python -m flask. Before you can do that you need to tell your terminal the application to work with by exporting the FLASK_APP environment variable: $ export FLASK_APP=hello.py $ flask run * Running on http://127.0.0.1:5000/ If you are on Windows, the environment variable syntax depends on command line interpreter. On Command Prompt: C:\\path\\to\\app>set FLASK_APP=hello.py And on PowerShell: PS C:\\path\\to\\app> $env:FLASK_APP = \"hello.py\" This launches a very simple builtin server, which is good enough for testing but probably not what you want to use in production. For deployment options see Deployment Options. Now head over to http://127.0.0.1:5000/ , and you should see your hello world greeting. Externally Visible Server If you run the server you will notice that the server is only accessible from your own computer, not from any other in the network. This is the default because in debugging mode a user of the application can execute arbitrary Python code on your computer. If you have the debugger disabled or trust the users on your network, you can make the server publicly available simply by adding --host=0.0.0.0 to the command line: $ flask run --host=0.0.0.0 This tells your operating system to listen on all public IPs. What to do if the Server does not Start In case the python -m flask fails or flask does not exist, there are multiple reasons this might be the case. First of all you need to look at the error message. Old Version of Flask Versions of Flask older than 0.11 use to have different ways to start the application. In short, the flask command did not exist, and neither did python -m flask. In that case you have two options: either upgrade to newer Flask versions or have a look at Development Server to see the alternative method for running a server. Invalid Import Name The FLASK_APP environment variable is the name of the module to import at flask run. In case that module is incorrectly named you will get an import error upon start (or if debug is enabled when you navigate to the application). It will tell you what it tried to import and why it failed. The most common reason is a typo or because you did not actually create an app object. Debug Mode (Want to just log errors and stack traces? See Application Errors) The flask script is nice to start a local development server, but you would have to restart it manually after each change to your code. That is not very nice and Flask can do better. If you enable debug support the server will reload itself on code changes, and it will also provide you with a helpful debugger if things go wrong. To enable all development features (including debug mode) you can export the FLASK_ENV environment variable and set it to development before running the server: $ export FLASK_ENV=development $ flask run (On Windows you need to use set instead of export.) This does the following things: it activates the debugger it activates the automatic reloader it enables the debug mode on the Flask application . You can also control debug mode separately from the environment by exporting FLASK_DEBUG=1. There are more parameters that are explained in Development Server. Attention Even though the interactive debugger does not work in forking environments (which makes it nearly impossible to use on production servers), it still allows the execution of arbitrary code. This makes it a major security risk and therefore it must never be used on production machines. Screenshot of the debugger in action: screenshot of debugger in action More information on using the debugger can be found in the Werkzeug documentation. Have another debugger in mind? See Working with Debuggers. Routing Modern web applications use meaningful URLs to help users. Users are more likely to like a page and come back if the page uses a meaningful URL they can remember and use to directly visit a page. Use the route() decorator to bind a function to a URL. @app.route('/') def index(): return 'Index Page' @app.route('/hello') def hello(): return 'Hello, World' You can do more! You can make parts of the URL dynamic and attach multiple rules to a function. Variable Rules You can add variable sections to a URL by marking sections with . Your function then receives the as a keyword argument. Optionally, you can use a converter to specify the type of the argument like . from markupsafe import escape @app.route('/user/ ') def show_user_profile(username): # show the user profile for that user return f'User {username}' @app.route('/post/ ') def show_post(post_id): # show the post with the given id, the id is an integer return f'Post {post_id}' @app.route('/path/ ') def show_subpath(subpath): # show the subpath after /path/ return f'Subpath {subpath}' Converter types: string (default) accepts any text without a slash int accepts positive integers float accepts positive floating point values path like string but also accepts slashes uuid accepts UUID strings Unique URLs / Redirection Behavior The following two rules differ in their use of a trailing slash. @app.route('/projects/') def projects(): return 'The project page' @app.route('/about') def about(): return 'The about page' The canonical URL for the projects endpoint has a trailing slash. It\u2019s similar to a folder in a file system. If you access the URL without a trailing slash, Flask redirects you to the canonical URL with the trailing slash. The canonical URL for the about endpoint does not have a trailing slash. It\u2019s similar to the pathname of a file. Accessing the URL with a trailing slash produces a 404 \u201cNot Found\u201d error. This helps keep URLs unique for these resources, which helps search engines avoid indexing the same page twice. URL Building To build a URL to a specific function, use the url_for() function. It accepts the name of the function as its first argument and any number of keyword arguments, each corresponding to a variable part of the URL rule. Unknown variable parts are appended to the URL as query parameters. Why would you want to build URLs using the URL reversing function url_for() instead of hard-coding them into your templates? Reversing is often more descriptive than hard - coding the URLs . You can change your URLs in one go instead of needing to remember to manually change hard - coded URLs . URL building handles escaping of special characters and Unicode data transparently . The generated paths are always absolute , avoiding unexpected behavior of relative paths in browsers . If your application is placed outside the URL root , for example , in / myapplication instead of / , url_for () properly handles that for you . For example, here we use the test_request_context() method to try out url_for(). test_request_context() tells Flask to behave as though it\u2019s handling a request even while we use a Python shell. See Context Locals. from flask import url_for @app.route('/') def index(): return 'index' @app.route('/login') def login(): return 'login' @app.route('/user/ ') def profile(username): return f'{username}\\'s profile' with app.test_request_context(): print(url_for('index')) print(url_for('login')) print(url_for('login', next='/')) print(url_for('profile', username='John Doe')) / /login /login?next=/ /user/John%20Doe HTTP Methods Web applications use different HTTP methods when accessing URLs. You should familiarize yourself with the HTTP methods as you work with Flask. By default, a route only answers to GET requests. You can use the methods argument of the route() decorator to handle different HTTP methods. from flask import request @app.route('/login', methods=['GET', 'POST']) def login(): if request.method == 'POST': return do_the_login() else: return show_the_login_form() If GET is present, Flask automatically adds support for the HEAD method and handles HEAD requests according to the HTTP RFC. Likewise, OPTIONS is automatically implemented for you. Static Files Dynamic web applications also need static files. That\u2019s usually where the CSS and JavaScript files are coming from. Ideally your web server is configured to serve them for you, but during development Flask can do that as well. Just create a folder called static in your package or next to your module and it will be available at /static on the application. To generate URLs for static files, use the special 'static' endpoint name: url_for('static', filename='style.css') The file has to be stored on the filesystem as static/style.css. Rendering Templates Generating HTML from within Python is not fun, and actually pretty cumbersome because you have to do the HTML escaping on your own to keep the application secure. Because of that Flask configures the Jinja2 template engine for you automatically. To render a template you can use the render_template() method. All you have to do is provide the name of the template and the variables you want to pass to the template engine as keyword arguments. Here\u2019s a simple example of how to render a template: from flask import render_template @app.route('/hello/') @app.route('/hello/ ') def hello(name=None): return render_template('hello.html', name=name) Flask will look for templates in the templates folder. So if your application is a module, this folder is next to that module, if it\u2019s a package it\u2019s actually inside your package: Case 1: a module: /application.py /templates /hello.html Case 2: a package: /application / init .py /templates /hello.html For templates you can use the full power of Jinja2 templates. Head over to the official Jinja2 Template Documentation for more information. Here is an example template: Hello from Flask {% if name %} Hello {{ name }}! {% else %} Hello, World! {% endif %} Inside templates you also have access to the request, session and g 1 objects as well as the get_flashed_messages() function. Templates are especially useful if inheritance is used. If you want to know how that works, head over to the Template Inheritance pattern documentation. Basically template inheritance makes it possible to keep certain elements on each page (like header, navigation and footer). Automatic escaping is enabled, so if name contains HTML it will be escaped automatically. If you can trust a variable and you know that it will be safe HTML (for example because it came from a module that converts wiki markup to HTML) you can mark it as safe by using the Markup class or by using the |safe filter in the template. Head over to the Jinja 2 documentation for more examples. Here is a basic introduction to how the Markup class works: from markupsafe import Markup Markup(' Hello %s! ') % ' hacker ' Markup(u' Hello <blink>hacker</blink>! ') Markup.escape(' hacker ') Markup(u'<blink>hacker</blink>') Markup(' Marked up \u00bb HTML').striptags() u'Marked up \\xbb HTML' Changelog 1 Unsure what that g object is? It\u2019s something in which you can store information for your own needs, check the documentation of that object (g) and the Using SQLite 3 with Flask for more information. Accessing Request Data For web applications it\u2019s crucial to react to the data a client sends to the server. In Flask this information is provided by the global request object. If you have some experience with Python you might be wondering how that object can be global and how Flask manages to still be threadsafe. The answer is context locals: Context Locals Insider Information If you want to understand how that works and how you can implement tests with context locals, read this section, otherwise just skip it. Certain objects in Flask are global objects, but not of the usual kind. These objects are actually proxies to objects that are local to a specific context. What a mouthful. But that is actually quite easy to understand. Imagine the context being the handling thread. A request comes in and the web server decides to spawn a new thread (or something else, the underlying object is capable of dealing with concurrency systems other than threads). When Flask starts its internal request handling it figures out that the current thread is the active context and binds the current application and the WSGI environments to that context (thread). It does that in an intelligent way so that one application can invoke another application without breaking. So what does this mean to you? Basically you can completely ignore that this is the case unless you are doing something like unit testing. You will notice that code which depends on a request object will suddenly break because there is no request object. The solution is creating a request object yourself and binding it to the context. The easiest solution for unit testing is to use the test_request_context() context manager. In combination with the with statement it will bind a test request so that you can interact with it. Here is an example: from flask import request with app.test_request_context('/hello', method='POST'): # now you can do something with the request until the # end of the with block, such as basic assertions: assert request.path == '/hello' assert request.method == 'POST' The other possibility is passing a whole WSGI environment to the request_context() method: with app.request_context(environ): assert request.method == 'POST' The Request Object The request object is documented in the API section and we will not cover it here in detail (see Request). Here is a broad overview of some of the most common operations. First of all you have to import it from the flask module: from flask import request The current request method is available by using the method attribute. To access form data (data transmitted in a POST or PUT request) you can use the form attribute. Here is a full example of the two attributes mentioned above: @app.route('/login', methods=['POST', 'GET']) def login(): error = None if request.method == 'POST': if valid_login(request.form['username'], request.form['password']): return log_the_user_in(request.form['username']) else: error = 'Invalid username/password' # the code below is executed if the request method # was GET or the credentials were invalid return render_template('login.html', error=error) What happens if the key does not exist in the form attribute? In that case a special KeyError is raised. You can catch it like a standard KeyError but if you don\u2019t do that, a HTTP 400 Bad Request error page is shown instead. So for many situations you don\u2019t have to deal with that problem. To access parameters submitted in the URL (?key=value) you can use the args attribute: searchword = request.args.get('key', '') We recommend accessing URL parameters with get or by catching the KeyError because users might change the URL and presenting them a 400 bad request page in that case is not user friendly. For a full list of methods and attributes of the request object, head over to the Request documentation. File Uploads You can handle uploaded files with Flask easily. Just make sure not to forget to set the enctype=\"multipart/form-data\" attribute on your HTML form, otherwise the browser will not transmit your files at all. Uploaded files are stored in memory or at a temporary location on the filesystem. You can access those files by looking at the files attribute on the request object. Each uploaded file is stored in that dictionary. It behaves just like a standard Python file object, but it also has a save() method that allows you to store that file on the filesystem of the server. Here is a simple example showing how that works: from flask import request @app.route('/upload', methods=['GET', 'POST']) def upload_file(): if request.method == 'POST': f = request.files['the_file'] f.save('/var/www/uploads/uploaded_file.txt') ... If you want to know how the file was named on the client before it was uploaded to your application, you can access the filename attribute. However please keep in mind that this value can be forged so never ever trust that value. If you want to use the filename of the client to store the file on the server, pass it through the secure_filename() function that Werkzeug provides for you: from werkzeug.utils import secure_filename @app.route('/upload', methods=['GET', 'POST']) def upload_file(): if request.method == 'POST': f = request.files['the_file'] f.save('/var/www/uploads/' + secure_filename(f.filename)) ... For some better examples, checkout the Uploading Files pattern. Cookies To access cookies you can use the cookies attribute. To set cookies you can use the set_cookie method of response objects. The cookies attribute of request objects is a dictionary with all the cookies the client transmits. If you want to use sessions, do not use the cookies directly but instead use the Sessions in Flask that add some security on top of cookies for you. Reading cookies: from flask import request @app.route('/') def index(): username = request.cookies.get('username') # use cookies.get(key) instead of cookies[key] to not get a # KeyError if the cookie is missing. Storing cookies: from flask import make_response @app.route('/') def index(): resp = make_response(render_template(...)) resp.set_cookie('username', 'the username') return resp Note that cookies are set on response objects. Since you normally just return strings from the view functions Flask will convert them into response objects for you. If you explicitly want to do that you can use the make_response() function and then modify it. Sometimes you might want to set a cookie at a point where the response object does not exist yet. This is possible by utilizing the Deferred Request Callbacks pattern. For this also see About Responses. Redirects and Errors To redirect a user to another endpoint, use the redirect() function; to abort a request early with an error code, use the abort() function: from flask import abort, redirect, url_for @app.route('/') def index(): return redirect(url_for('login')) @app.route('/login') def login(): abort(401) this_is_never_executed() This is a rather pointless example because a user will be redirected from the index to a page they cannot access (401 means access denied) but it shows how that works. By default a black and white error page is shown for each error code. If you want to customize the error page, you can use the errorhandler() decorator: from flask import render_template @app.errorhandler(404) def page_not_found(error): return render_template('page_not_found.html'), 404 Note the 404 after the render_template() call. This tells Flask that the status code of that page should be 404 which means not found. By default 200 is assumed which translates to: all went well. See Error handlers for more details. About Responses The return value from a view function is automatically converted into a response object for you. If the return value is a string it\u2019s converted into a response object with the string as response body, a 200 OK status code and a text/html mimetype. If the return value is a dict, jsonify() is called to produce a response. The logic that Flask applies to converting return values into response objects is as follows: If a response object of the correct type is returned it \u2019 s directly returned from the view . If it \u2019 s a string , a response object is created with that data and the default parameters . If it \u2019 s a dict , a response object is created using jsonify . If a tuple is returned the items in the tuple can provide extra information . Such tuples have to be in the form ( response , status ), ( response , headers ), or ( response , status , headers ). The status value will override the status code and headers can be a list or dictionary of additional header values . If none of that works , Flask will assume the return value is a valid WSGI application and convert that into a response object . If you want to get hold of the resulting response object inside the view you can use the make_response() function. Imagine you have a view like this: from flask import render_template @app.errorhandler(404) def not_found(error): return render_template('error.html'), 404 You just need to wrap the return expression with make_response() and get the response object to modify it, then return it: from flask import make_response @app.errorhandler(404) def not_found(error): resp = make_response(render_template('error.html'), 404) resp.headers['X-Something'] = 'A value' return resp APIs with JSON A common response format when writing an API is JSON. It\u2019s easy to get started writing such an API with Flask. If you return a dict from a view, it will be converted to a JSON response. @app.route(\"/me\") def me_api(): user = get_current_user() return { \"username\": user.username, \"theme\": user.theme, \"image\": url_for(\"user_image\", filename=user.image), } Depending on your API design, you may want to create JSON responses for types other than dict. In that case, use the jsonify() function, which will serialize any supported JSON data type. Or look into Flask community extensions that support more complex applications. from flask import jsonify @app.route(\"/users\") def users_api(): users = get_all_users() return jsonify([user.to_json() for user in users]) Sessions In addition to the request object there is also a second object called session which allows you to store information specific to a user from one request to the next. This is implemented on top of cookies for you and signs the cookies cryptographically. What this means is that the user could look at the contents of your cookie but not modify it, unless they know the secret key used for signing. In order to use sessions you have to set a secret key. Here is how sessions work: from flask import session Set the secret key to some random bytes. Keep this really secret! \u00b6 app.secret_key = b'_5#y2L\"F4Q8z\\n\\xec]/' @app.route('/') def index(): if 'username' in session: return f'Logged in as {session[\"username\"]}' return 'You are not logged in' @app.route('/login', methods=['GET', 'POST']) def login(): if request.method == 'POST': session['username'] = request.form['username'] return redirect(url_for('index')) return ''' ''' @app.route('/logout') def logout(): # remove the username from the session if it's there session.pop('username', None) return redirect(url_for('index')) How to generate good secret keys A secret key should be as random as possible. Your operating system has ways to generate pretty random data based on a cryptographic random generator. Use the following command to quickly generate a value for Flask.secret_key (or SECRET_KEY): $ python -c 'import os; print(os.urandom(16))' b'_5#y2L\"F4Q8z\\n\\xec]/' A note on cookie-based sessions: Flask will take the values you put into the session object and serialize them into a cookie. If you are finding some values do not persist across requests, cookies are indeed enabled, and you are not getting a clear error message, check the size of the cookie in your page responses compared to the size supported by web browsers. Besides the default client-side based sessions, if you want to handle sessions on the server-side instead, there are several Flask extensions that support this. Message Flashing Good applications and user interfaces are all about feedback. If the user does not get enough feedback they will probably end up hating the application. Flask provides a really simple way to give feedback to a user with the flashing system. The flashing system basically makes it possible to record a message at the end of a request and access it on the next (and only the next) request. This is usually combined with a layout template to expose the message. To flash a message use the flash() method, to get hold of the messages you can use get_flashed_messages() which is also available in the templates. Check out the Message Flashing for a full example. Logging Changelog Sometimes you might be in a situation where you deal with data that should be correct, but actually is not. For example you may have some client-side code that sends an HTTP request to the server but it\u2019s obviously malformed. This might be caused by a user tampering with the data, or the client code failing. Most of the time it\u2019s okay to reply with 400 Bad Request in that situation, but sometimes that won\u2019t do and the code has to continue working. You may still want to log that something fishy happened. This is where loggers come in handy. As of Flask 0.3 a logger is preconfigured for you to use. Here are some example log calls: app.logger.debug('A value for debugging') app.logger.warning('A warning occurred (%d apples)', 42) app.logger.error('An error occurred') The attached logger is a standard logging Logger, so head over to the official logging docs for more information. Read more on Application Errors. Hooking in WSGI Middleware To add WSGI middleware to your Flask application, wrap the application\u2019s wsgi_app attribute. For example, to apply Werkzeug\u2019s ProxyFix middleware for running behind Nginx: from werkzeug.middleware.proxy_fix import ProxyFix app.wsgi_app = ProxyFix(app.wsgi_app) Wrapping app.wsgi_app instead of app means that app still points at your Flask application, not at the middleware, so you can continue to use and configure app directly. Using Flask Extensions Extensions are packages that help you accomplish common tasks. For example, Flask-SQLAlchemy provides SQLAlchemy support that makes it simple and easy to use with Flask. For more on Flask extensions, have a look at Extensions. Deploying to a Web Server Ready to deploy your new Flask app? Go to Deployment Options. Tutorial Project Layout Create a project directory and enter it: $ mkdir flask-tutorial $ cd flask-tutorial Then follow the installation instructions to set up a Python virtual environment and install Flask for your project. The tutorial will assume you\u2019re working from the flask-tutorial directory from now on. The file names at the top of each code block are relative to this directory. A Flask application can be as simple as a single file. hello.py from flask import Flask app = Flask( name ) @app.route('/') def hello(): return 'Hello, World!' However, as a project gets bigger, it becomes overwhelming to keep all the code in one file. Python projects use packages to organize code into multiple modules that can be imported where needed, and the tutorial will do this as well. The project directory will contain: flaskr / , a Python package containing your application code and files . tests / , a directory containing test modules . venv / , a Python virtual environment where Flask and other dependencies are installed . Installation files telling Python how to install your project . Version control config , such as git . You should make a habit of using some type of version control for all your projects , no matter the size . Any other project files you might add in the future . By the end, your project layout will look like this: /home/user/Projects/flask-tutorial \u251c\u2500\u2500 flaskr/ \u2502 \u251c\u2500\u2500 init .py \u2502 \u251c\u2500\u2500 db.py \u2502 \u251c\u2500\u2500 schema.sql \u2502 \u251c\u2500\u2500 auth.py \u2502 \u251c\u2500\u2500 blog.py \u2502 \u251c\u2500\u2500 templates/ \u2502 \u2502 \u251c\u2500\u2500 base.html \u2502 \u2502 \u251c\u2500\u2500 auth/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 login.html \u2502 \u2502 \u2502 \u2514\u2500\u2500 register.html \u2502 \u2502 \u2514\u2500\u2500 blog/ \u2502 \u2502 \u251c\u2500\u2500 create.html \u2502 \u2502 \u251c\u2500\u2500 index.html \u2502 \u2502 \u2514\u2500\u2500 update.html \u2502 \u2514\u2500\u2500 static/ \u2502 \u2514\u2500\u2500 style.css \u251c\u2500\u2500 tests/ \u2502 \u251c\u2500\u2500 conftest.py \u2502 \u251c\u2500\u2500 data.sql \u2502 \u251c\u2500\u2500 test_factory.py \u2502 \u251c\u2500\u2500 test_db.py \u2502 \u251c\u2500\u2500 test_auth.py \u2502 \u2514\u2500\u2500 test_blog.py \u251c\u2500\u2500 venv/ \u251c\u2500\u2500 setup.py \u2514\u2500\u2500 MANIFEST.in If you\u2019re using version control, the following files that are generated while running your project should be ignored. There may be other files based on the editor you use. In general, ignore files that you didn\u2019t write. For example, with git: .gitignore venv/ *.pyc pycache / instance/ .pytest_cache/ .coverage htmlcov/ dist/ build/ *.egg-info/ Continue to Application Setup. Application Setup A Flask application is an instance of the Flask class. Everything about the application, such as configuration and URLs, will be registered with this class. The most straightforward way to create a Flask application is to create a global Flask instance directly at the top of your code, like how the \u201cHello, World!\u201d example did on the previous page. While this is simple and useful in some cases, it can cause some tricky issues as the project grows. Instead of creating a Flask instance globally, you will create it inside a function. This function is known as the application factory. Any configuration, registration, and other setup the application needs will happen inside the function, then the application will be returned. The Application Factory It\u2019s time to start coding! Create the flaskr directory and add the init .py file. The init .py serves double duty: it will contain the application factory, and it tells Python that the flaskr directory should be treated as a package. $ mkdir flaskr flaskr/ init .py import os from flask import Flask def create_app(test_config=None): # create and configure the app app = Flask( name , instance_relative_config=True) app.config.from_mapping( SECRET_KEY='dev', DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'), ) if test_config is None : # load the instance config , if it exists , when not testing app . config . from_pyfile ( 'config.py' , silent = True ) else : # load the test config if passed in app . config . from_mapping ( test_config ) # ensure the instance folder exists try : os . makedirs ( app . instance_path ) except OSError : pass # a simple page that says hello @app . route ( '/hello' ) def hello () : return 'Hello, World!' return app create_app is the application factory function. You\u2019ll add to it later in the tutorial, but it already does a lot. app = Flask ( __name__ , instance_relative_config = True ) creates the Flask instance . __name__ is the name of the current Python module . The app needs to know where it \u2019 s located to set up some paths , and __name__ is a convenient way to tell it that . instance_relative_config = True tells the app that configuration files are relative to the instance folder . The instance folder is located outside the flaskr package and can hold local data that shouldn \u2019 t be committed to version control , such as configuration secrets and the database file . app . config . from_mapping () sets some default configuration that the app will use : SECRET_KEY is used by Flask and extensions to keep data safe . It \u2019 s set to 'dev' to provide a convenient value during development , but it should be overridden with a random value when deploying . DATABASE is the path where the SQLite database file will be saved . It \u2019 s under app . instance_path , which is the path that Flask has chosen for the instance folder . You \u2019 ll learn more about the database in the next section . app . config . from_pyfile () overrides the default configuration with values taken from the config . py file in the instance folder if it exists . For example , when deploying , this can be used to set a real SECRET_KEY . test_config can also be passed to the factory , and will be used instead of the instance configuration . This is so the tests you \u2019 ll write later in the tutorial can be configured independently of any development values you have configured . os . makedirs () ensures that app . instance_path exists . Flask doesn \u2019 t create the instance folder automatically , but it needs to be created because your project will create the SQLite database file there . @app . route () creates a simple route so you can see the application working before getting into the rest of the tutorial . It creates a connection between the URL / hello and a function that returns a response , the string 'Hello, World!' in this case . Run The Application Now you can run your application using the flask command. From the terminal, tell Flask where to find your application, then run it in development mode. Remember, you should still be in the top-level flask-tutorial directory, not the flaskr package. Development mode shows an interactive debugger whenever a page raises an exception, and restarts the server whenever you make changes to the code. You can leave it running and just reload the browser page as you follow the tutorial. For Linux and Mac: $ export FLASK_APP=flaskr $ export FLASK_ENV=development $ flask run For Windows cmd, use set instead of export: set FLASK_APP=flaskr set FLASK_ENV=development flask run For Windows PowerShell, use $env: instead of export: $env:FLASK_APP = \"flaskr\" $env:FLASK_ENV = \"development\" flask run You\u2019ll see output similar to this: Serving Flask app \"flaskr\" Environment: development Debug mode: on Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) Restarting with stat Debugger is active! Debugger PIN: 855-212-761 Visit http://127.0.0.1:5000/hello in a browser and you should see the \u201cHello, World!\u201d message. Congratulations, you\u2019re now running your Flask web application! Continue to Define and Access the Database. Define and Access the Database The application will use a SQLite database to store users and posts. Python comes with built-in support for SQLite in the sqlite3 module. SQLite is convenient because it doesn\u2019t require setting up a separate database server and is built-in to Python. However, if concurrent requests try to write to the database at the same time, they will slow down as each write happens sequentially. Small applications won\u2019t notice this. Once you become big, you may want to switch to a different database. The tutorial doesn\u2019t go into detail about SQL. If you are not familiar with it, the SQLite docs describe the language. Connect to the Database The first thing to do when working with a SQLite database (and most other Python database libraries) is to create a connection to it. Any queries and operations are performed using the connection, which is closed after the work is finished. In web applications this connection is typically tied to the request. It is created at some point when handling a request, and closed before the response is sent. flaskr/db.py import sqlite3 import click from flask import current_app, g from flask.cli import with_appcontext def get_db(): if 'db' not in g: g.db = sqlite3.connect( current_app.config['DATABASE'], detect_types=sqlite3.PARSE_DECLTYPES ) g.db.row_factory = sqlite3.Row return g.db def close_db(e=None): db = g.pop('db', None) if db is not None: db.close() g is a special object that is unique for each request. It is used to store data that might be accessed by multiple functions during the request. The connection is stored and reused instead of creating a new connection if get_db is called a second time in the same request. current_app is another special object that points to the Flask application handling the request. Since you used an application factory, there is no application object when writing the rest of your code. get_db will be called when the application has been created and is handling a request, so current_app can be used. sqlite3.connect() establishes a connection to the file pointed at by the DATABASE configuration key. This file doesn\u2019t have to exist yet, and won\u2019t until you initialize the database later. sqlite3.Row tells the connection to return rows that behave like dicts. This allows accessing the columns by name. close_db checks if a connection was created by checking if g.db was set. If the connection exists, it is closed. Further down you will tell your application about the close_db function in the application factory so that it is called after each request. Create the Tables In SQLite, data is stored in tables and columns. These need to be created before you can store and retrieve data. Flaskr will store users in the user table, and posts in the post table. Create a file with the SQL commands needed to create empty tables: flaskr/schema.sql DROP TABLE IF EXISTS user; DROP TABLE IF EXISTS post; CREATE TABLE user ( id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT UNIQUE NOT NULL, password TEXT NOT NULL ); CREATE TABLE post ( id INTEGER PRIMARY KEY AUTOINCREMENT, author_id INTEGER NOT NULL, created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, title TEXT NOT NULL, body TEXT NOT NULL, FOREIGN KEY (author_id) REFERENCES user (id) ); Add the Python functions that will run these SQL commands to the db.py file: flaskr/db.py def init_db(): db = get_db() with current_app.open_resource('schema.sql') as f: db.executescript(f.read().decode('utf8')) @click.command('init-db') @with_appcontext def init_db_command(): \"\"\"Clear the existing data and create new tables.\"\"\" init_db() click.echo('Initialized the database.') open_resource() opens a file relative to the flaskr package, which is useful since you won\u2019t necessarily know where that location is when deploying the application later. get_db returns a database connection, which is used to execute the commands read from the file. click.command() defines a command line command called init-db that calls the init_db function and shows a success message to the user. You can read Command Line Interface to learn more about writing commands. Register with the Application The close_db and init_db_command functions need to be registered with the application instance; otherwise, they won\u2019t be used by the application. However, since you\u2019re using a factory function, that instance isn\u2019t available when writing the functions. Instead, write a function that takes an application and does the registration. flaskr/db.py def init_app(app): app.teardown_appcontext(close_db) app.cli.add_command(init_db_command) app.teardown_appcontext() tells Flask to call that function when cleaning up after returning the response. app.cli.add_command() adds a new command that can be called with the flask command. Import and call this function from the factory. Place the new code at the end of the factory function before returning the app. flaskr/ init .py def create_app(): app = ... # existing code omitted from . import db db . init_app ( app ) return app Initialize the Database File Now that init-db has been registered with the app, it can be called using the flask command, similar to the run command from the previous page. Note If you\u2019re still running the server from the previous page, you can either stop the server, or run this command in a new terminal. If you use a new terminal, remember to change to your project directory and activate the env as described in Activate the environment. You\u2019ll also need to set FLASK_APP and FLASK_ENV as shown on the previous page. Run the init-db command: $ flask init-db Initialized the database. There will now be a flaskr.sqlite file in the instance folder in your project. Continue to Blueprints and Views. Blueprints and Views A view function is the code you write to respond to requests to your application. Flask uses patterns to match the incoming request URL to the view that should handle it. The view returns data that Flask turns into an outgoing response. Flask can also go the other direction and generate a URL to a view based on its name and arguments. Create a Blueprint A Blueprint is a way to organize a group of related views and other code. Rather than registering views and other code directly with an application, they are registered with a blueprint. Then the blueprint is registered with the application when it is available in the factory function. Flaskr will have two blueprints, one for authentication functions and one for the blog posts functions. The code for each blueprint will go in a separate module. Since the blog needs to know about authentication, you\u2019ll write the authentication one first. flaskr/auth.py import functools from flask import ( Blueprint, flash, g, redirect, render_template, request, session, url_for ) from werkzeug.security import check_password_hash, generate_password_hash from flaskr.db import get_db bp = Blueprint('auth', name , url_prefix='/auth') This creates a Blueprint named 'auth'. Like the application object, the blueprint needs to know where it\u2019s defined, so name is passed as the second argument. The url_prefix will be prepended to all the URLs associated with the blueprint. Import and register the blueprint from the factory using app.register_blueprint(). Place the new code at the end of the factory function before returning the app. flaskr/ init .py def create_app(): app = ... # existing code omitted from . import auth app . register_blueprint ( auth . bp ) return app The authentication blueprint will have views to register new users and to log in and log out. The First View: Register When the user visits the /auth/register URL, the register view will return HTML with a form for them to fill out. When they submit the form, it will validate their input and either show the form again with an error message or create the new user and go to the login page. For now you will just write the view code. On the next page, you\u2019ll write templates to generate the HTML form. flaskr/auth.py @bp.route('/register', methods=('GET', 'POST')) def register(): if request.method == 'POST': username = request.form['username'] password = request.form['password'] db = get_db() error = None if not username : error = 'Username is required.' elif not password : error = 'Password is required.' elif db . execute ( 'SELECT id FROM user WHERE username = ?' , ( username ,) ). fetchone () is not None : error = 'User {} is already registered.' . format ( username ) if error is None : db . execute ( 'INSERT INTO user (username, password) VALUES (?, ?)' , ( username , generate_password_hash ( password )) ) db . commit () return redirect ( url_for ( 'auth.login' )) flash ( error ) return render_template ( 'auth/register.html' ) Here\u2019s what the register view function is doing: @bp . route associates the URL / register with the register view function . When Flask receives a request to / auth / register , it will call the register view and use the return value as the response . If the user submitted the form , request . method will be 'POST' . In this case , start validating the input . request . form is a special type of dict mapping submitted form keys and values . The user will input their username and password . Validate that username and password are not empty . Validate that username is not already registered by querying the database and checking if a result is returned . db . execute takes a SQL query with ? placeholders for any user input , and a tuple of values to replace the placeholders with . The database library will take care of escaping the values so you are not vulnerable to a SQL injection attack . fetchone () returns one row from the query . If the query returned no results , it returns None . Later , fetchall () is used , which returns a list of all results . If validation succeeds , insert the new user data into the database . For security , passwords should never be stored in the database directly . Instead , generate_password_hash () is used to securely hash the password , and that hash is stored . Since this query modifies data , db . commit () needs to be called afterwards to save the changes . After storing the user , they are redirected to the login page . url_for () generates the URL for the login view based on its name . This is preferable to writing the URL directly as it allows you to change the URL later without changing all code that links to it . redirect () generates a redirect response to the generated URL . If validation fails , the error is shown to the user . flash () stores messages that can be retrieved when rendering the template . When the user initially navigates to auth / register , or there was a validation error , an HTML page with the registration form should be shown . render_template () will render a template containing the HTML , which you \u2019 ll write in the next step of the tutorial . Login This view follows the same pattern as the register view above. flaskr/auth.py @bp.route('/login', methods=('GET', 'POST')) def login(): if request.method == 'POST': username = request.form['username'] password = request.form['password'] db = get_db() error = None user = db.execute( 'SELECT * FROM user WHERE username = ?', (username,) ).fetchone() if user is None : error = 'Incorrect username.' elif not check_password_hash ( user [ 'password' ], password ): error = 'Incorrect password.' if error is None : session . clear () session [ 'user_id' ] = user [ 'id' ] return redirect ( url_for ( 'index' )) flash ( error ) return render_template ( 'auth/login.html' ) There are a few differences from the register view: The user is queried first and stored in a variable for later use . check_password_hash () hashes the submitted password in the same way as the stored hash and securely compares them . If they match , the password is valid . session is a dict that stores data across requests . When validation succeeds , the user \u2019 s id is stored in a new session . The data is stored in a cookie that is sent to the browser , and the browser then sends it back with subsequent requests . Flask securely signs the data so that it can \u2019 t be tampered with . Now that the user\u2019s id is stored in the session, it will be available on subsequent requests. At the beginning of each request, if a user is logged in their information should be loaded and made available to other views. flaskr/auth.py @bp.before_app_request def load_logged_in_user(): user_id = session.get('user_id') if user_id is None: g.user = None else: g.user = get_db().execute( 'SELECT * FROM user WHERE id = ?', (user_id,) ).fetchone() bp.before_app_request() registers a function that runs before the view function, no matter what URL is requested. load_logged_in_user checks if a user id is stored in the session and gets that user\u2019s data from the database, storing it on g.user, which lasts for the length of the request. If there is no user id, or if the id doesn\u2019t exist, g.user will be None. Logout To log out, you need to remove the user id from the session. Then load_logged_in_user won\u2019t load a user on subsequent requests. flaskr/auth.py @bp.route('/logout') def logout(): session.clear() return redirect(url_for('index')) Require Authentication in Other Views Creating, editing, and deleting blog posts will require a user to be logged in. A decorator can be used to check this for each view it\u2019s applied to. flaskr/auth.py def login_required(view): @functools.wraps(view) def wrapped_view(**kwargs): if g.user is None: return redirect(url_for('auth.login')) return view ( ** kwargs ) return wrapped_view This decorator returns a new view function that wraps the original view it\u2019s applied to. The new function checks if a user is loaded and redirects to the login page otherwise. If a user is loaded the original view is called and continues normally. You\u2019ll use this decorator when writing the blog views. Endpoints and URLs The url_for() function generates the URL to a view based on a name and arguments. The name associated with a view is also called the endpoint, and by default it\u2019s the same as the name of the view function. For example, the hello() view that was added to the app factory earlier in the tutorial has the name 'hello' and can be linked to with url_for('hello'). If it took an argument, which you\u2019ll see later, it would be linked to using url_for('hello', who='World'). When using a blueprint, the name of the blueprint is prepended to the name of the function, so the endpoint for the login function you wrote above is 'auth.login' because you added it to the 'auth' blueprint. Continue to Templates. Templates You\u2019ve written the authentication views for your application, but if you\u2019re running the server and try to go to any of the URLs, you\u2019ll see a TemplateNotFound error. That\u2019s because the views are calling render_template(), but you haven\u2019t written the templates yet. The template files will be stored in the templates directory inside the flaskr package. Templates are files that contain static data as well as placeholders for dynamic data. A template is rendered with specific data to produce a final document. Flask uses the Jinja template library to render templates. In your application, you will use templates to render HTML which will display in the user\u2019s browser. In Flask, Jinja is configured to autoescape any data that is rendered in HTML templates. This means that it\u2019s safe to render user input; any characters they\u2019ve entered that could mess with the HTML, such as < and > will be escaped with safe values that look the same in the browser but don\u2019t cause unwanted effects. Jinja looks and behaves mostly like Python. Special delimiters are used to distinguish Jinja syntax from the static data in the template. Anything between {{ and }} is an expression that will be output to the final document. {% and %} denotes a control flow statement like if and for. Unlike Python, blocks are denoted by start and end tags rather than indentation since static text within a block could change indentation. The Base Layout Each page in the application will have the same basic layout around a different body. Instead of writing the entire HTML structure in each template, each template will extend a base template and override specific sections. flaskr/templates/base.html {% block title %}{% endblock %} - Flaskr Flaskr {% if g.user %} {{ g.user['username'] }} Log Out {% else %} Register Log In {% endif %} {% block header %}{% endblock %} {% for message in get_flashed_messages() %} {{ message }} {% endfor %} {% block content %}{% endblock %} g is automatically available in templates. Based on if g.user is set (from load_logged_in_user), either the username and a log out link are displayed, or links to register and log in are displayed. url_for() is also automatically available, and is used to generate URLs to views instead of writing them out manually. After the page title, and before the content, the template loops over each message returned by get_flashed_messages(). You used flash() in the views to show error messages, and this is the code that will display them. There are three blocks defined here that will be overridden in the other templates: {% block title %} will change the title displayed in the browser\u2019s tab and window title. {% block header %} is similar to title but will change the title displayed on the page. {% block content %} is where the content of each page goes, such as the login form or a blog post. The base template is directly in the templates directory. To keep the others organized, the templates for a blueprint will be placed in a directory with the same name as the blueprint. Register flaskr/templates/auth/register.html {% extends 'base.html' %} {% block header %} {% block title %}Register{% endblock %} {% endblock %} {% block content %} Username Password {% endblock %} {% extends 'base.html' %} tells Jinja that this template should replace the blocks from the base template. All the rendered content must appear inside {% block %} tags that override blocks from the base template. A useful pattern used here is to place {% block title %} inside {% block header %}. This will set the title block and then output the value of it into the header block, so that both the window and page share the same title without writing it twice. The input tags are using the required attribute here. This tells the browser not to submit the form until those fields are filled in. If the user is using an older browser that doesn\u2019t support that attribute, or if they are using something besides a browser to make requests, you still want to validate the data in the Flask view. It\u2019s important to always fully validate the data on the server, even if the client does some validation as well. Log In This is identical to the register template except for the title and submit button. flaskr/templates/auth/login.html {% extends 'base.html' %} {% block header %} {% block title %}Log In{% endblock %} {% endblock %} {% block content %} Username Password {% endblock %} Register A User Now that the authentication templates are written, you can register a user. Make sure the server is still running (flask run if it\u2019s not), then go to http://127.0.0.1:5000/auth/register . Try clicking the \u201cRegister\u201d button without filling out the form and see that the browser shows an error message. Try removing the required attributes from the register.html template and click \u201cRegister\u201d again. Instead of the browser showing an error, the page will reload and the error from flash() in the view will be shown. Fill out a username and password and you\u2019ll be redirected to the login page. Try entering an incorrect username, or the correct username and incorrect password. If you log in you\u2019ll get an error because there\u2019s no index view to redirect to yet. Continue to Static Files. Static Files The authentication views and templates work, but they look very plain right now. Some CSS can be added to add style to the HTML layout you constructed. The style won\u2019t change, so it\u2019s a static file rather than a template. Flask automatically adds a static view that takes a path relative to the flaskr/static directory and serves it. The base.html template already has a link to the style.css file: {{ url_for('static', filename='style.css') }} Besides CSS, other types of static files might be files with JavaScript functions, or a logo image. They are all placed under the flaskr/static directory and referenced with url_for('static', filename='...'). This tutorial isn\u2019t focused on how to write CSS, so you can just copy the following into the flaskr/static/style.css file: flaskr/static/style.css html { font-family: sans-serif; background: #eee; padding: 1rem; } body { max-width: 960px; margin: 0 auto; background: white; } h1 { font-family: serif; color: #377ba8; margin: 1rem 0; } a { color: #377ba8; } hr { border: none; border-top: 1px solid lightgray; } nav { background: lightgray; display: flex; align-items: center; padding: 0 0.5rem; } nav h1 { flex: auto; margin: 0; } nav h1 a { text-decoration: none; padding: 0.25rem 0.5rem; } nav ul { display: flex; list-style: none; margin: 0; padding: 0; } nav ul li a, nav ul li span, header .action { display: block; padding: 0.5rem; } .content { padding: 0 1rem 1rem; } .content > header { border-bottom: 1px solid lightgray; display: flex; align-items: flex-end; } .content > header h1 { flex: auto; margin: 1rem 0 0.25rem 0; } .flash { margin: 1em 0; padding: 1em; background: #cae6f6; border: 1px solid #377ba8; } .post > header { display: flex; align-items: flex-end; font-size: 0.85em; } .post > header > div:first-of-type { flex: auto; } .post > header h1 { font-size: 1.5em; margin-bottom: 0; } .post .about { color: slategray; font-style: italic; } .post .body { white-space: pre-line; } .content:last-child { margin-bottom: 0; } .content form { margin: 1em 0; display: flex; flex-direction: column; } .content label { font-weight: bold; margin-bottom: 0.5em; } .content input, .content textarea { margin-bottom: 1em; } .content textarea { min-height: 12em; resize: vertical; } input.danger { color: #cc2f2e; } input[type=submit] { align-self: start; min-width: 10em; } You can find a less compact version of style.css in the example code. Go to http://127.0.0.1:5000/auth/login and the page should look like the screenshot below. login_page You can read more about CSS from Mozilla\u2019s documentation. If you change a static file, refresh the browser page. If the change doesn\u2019t show up, try clearing your browser\u2019s cache. Continue to Blog Blueprint. Blog Blueprint You\u2019ll use the same techniques you learned about when writing the authentication blueprint to write the blog blueprint. The blog should list all posts, allow logged in users to create posts, and allow the author of a post to edit or delete it. As you implement each view, keep the development server running. As you save your changes, try going to the URL in your browser and testing them out. The Blueprint Define the blueprint and register it in the application factory. flaskr/blog.py from flask import ( Blueprint, flash, g, redirect, render_template, request, url_for ) from werkzeug.exceptions import abort from flaskr.auth import login_required from flaskr.db import get_db bp = Blueprint('blog', name ) Import and register the blueprint from the factory using app.register_blueprint(). Place the new code at the end of the factory function before returning the app. flaskr/ init .py def create_app(): app = ... # existing code omitted from . import blog app . register_blueprint ( blog . bp ) app . add_url_rule ( '/' , endpoint = 'index' ) return app Unlike the auth blueprint, the blog blueprint does not have a url_prefix. So the index view will be at /, the create view at /create, and so on. The blog is the main feature of Flaskr, so it makes sense that the blog index will be the main index. However, the endpoint for the index view defined below will be blog.index. Some of the authentication views referred to a plain index endpoint. app.add_url_rule() associates the endpoint name 'index' with the / url so that url_for('index') or url_for('blog.index') will both work, generating the same / URL either way. In another application you might give the blog blueprint a url_prefix and define a separate index view in the application factory, similar to the hello view. Then the index and blog.index endpoints and URLs would be different. Index The index will show all of the posts, most recent first. A JOIN is used so that the author information from the user table is available in the result. flaskr/blog.py @bp.route('/') def index(): db = get_db() posts = db.execute( 'SELECT p.id, title, body, created, author_id, username' ' FROM post p JOIN user u ON p.author_id = u.id' ' ORDER BY created DESC' ).fetchall() return render_template('blog/index.html', posts=posts) flaskr/templates/blog/index.html {% extends 'base.html' %} {% block header %} {% block title %}Posts{% endblock %} {% if g.user %} New {% endif %} {% endblock %} {% block content %} {% for post in posts %} {{ post['title'] }} by {{ post['username'] }} on {{ post['created'].strftime('%Y-%m-%d') }} {% if g.user['id'] == post['author_id'] %} Edit {% endif %} {{ post['body'] }} {% if not loop.last %} {% endif %} {% endfor %} {% endblock %} When a user is logged in, the header block adds a link to the create view. When the user is the author of a post, they\u2019ll see an \u201cEdit\u201d link to the update view for that post. loop.last is a special variable available inside Jinja for loops. It\u2019s used to display a line after each post except the last one, to visually separate them. Create The create view works the same as the auth register view. Either the form is displayed, or the posted data is validated and the post is added to the database or an error is shown. The login_required decorator you wrote earlier is used on the blog views. A user must be logged in to visit these views, otherwise they will be redirected to the login page. flaskr/blog.py @bp.route('/create', methods=('GET', 'POST')) @login_required def create(): if request.method == 'POST': title = request.form['title'] body = request.form['body'] error = None if not title : error = 'Title is required.' if error is not None : flash ( error ) else : db = get_db () db . execute ( 'INSERT INTO post (title, body, author_id)' ' VALUES (?, ?, ?)' , ( title , body , g . user [ 'id' ]) ) db . commit () return redirect ( url_for ( 'blog.index' )) return render_template ( 'blog/create.html' ) flaskr/templates/blog/create.html {% extends 'base.html' %} {% block header %} {% block title %}New Post{% endblock %} {% endblock %} {% block content %} Title Body {{ request.form['body'] }} {% endblock %} Update Both the update and delete views will need to fetch a post by id and check if the author matches the logged in user. To avoid duplicating code, you can write a function to get the post and call it from each view. flaskr/blog.py def get_post(id, check_author=True): post = get_db().execute( 'SELECT p.id, title, body, created, author_id, username' ' FROM post p JOIN user u ON p.author_id = u.id' ' WHERE p.id = ?', (id,) ).fetchone() if post is None : abort ( 404 , \"Post id {0} doesn't exist.\" . format ( id )) if check_author and post [ 'author_id' ] != g . user [ 'id' ]: abort ( 403 ) return post abort() will raise a special exception that returns an HTTP status code. It takes an optional message to show with the error, otherwise a default message is used. 404 means \u201cNot Found\u201d, and 403 means \u201cForbidden\u201d. (401 means \u201cUnauthorized\u201d, but you redirect to the login page instead of returning that status.) The check_author argument is defined so that the function can be used to get a post without checking the author. This would be useful if you wrote a view to show an individual post on a page, where the user doesn\u2019t matter because they\u2019re not modifying the post. flaskr/blog.py @bp.route('/ /update', methods=('GET', 'POST')) @login_required def update(id): post = get_post(id) if request . method == 'POST' : title = request . form [ 'title' ] body = request . form [ 'body' ] error = None if not title : error = 'Title is required.' if error is not None : flash ( error ) else : db = get_db () db . execute ( 'UPDATE post SET title = ?, body = ?' ' WHERE id = ?' , ( title , body , id ) ) db . commit () return redirect ( url_for ( 'blog.index' )) return render_template ( 'blog/update.html' , post = post ) Unlike the views you\u2019ve written so far, the update function takes an argument, id. That corresponds to the in the route. A real URL will look like /1/update. Flask will capture the 1, ensure it\u2019s an int, and pass it as the id argument. If you don\u2019t specify int: and instead do , it will be a string. To generate a URL to the update page, url_for() needs to be passed the id so it knows what to fill in: url_for('blog.update', id=post['id']). This is also in the index.html file above. The create and update views look very similar. The main difference is that the update view uses a post object and an UPDATE query instead of an INSERT. With some clever refactoring, you could use one view and template for both actions, but for the tutorial it\u2019s clearer to keep them separate. flaskr/templates/blog/update.html {% extends 'base.html' %} {% block header %} {% block title %}Edit \"{{ post['title'] }}\"{% endblock %} {% endblock %} {% block content %} Title Body {{ request.form['body'] or post['body'] }} {% endblock %} This template has two forms. The first posts the edited data to the current page (/ /update). The other form contains only a button and specifies an action attribute that posts to the delete view instead. The button uses some JavaScript to show a confirmation dialog before submitting. The pattern {{ request.form['title'] or post['title'] }} is used to choose what data appears in the form. When the form hasn\u2019t been submitted, the original post data appears, but if invalid form data was posted you want to display that so the user can fix the error, so request.form is used instead. request is another variable that\u2019s automatically available in templates. Delete The delete view doesn\u2019t have its own template, the delete button is part of update.html and posts to the / /delete URL. Since there is no template, it will only handle the POST method and then redirect to the index view. flaskr/blog.py @bp.route('/ /delete', methods=('POST',)) @login_required def delete(id): get_post(id) db = get_db() db.execute('DELETE FROM post WHERE id = ?', (id,)) db.commit() return redirect(url_for('blog.index')) Congratulations, you\u2019ve now finished writing your application! Take some time to try out everything in the browser. However, there\u2019s still more to do before the project is complete. Continue to Make the Project Installable. Make the Project Installable Making your project installable means that you can build a distribution file and install that in another environment, just like you installed Flask in your project\u2019s environment. This makes deploying your project the same as installing any other library, so you\u2019re using all the standard Python tools to manage everything. Installing also comes with other benefits that might not be obvious from the tutorial or as a new Python user, including: Currently , Python and Flask understand how to use the flaskr package only because you \u2019 re running from your project \u2019 s directory . Installing means you can import it no matter where you run from. You can manage your project \u2019 s dependencies just like other packages do , so pip install yourproject . whl installs them . Test tools can isolate your test environment from your development environment. Note This is being introduced late in the tutorial, but in your future projects you should always start with this. Describe the Project The setup.py file describes your project and the files that belong to it. setup.py from setuptools import find_packages, setup setup( name='flaskr', version='1.0.0', packages=find_packages(), include_package_data=True, zip_safe=False, install_requires=[ 'flask', ], ) packages tells Python what package directories (and the Python files they contain) to include. find_packages() finds these directories automatically so you don\u2019t have to type them out. To include other files, such as the static and templates directories, include_package_data is set. Python needs another file named MANIFEST.in to tell what this other data is. MANIFEST.in include flaskr/schema.sql graft flaskr/static graft flaskr/templates global-exclude *.pyc This tells Python to copy everything in the static and templates directories, and the schema.sql file, but to exclude all bytecode files. See the official packaging guide for another explanation of the files and options used. Install the Project Use pip to install your project in the virtual environment. $ pip install -e . This tells pip to find setup.py in the current directory and install it in editable or development mode. Editable mode means that as you make changes to your local code, you\u2019ll only need to re-install if you change the metadata about the project, such as its dependencies. You can observe that the project is now installed with pip list. $ pip list Package Version Location click 6.7 Flask 1.0 flaskr 1.0.0 /home/user/Projects/flask-tutorial itsdangerous 0.24 Jinja2 2.10 MarkupSafe 1.0 pip 9.0.3 setuptools 39.0.1 Werkzeug 0.14.1 wheel 0.30.0 Nothing changes from how you\u2019ve been running your project so far. FLASK_APP is still set to flaskr and flask run still runs the application, but you can call it from anywhere, not just the flask-tutorial directory. Continue to Test Coverage. Test Coverage Writing unit tests for your application lets you check that the code you wrote works the way you expect. Flask provides a test client that simulates requests to the application and returns the response data. You should test as much of your code as possible. Code in functions only runs when the function is called, and code in branches, such as if blocks, only runs when the condition is met. You want to make sure that each function is tested with data that covers each branch. The closer you get to 100% coverage, the more comfortable you can be that making a change won\u2019t unexpectedly change other behavior. However, 100% coverage doesn\u2019t guarantee that your application doesn\u2019t have bugs. In particular, it doesn\u2019t test how the user interacts with the application in the browser. Despite this, test coverage is an important tool to use during development. Note This is being introduced late in the tutorial, but in your future projects you should test as you develop. You\u2019ll use pytest and coverage to test and measure your code. Install them both: $ pip install pytest coverage Setup and Fixtures The test code is located in the tests directory. This directory is next to the flaskr package, not inside it. The tests/conftest.py file contains setup functions called fixtures that each test will use. Tests are in Python modules that start with test_, and each test function in those modules also starts with test_. Each test will create a new temporary database file and populate some data that will be used in the tests. Write a SQL file to insert that data. tests/data.sql INSERT INTO user (username, password) VALUES ('test', 'pbkdf2:sha256:50000 TCI4GzcX TCI4GzcX 0de171a4f4dac32e3364c7ddc7c14f3e2fa61f2d17574483f7ffbb431b4acb2f'), ('other', 'pbkdf2:sha256:50000 kJPKsz6N kJPKsz6N d2d4784f1b030a9761f5ccaeeaca413f27f2ecb76d6168407af962ddce849f79'); INSERT INTO post (title, body, author_id, created) VALUES ('test title', 'test' || x'0a' || 'body', 1, '2018-01-01 00:00:00'); The app fixture will call the factory and pass test_config to configure the application and database for testing instead of using your local development configuration. tests/conftest.py import os import tempfile import pytest from flaskr import create_app from flaskr.db import get_db, init_db with open(os.path.join(os.path.dirname( file ), 'data.sql'), 'rb') as f: _data_sql = f.read().decode('utf8') @pytest.fixture def app(): db_fd, db_path = tempfile.mkstemp() app = create_app ( { 'TESTING' : True , 'DATABASE' : db_path , } ) with app . app_context (): init_db () get_db (). executescript ( _data_sql ) yield app os . close ( db_fd ) os . unlink ( db_path ) @pytest.fixture def client(app): return app.test_client() @pytest.fixture def runner(app): return app.test_cli_runner() tempfile.mkstemp() creates and opens a temporary file, returning the file object and the path to it. The DATABASE path is overridden so it points to this temporary path instead of the instance folder. After setting the path, the database tables are created and the test data is inserted. After the test is over, the temporary file is closed and removed. TESTING tells Flask that the app is in test mode. Flask changes some internal behavior so it\u2019s easier to test, and other extensions can also use the flag to make testing them easier. The client fixture calls app.test_client() with the application object created by the app fixture. Tests will use the client to make requests to the application without running the server. The runner fixture is similar to client. app.test_cli_runner() creates a runner that can call the Click commands registered with the application. Pytest uses fixtures by matching their function names with the names of arguments in the test functions. For example, the test_hello function you\u2019ll write next takes a client argument. Pytest matches that with the client fixture function, calls it, and passes the returned value to the test function. Factory There\u2019s not much to test about the factory itself. Most of the code will be executed for each test already, so if something fails the other tests will notice. The only behavior that can change is passing test config. If config is not passed, there should be some default configuration, otherwise the configuration should be overridden. tests/test_factory.py from flaskr import create_app def test_config(): assert not create_app().testing assert create_app({'TESTING': True}).testing def test_hello(client): response = client.get('/hello') assert response.data == b'Hello, World!' You added the hello route as an example when writing the factory at the beginning of the tutorial. It returns \u201cHello, World!\u201d, so the test checks that the response data matches. Database Within an application context, get_db should return the same connection each time it\u2019s called. After the context, the connection should be closed. tests/test_db.py import sqlite3 import pytest from flaskr.db import get_db def test_get_close_db(app): with app.app_context(): db = get_db() assert db is get_db() with pytest . raises ( sqlite3 . ProgrammingError ) as e : db . execute ( 'SELECT 1' ) assert 'closed' in str ( e . value ) The init-db command should call the init_db function and output a message. tests/test_db.py def test_init_db_command(runner, monkeypatch): class Recorder(object): called = False def fake_init_db (): Recorder . called = True monkeypatch . setattr ( 'flaskr.db.init_db' , fake_init_db ) result = runner . invoke ( args = [ 'init-db' ]) assert 'Initialized' in result . output assert Recorder . called This test uses Pytest\u2019s monkeypatch fixture to replace the init_db function with one that records that it\u2019s been called. The runner fixture you wrote above is used to call the init-db command by name. Authentication For most of the views, a user needs to be logged in. The easiest way to do this in tests is to make a POST request to the login view with the client. Rather than writing that out every time, you can write a class with methods to do that, and use a fixture to pass it the client for each test. tests/conftest.py class AuthActions(object): def init (self, client): self._client = client def login ( self , username = 'test' , password = 'test' ): return self . _client . post ( '/auth/login' , data = { 'username' : username , 'password' : password } ) def logout ( self ): return self . _client . get ( '/auth/logout' ) @pytest.fixture def auth(client): return AuthActions(client) With the auth fixture, you can call auth.login() in a test to log in as the test user, which was inserted as part of the test data in the app fixture. The register view should render successfully on GET. On POST with valid form data, it should redirect to the login URL and the user\u2019s data should be in the database. Invalid data should display error messages. tests/test_auth.py import pytest from flask import g, session from flaskr.db import get_db def test_register(client, app): assert client.get('/auth/register').status_code == 200 response = client.post( '/auth/register', data={'username': 'a', 'password': 'a'} ) assert ' http://localhost/auth/login ' == response.headers['Location'] with app.app_context(): assert get_db().execute( \"select * from user where username = 'a'\", ).fetchone() is not None @pytest.mark.parametrize(('username', 'password', 'message'), ( ('', '', b'Username is required.'), ('a', '', b'Password is required.'), ('test', 'test', b'already registered'), )) def test_register_validate_input(client, username, password, message): response = client.post( '/auth/register', data={'username': username, 'password': password} ) assert message in response.data client.get() makes a GET request and returns the Response object returned by Flask. Similarly, client.post() makes a POST request, converting the data dict into form data. To test that the page renders successfully, a simple request is made and checked for a 200 OK status_code. If rendering failed, Flask would return a 500 Internal Server Error code. headers will have a Location header with the login URL when the register view redirects to the login view. data contains the body of the response as bytes. If you expect a certain value to render on the page, check that it\u2019s in data. Bytes must be compared to bytes. If you want to compare Unicode text, use get_data(as_text=True) instead. pytest.mark.parametrize tells Pytest to run the same test function with different arguments. You use it here to test different invalid input and error messages without writing the same code three times. The tests for the login view are very similar to those for register. Rather than testing the data in the database, session should have user_id set after logging in. tests/test_auth.py def test_login(client, auth): assert client.get('/auth/login').status_code == 200 response = auth.login() assert response.headers['Location'] == ' http://localhost/ ' with client: client.get('/') assert session['user_id'] == 1 assert g.user['username'] == 'test' @pytest.mark.parametrize(('username', 'password', 'message'), ( ('a', 'test', b'Incorrect username.'), ('test', 'a', b'Incorrect password.'), )) def test_login_validate_input(auth, username, password, message): response = auth.login(username, password) assert message in response.data Using client in a with block allows accessing context variables such as session after the response is returned. Normally, accessing session outside of a request would raise an error. Testing logout is the opposite of login. session should not contain user_id after logging out. tests/test_auth.py def test_logout(client, auth): auth.login() with client: auth.logout() assert 'user_id' not in session Blog All the blog views use the auth fixture you wrote earlier. Call auth.login() and subsequent requests from the client will be logged in as the test user. The index view should display information about the post that was added with the test data. When logged in as the author, there should be a link to edit the post. You can also test some more authentication behavior while testing the index view. When not logged in, each page shows links to log in or register. When logged in, there\u2019s a link to log out. tests/test_blog.py import pytest from flaskr.db import get_db def test_index(client, auth): response = client.get('/') assert b\"Log In\" in response.data assert b\"Register\" in response.data auth.login() response = client.get('/') assert b'Log Out' in response.data assert b'test title' in response.data assert b'by test on 2018-01-01' in response.data assert b'test\\nbody' in response.data assert b'href=\"/1/update\"' in response.data A user must be logged in to access the create, update, and delete views. The logged in user must be the author of the post to access update and delete, otherwise a 403 Forbidden status is returned. If a post with the given id doesn\u2019t exist, update and delete should return 404 Not Found. tests/test_blog.py @pytest.mark.parametrize('path', ( '/create', '/1/update', '/1/delete', )) def test_login_required(client, path): response = client.post(path) assert response.headers['Location'] == ' http://localhost/auth/login ' def test_author_required(app, client, auth): # change the post author to another user with app.app_context(): db = get_db() db.execute('UPDATE post SET author_id = 2 WHERE id = 1') db.commit() auth.login() # current user can't modify other user's post assert client.post('/1/update').status_code == 403 assert client.post('/1/delete').status_code == 403 # current user doesn't see edit link assert b'href=\"/1/update\"' not in client.get('/').data @pytest.mark.parametrize('path', ( '/2/update', '/2/delete', )) def test_exists_required(client, auth, path): auth.login() assert client.post(path).status_code == 404 The create and update views should render and return a 200 OK status for a GET request. When valid data is sent in a POST request, create should insert the new post data into the database, and update should modify the existing data. Both pages should show an error message on invalid data. tests/test_blog.py def test_create(client, auth, app): auth.login() assert client.get('/create').status_code == 200 client.post('/create', data={'title': 'created', 'body': ''}) with app.app_context(): db = get_db() count = db.execute('SELECT COUNT(id) FROM post').fetchone()[0] assert count == 2 def test_update(client, auth, app): auth.login() assert client.get('/1/update').status_code == 200 client.post('/1/update', data={'title': 'updated', 'body': ''}) with app.app_context(): db = get_db() post = db.execute('SELECT * FROM post WHERE id = 1').fetchone() assert post['title'] == 'updated' @pytest.mark.parametrize('path', ( '/create', '/1/update', )) def test_create_update_validate(client, auth, path): auth.login() response = client.post(path, data={'title': '', 'body': ''}) assert b'Title is required.' in response.data The delete view should redirect to the index URL and the post should no longer exist in the database. tests/test_blog.py def test_delete(client, auth, app): auth.login() response = client.post('/1/delete') assert response.headers['Location'] == ' http://localhost/ ' with app.app_context(): db = get_db() post = db.execute('SELECT * FROM post WHERE id = 1').fetchone() assert post is None Running the Tests Some extra configuration, which is not required but makes running tests with coverage less verbose, can be added to the project\u2019s setup.cfg file. setup.cfg [tool:pytest] testpaths = tests [coverage:run] branch = True source = flaskr To run the tests, use the pytest command. It will find and run all the test functions you\u2019ve written. $ pytest ========================= test session starts ========================== platform linux -- Python 3.6.4, pytest-3.5.0, py-1.5.3, pluggy-0.6.0 rootdir: /home/user/Projects/flask-tutorial, inifile: setup.cfg collected 23 items tests/test_auth.py ........ [ 34%] tests/test_blog.py ............ [ 86%] tests/test_db.py .. [ 95%] tests/test_factory.py .. [100%] ====================== 24 passed in 0.64 seconds ======================= If any tests fail, pytest will show the error that was raised. You can run pytest -v to get a list of each test function rather than dots. To measure the code coverage of your tests, use the coverage command to run pytest instead of running it directly. $ coverage run -m pytest You can either view a simple coverage report in the terminal: $ coverage report Name Stmts Miss Branch BrPart Cover \u00b6 flaskr/ init .py 21 0 2 0 100% flaskr/auth.py 54 0 22 0 100% flaskr/blog.py 54 0 16 0 100% flaskr/db.py 24 0 4 0 100% TOTAL 153 0 44 0 100% An HTML report allows you to see which lines were covered in each file: $ coverage html This generates files in the htmlcov directory. Open htmlcov/index.html in your browser to see the report. Continue to Deploy to Production. Deploy to Production This part of the tutorial assumes you have a server that you want to deploy your application to. It gives an overview of how to create the distribution file and install it, but won\u2019t go into specifics about what server or software to use. You can set up a new environment on your development computer to try out the instructions below, but probably shouldn\u2019t use it for hosting a real public application. See Deployment Options for a list of many different ways to host your application. Build and Install When you want to deploy your application elsewhere, you build a distribution file. The current standard for Python distribution is the wheel format, with the .whl extension. Make sure the wheel library is installed first: $ pip install wheel Running setup.py with Python gives you a command line tool to issue build-related commands. The bdist_wheel command will build a wheel distribution file. $ python setup.py bdist_wheel You can find the file in dist/flaskr-1.0.0-py3-none-any.whl. The file name is the name of the project, the version, and some tags about the file can install. Copy this file to another machine, set up a new virtualenv, then install the file with pip. $ pip install flaskr-1.0.0-py3-none-any.whl Pip will install your project along with its dependencies. Since this is a different machine, you need to run init-db again to create the database in the instance folder. $ export FLASK_APP=flaskr $ flask init-db When Flask detects that it\u2019s installed (not in editable mode), it uses a different directory for the instance folder. You can find it at venv/var/flaskr-instance instead. Configure the Secret Key In the beginning of the tutorial that you gave a default value for SECRET_KEY. This should be changed to some random bytes in production. Otherwise, attackers could use the public 'dev' key to modify the session cookie, or anything else that uses the secret key. You can use the following command to output a random secret key: $ python -c 'import os; print(os.urandom(16))' b'_5#y2L\"F4Q8z\\n\\xec]/' Create the config.py file in the instance folder, which the factory will read from if it exists. Copy the generated value into it. venv/var/flaskr-instance/config.py SECRET_KEY = b'_5#y2L\"F4Q8z\\n\\xec]/' You can also set any other necessary configuration here, although SECRET_KEY is the only one needed for Flaskr. Run with a Production Server When running publicly rather than in development, you should not use the built-in development server (flask run). The development server is provided by Werkzeug for convenience, but is not designed to be particularly efficient, stable, or secure. Instead, use a production WSGI server. For example, to use Waitress, first install it in the virtual environment: $ pip install waitress You need to tell Waitress about your application, but it doesn\u2019t use FLASK_APP like flask run does. You need to tell it to import and call the application factory to get an application object. $ waitress-serve --call 'flaskr:create_app' Serving on http://0.0.0.0:8080 See Deployment Options for a list of many different ways to host your application. Waitress is just an example, chosen for the tutorial because it supports both Windows and Linux. There are many more WSGI servers and deployment options that you may choose for your project. Continue to Keep Developing!. Keep Developing! You\u2019ve learned about quite a few Flask and Python concepts throughout the tutorial. Go back and review the tutorial and compare your code with the steps you took to get there. Compare your project to the example project, which might look a bit different due to the step-by-step nature of the tutorial. There\u2019s a lot more to Flask than what you\u2019ve seen so far. Even so, you\u2019re now equipped to start developing your own web applications. Check out the Quickstart for an overview of what Flask can do, then dive into the docs to keep learning. Flask uses Jinja, Click, Werkzeug, and ItsDangerous behind the scenes, and they all have their own documentation too. You\u2019ll also be interested in Extensions which make tasks like working with the database or validating form data easier and more powerful. If you want to keep developing your Flaskr project, here are some ideas for what to try next: A detail view to show a single post . Click a post \u2019 s title to go to its page . Like / unlike a post . Comments . Tags . Clicking a tag shows all the posts with that tag . A search box that filters the index page by name . Paged display . Only show 5 posts per page . Upload an image to go along with a post . Format posts using Markdown . An RSS feed of new posts . Have fun and make awesome applications! This tutorial will walk you through creating a basic blog application called Flaskr. Users will be able to register, log in, create posts, and edit or delete their own posts. You will be able to package and install the application on other computers.","title":"Flask"},{"location":"python/flask/#flask","text":"Welcome to Flask\u2019s documentation. Get started with Installation and then get an overview with the Quickstart. There is also a more detailed Tutorial that shows how to create a small but complete application with Flask. Common patterns are described in the Patterns for Flask section. The rest of the docs describe each component of Flask in detail, with a full reference in the API section. Flask depends on the Jinja template engine and the Werkzeug WSGI toolkit. The documentation for these libraries can be found at: Jinja documentation Werkzeug documentation User\u2019s Guide This part of the documentation, which is mostly prose, begins with some background information about Flask, then focuses on step-by-step instructions for web development with Flask. Foreword Read this before you get started with Flask. This hopefully answers some questions about the purpose and goals of the project, and when you should or should not be using it. What does \u201cmicro\u201d mean? \u201cMicro\u201d does not mean that your whole web application has to fit into a single Python file (although it certainly can), nor does it mean that Flask is lacking in functionality. The \u201cmicro\u201d in microframework means Flask aims to keep the core simple but extensible. Flask won\u2019t make many decisions for you, such as what database to use. Those decisions that it does make, such as what templating engine to use, are easy to change. Everything else is up to you, so that Flask can be everything you need and nothing you don\u2019t. By default, Flask does not include a database abstraction layer, form validation or anything else where different libraries already exist that can handle that. Instead, Flask supports extensions to add such functionality to your application as if it was implemented in Flask itself. Numerous extensions provide database integration, form validation, upload handling, various open authentication technologies, and more. Flask may be \u201cmicro\u201d, but it\u2019s ready for production use on a variety of needs. Configuration and Conventions Flask has many configuration values, with sensible defaults, and a few conventions when getting started. By convention, templates and static files are stored in subdirectories within the application\u2019s Python source tree, with the names templates and static respectively. While this can be changed, you usually don\u2019t have to, especially when getting started. Growing with Flask Once you have Flask up and running, you\u2019ll find a variety of extensions available in the community to integrate your project for production. As your codebase grows, you are free to make the design decisions appropriate for your project. Flask will continue to provide a very simple glue layer to the best that Python has to offer. You can implement advanced patterns in SQLAlchemy or another database tool, introduce non-relational data persistence as appropriate, and take advantage of framework-agnostic tools built for WSGI, the Python web interface. Flask includes many hooks to customize its behavior. Should you need more customization, the Flask class is built for subclassing. If you are interested in that, check out the Becoming Big chapter. If you are curious about the Flask design principles, head over to the section about Design Decisions in Flask. Continue to Installation, the Quickstart, or the Foreword for Experienced Programmers. Foreword for Experienced Programmers Thread-Locals in Flask One of the design decisions in Flask was that simple tasks should be simple; they should not take a lot of code and yet they should not limit you. Because of that, Flask has a few design choices that some people might find surprising or unorthodox. For example, Flask uses thread-local objects internally so that you don\u2019t have to pass objects around from function to function within a request in order to stay threadsafe. This approach is convenient, but requires a valid request context for dependency injection or when attempting to reuse code which uses a value pegged to the request. The Flask project is honest about thread-locals, does not hide them, and calls out in the code and documentation where they are used. Develop for the Web with Caution Always keep security in mind when building web applications. If you write a web application, you are probably allowing users to register and leave their data on your server. The users are entrusting you with data. And even if you are the only user that might leave data in your application, you still want that data to be stored securely. Unfortunately, there are many ways the security of a web application can be compromised. Flask protects you against one of the most common security problems of modern web applications: cross-site scripting (XSS). Unless you deliberately mark insecure HTML as secure, Flask and the underlying Jinja2 template engine have you covered. But there are many more ways to cause security problems. The documentation will warn you about aspects of web development that require attention to security. Some of these security concerns are far more complex than one might think, and we all sometimes underestimate the likelihood that a vulnerability will be exploited - until a clever attacker figures out a way to exploit our applications. And don\u2019t think that your application is not important enough to attract an attacker. Depending on the kind of attack, chances are that automated bots are probing for ways to fill your database with spam, links to malicious software, and the like. Flask is no different from any other framework in that you the developer must build with caution, watching for exploits when building to your requirements. Installation Python Version We recommend using the latest version of Python 3. Flask supports Python 3.5 and newer, Python 2.7, and PyPy. Dependencies These distributions will be installed automatically when installing Flask. Werkzeug implements WSGI , the standard Python interface between applications and servers . Jinja is a template language that renders the pages your application serves . MarkupSafe comes with Jinja . It escapes untrusted input when rendering templates to avoid injection attacks . ItsDangerous securely signs data to ensure its integrity . This is used to protect Flask \u2019 s session cookie . Click is a framework for writing command line applications . It provides the flask command and allows adding custom management commands . Optional dependencies These distributions will not be installed automatically. Flask will detect and use them if you install them. Blinker provides support for Signals . SimpleJSON is a fast JSON implementation that is compatible with Python \u2019 s json module . It is preferred for JSON operations if it is installed . python - dotenv enables support for Environment Variables From dotenv when running flask commands . Watchdog provides a faster , more efficient reloader for the development server . Virtual environments Use a virtual environment to manage the dependencies for your project, both in development and in production. What problem does a virtual environment solve? The more Python projects you have, the more likely it is that you need to work with different versions of Python libraries, or even Python itself. Newer versions of libraries for one project can break compatibility in another project. Virtual environments are independent groups of Python libraries, one for each project. Packages installed for one project will not affect other projects or the operating system\u2019s packages. Python 3 comes bundled with the venv module to create virtual environments. If you\u2019re using a modern version of Python, you can continue on to the next section. If you\u2019re using Python 2, see Install virtualenv first. Create an environment Create a project folder and a venv folder within: $ mkdir myproject $ cd myproject $ python3 -m venv venv On Windows: $ py -3 -m venv venv If you needed to install virtualenv because you are using Python 2, use the following command instead: $ python2 -m virtualenv venv On Windows: \\Python27\\Scripts\\virtualenv.exe venv Activate the environment Before you work on your project, activate the corresponding environment: $ . venv/bin/activate On Windows: venv\\Scripts\\activate Your shell prompt will change to show the name of the activated environment. Install Flask Within the activated environment, use the following command to install Flask: $ pip install Flask Flask is now installed. Check out the Quickstart or go to the Documentation Overview. Living on the edge If you want to work with the latest Flask code before it\u2019s released, install or update the code from the master branch: $ pip install -U https://github.com/pallets/flask/archive/master.tar.gz Install virtualenv If you are using Python 2, the venv module is not available. Instead, install virtualenv. On Linux, virtualenv is provided by your package manager:","title":"Flask"},{"location":"python/flask/#debian-ubuntu","text":"$ sudo apt-get install python-virtualenv","title":"Debian, Ubuntu"},{"location":"python/flask/#centos-fedora","text":"$ sudo yum install python-virtualenv","title":"CentOS, Fedora"},{"location":"python/flask/#arch","text":"$ sudo pacman -S python-virtualenv If you are on Mac OS X or Windows, download get-pip.py, then: $ sudo python2 Downloads/get-pip.py $ sudo python2 -m pip install virtualenv On Windows, as an administrator: \\Python27\\python.exe Downloads\\get-pip.py \\Python27\\python.exe -m pip install virtualenv Now you can return above and Create an environment. Quickstart Eager to get started? This page gives a good introduction to Flask. Follow Installation to set up a project and install Flask first. A Minimal Application A minimal Flask application looks something like this: from flask import Flask from markupsafe import escape app = Flask( name ) @app.route(\"/\") def hello_world(): return f\" Hello, {escape(name)}! \" So what did that code do? First we imported the Flask class . An instance of this class will be our WSGI application . Next we create an instance of this class . The first argument is the name of the application \u2019 s module or package . __name__ is a convenient shortcut for this that is appropriate for most cases . This is needed so that Flask knows where to look for resources such as templates and static files . We then use the route () decorator to tell Flask what URL should trigger our function . The function returns the message we want to display in the user \u2019 s browser . The default content type is HTML , so HTML in the string will be rendered by the browser . Note HTML escaping When returning HTML (the default response type in Flask), any user input rendered in the output must be escaped to protect from injection attacks. HTML templates in Jinja, introduced later, will do this automatically. escape(), shown above, can be used manually. It\u2019s omitted for brevity in the examples below. Save it as hello.py or something similar. Make sure to not call your application flask.py because this would conflict with Flask itself. To run the application, use the flask command or python -m flask. Before you can do that you need to tell your terminal the application to work with by exporting the FLASK_APP environment variable: $ export FLASK_APP=hello.py $ flask run * Running on http://127.0.0.1:5000/ If you are on Windows, the environment variable syntax depends on command line interpreter. On Command Prompt: C:\\path\\to\\app>set FLASK_APP=hello.py And on PowerShell: PS C:\\path\\to\\app> $env:FLASK_APP = \"hello.py\" This launches a very simple builtin server, which is good enough for testing but probably not what you want to use in production. For deployment options see Deployment Options. Now head over to http://127.0.0.1:5000/ , and you should see your hello world greeting. Externally Visible Server If you run the server you will notice that the server is only accessible from your own computer, not from any other in the network. This is the default because in debugging mode a user of the application can execute arbitrary Python code on your computer. If you have the debugger disabled or trust the users on your network, you can make the server publicly available simply by adding --host=0.0.0.0 to the command line: $ flask run --host=0.0.0.0 This tells your operating system to listen on all public IPs. What to do if the Server does not Start In case the python -m flask fails or flask does not exist, there are multiple reasons this might be the case. First of all you need to look at the error message. Old Version of Flask Versions of Flask older than 0.11 use to have different ways to start the application. In short, the flask command did not exist, and neither did python -m flask. In that case you have two options: either upgrade to newer Flask versions or have a look at Development Server to see the alternative method for running a server. Invalid Import Name The FLASK_APP environment variable is the name of the module to import at flask run. In case that module is incorrectly named you will get an import error upon start (or if debug is enabled when you navigate to the application). It will tell you what it tried to import and why it failed. The most common reason is a typo or because you did not actually create an app object. Debug Mode (Want to just log errors and stack traces? See Application Errors) The flask script is nice to start a local development server, but you would have to restart it manually after each change to your code. That is not very nice and Flask can do better. If you enable debug support the server will reload itself on code changes, and it will also provide you with a helpful debugger if things go wrong. To enable all development features (including debug mode) you can export the FLASK_ENV environment variable and set it to development before running the server: $ export FLASK_ENV=development $ flask run (On Windows you need to use set instead of export.) This does the following things: it activates the debugger it activates the automatic reloader it enables the debug mode on the Flask application . You can also control debug mode separately from the environment by exporting FLASK_DEBUG=1. There are more parameters that are explained in Development Server. Attention Even though the interactive debugger does not work in forking environments (which makes it nearly impossible to use on production servers), it still allows the execution of arbitrary code. This makes it a major security risk and therefore it must never be used on production machines. Screenshot of the debugger in action: screenshot of debugger in action More information on using the debugger can be found in the Werkzeug documentation. Have another debugger in mind? See Working with Debuggers. Routing Modern web applications use meaningful URLs to help users. Users are more likely to like a page and come back if the page uses a meaningful URL they can remember and use to directly visit a page. Use the route() decorator to bind a function to a URL. @app.route('/') def index(): return 'Index Page' @app.route('/hello') def hello(): return 'Hello, World' You can do more! You can make parts of the URL dynamic and attach multiple rules to a function. Variable Rules You can add variable sections to a URL by marking sections with . Your function then receives the as a keyword argument. Optionally, you can use a converter to specify the type of the argument like . from markupsafe import escape @app.route('/user/ ') def show_user_profile(username): # show the user profile for that user return f'User {username}' @app.route('/post/ ') def show_post(post_id): # show the post with the given id, the id is an integer return f'Post {post_id}' @app.route('/path/ ') def show_subpath(subpath): # show the subpath after /path/ return f'Subpath {subpath}' Converter types: string (default) accepts any text without a slash int accepts positive integers float accepts positive floating point values path like string but also accepts slashes uuid accepts UUID strings Unique URLs / Redirection Behavior The following two rules differ in their use of a trailing slash. @app.route('/projects/') def projects(): return 'The project page' @app.route('/about') def about(): return 'The about page' The canonical URL for the projects endpoint has a trailing slash. It\u2019s similar to a folder in a file system. If you access the URL without a trailing slash, Flask redirects you to the canonical URL with the trailing slash. The canonical URL for the about endpoint does not have a trailing slash. It\u2019s similar to the pathname of a file. Accessing the URL with a trailing slash produces a 404 \u201cNot Found\u201d error. This helps keep URLs unique for these resources, which helps search engines avoid indexing the same page twice. URL Building To build a URL to a specific function, use the url_for() function. It accepts the name of the function as its first argument and any number of keyword arguments, each corresponding to a variable part of the URL rule. Unknown variable parts are appended to the URL as query parameters. Why would you want to build URLs using the URL reversing function url_for() instead of hard-coding them into your templates? Reversing is often more descriptive than hard - coding the URLs . You can change your URLs in one go instead of needing to remember to manually change hard - coded URLs . URL building handles escaping of special characters and Unicode data transparently . The generated paths are always absolute , avoiding unexpected behavior of relative paths in browsers . If your application is placed outside the URL root , for example , in / myapplication instead of / , url_for () properly handles that for you . For example, here we use the test_request_context() method to try out url_for(). test_request_context() tells Flask to behave as though it\u2019s handling a request even while we use a Python shell. See Context Locals. from flask import url_for @app.route('/') def index(): return 'index' @app.route('/login') def login(): return 'login' @app.route('/user/ ') def profile(username): return f'{username}\\'s profile' with app.test_request_context(): print(url_for('index')) print(url_for('login')) print(url_for('login', next='/')) print(url_for('profile', username='John Doe')) / /login /login?next=/ /user/John%20Doe HTTP Methods Web applications use different HTTP methods when accessing URLs. You should familiarize yourself with the HTTP methods as you work with Flask. By default, a route only answers to GET requests. You can use the methods argument of the route() decorator to handle different HTTP methods. from flask import request @app.route('/login', methods=['GET', 'POST']) def login(): if request.method == 'POST': return do_the_login() else: return show_the_login_form() If GET is present, Flask automatically adds support for the HEAD method and handles HEAD requests according to the HTTP RFC. Likewise, OPTIONS is automatically implemented for you. Static Files Dynamic web applications also need static files. That\u2019s usually where the CSS and JavaScript files are coming from. Ideally your web server is configured to serve them for you, but during development Flask can do that as well. Just create a folder called static in your package or next to your module and it will be available at /static on the application. To generate URLs for static files, use the special 'static' endpoint name: url_for('static', filename='style.css') The file has to be stored on the filesystem as static/style.css. Rendering Templates Generating HTML from within Python is not fun, and actually pretty cumbersome because you have to do the HTML escaping on your own to keep the application secure. Because of that Flask configures the Jinja2 template engine for you automatically. To render a template you can use the render_template() method. All you have to do is provide the name of the template and the variables you want to pass to the template engine as keyword arguments. Here\u2019s a simple example of how to render a template: from flask import render_template @app.route('/hello/') @app.route('/hello/ ') def hello(name=None): return render_template('hello.html', name=name) Flask will look for templates in the templates folder. So if your application is a module, this folder is next to that module, if it\u2019s a package it\u2019s actually inside your package: Case 1: a module: /application.py /templates /hello.html Case 2: a package: /application / init .py /templates /hello.html For templates you can use the full power of Jinja2 templates. Head over to the official Jinja2 Template Documentation for more information. Here is an example template: Hello from Flask {% if name %}","title":"Arch"},{"location":"python/flask/#set-the-secret-key-to-some-random-bytes-keep-this-really-secret","text":"app.secret_key = b'_5#y2L\"F4Q8z\\n\\xec]/' @app.route('/') def index(): if 'username' in session: return f'Logged in as {session[\"username\"]}' return 'You are not logged in' @app.route('/login', methods=['GET', 'POST']) def login(): if request.method == 'POST': session['username'] = request.form['username'] return redirect(url_for('index')) return ''' ''' @app.route('/logout') def logout(): # remove the username from the session if it's there session.pop('username', None) return redirect(url_for('index')) How to generate good secret keys A secret key should be as random as possible. Your operating system has ways to generate pretty random data based on a cryptographic random generator. Use the following command to quickly generate a value for Flask.secret_key (or SECRET_KEY): $ python -c 'import os; print(os.urandom(16))' b'_5#y2L\"F4Q8z\\n\\xec]/' A note on cookie-based sessions: Flask will take the values you put into the session object and serialize them into a cookie. If you are finding some values do not persist across requests, cookies are indeed enabled, and you are not getting a clear error message, check the size of the cookie in your page responses compared to the size supported by web browsers. Besides the default client-side based sessions, if you want to handle sessions on the server-side instead, there are several Flask extensions that support this. Message Flashing Good applications and user interfaces are all about feedback. If the user does not get enough feedback they will probably end up hating the application. Flask provides a really simple way to give feedback to a user with the flashing system. The flashing system basically makes it possible to record a message at the end of a request and access it on the next (and only the next) request. This is usually combined with a layout template to expose the message. To flash a message use the flash() method, to get hold of the messages you can use get_flashed_messages() which is also available in the templates. Check out the Message Flashing for a full example. Logging Changelog Sometimes you might be in a situation where you deal with data that should be correct, but actually is not. For example you may have some client-side code that sends an HTTP request to the server but it\u2019s obviously malformed. This might be caused by a user tampering with the data, or the client code failing. Most of the time it\u2019s okay to reply with 400 Bad Request in that situation, but sometimes that won\u2019t do and the code has to continue working. You may still want to log that something fishy happened. This is where loggers come in handy. As of Flask 0.3 a logger is preconfigured for you to use. Here are some example log calls: app.logger.debug('A value for debugging') app.logger.warning('A warning occurred (%d apples)', 42) app.logger.error('An error occurred') The attached logger is a standard logging Logger, so head over to the official logging docs for more information. Read more on Application Errors. Hooking in WSGI Middleware To add WSGI middleware to your Flask application, wrap the application\u2019s wsgi_app attribute. For example, to apply Werkzeug\u2019s ProxyFix middleware for running behind Nginx: from werkzeug.middleware.proxy_fix import ProxyFix app.wsgi_app = ProxyFix(app.wsgi_app) Wrapping app.wsgi_app instead of app means that app still points at your Flask application, not at the middleware, so you can continue to use and configure app directly. Using Flask Extensions Extensions are packages that help you accomplish common tasks. For example, Flask-SQLAlchemy provides SQLAlchemy support that makes it simple and easy to use with Flask. For more on Flask extensions, have a look at Extensions. Deploying to a Web Server Ready to deploy your new Flask app? Go to Deployment Options. Tutorial Project Layout Create a project directory and enter it: $ mkdir flask-tutorial $ cd flask-tutorial Then follow the installation instructions to set up a Python virtual environment and install Flask for your project. The tutorial will assume you\u2019re working from the flask-tutorial directory from now on. The file names at the top of each code block are relative to this directory. A Flask application can be as simple as a single file. hello.py from flask import Flask app = Flask( name ) @app.route('/') def hello(): return 'Hello, World!' However, as a project gets bigger, it becomes overwhelming to keep all the code in one file. Python projects use packages to organize code into multiple modules that can be imported where needed, and the tutorial will do this as well. The project directory will contain: flaskr / , a Python package containing your application code and files . tests / , a directory containing test modules . venv / , a Python virtual environment where Flask and other dependencies are installed . Installation files telling Python how to install your project . Version control config , such as git . You should make a habit of using some type of version control for all your projects , no matter the size . Any other project files you might add in the future . By the end, your project layout will look like this: /home/user/Projects/flask-tutorial \u251c\u2500\u2500 flaskr/ \u2502 \u251c\u2500\u2500 init .py \u2502 \u251c\u2500\u2500 db.py \u2502 \u251c\u2500\u2500 schema.sql \u2502 \u251c\u2500\u2500 auth.py \u2502 \u251c\u2500\u2500 blog.py \u2502 \u251c\u2500\u2500 templates/ \u2502 \u2502 \u251c\u2500\u2500 base.html \u2502 \u2502 \u251c\u2500\u2500 auth/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 login.html \u2502 \u2502 \u2502 \u2514\u2500\u2500 register.html \u2502 \u2502 \u2514\u2500\u2500 blog/ \u2502 \u2502 \u251c\u2500\u2500 create.html \u2502 \u2502 \u251c\u2500\u2500 index.html \u2502 \u2502 \u2514\u2500\u2500 update.html \u2502 \u2514\u2500\u2500 static/ \u2502 \u2514\u2500\u2500 style.css \u251c\u2500\u2500 tests/ \u2502 \u251c\u2500\u2500 conftest.py \u2502 \u251c\u2500\u2500 data.sql \u2502 \u251c\u2500\u2500 test_factory.py \u2502 \u251c\u2500\u2500 test_db.py \u2502 \u251c\u2500\u2500 test_auth.py \u2502 \u2514\u2500\u2500 test_blog.py \u251c\u2500\u2500 venv/ \u251c\u2500\u2500 setup.py \u2514\u2500\u2500 MANIFEST.in If you\u2019re using version control, the following files that are generated while running your project should be ignored. There may be other files based on the editor you use. In general, ignore files that you didn\u2019t write. For example, with git: .gitignore venv/ *.pyc pycache / instance/ .pytest_cache/ .coverage htmlcov/ dist/ build/ *.egg-info/ Continue to Application Setup. Application Setup A Flask application is an instance of the Flask class. Everything about the application, such as configuration and URLs, will be registered with this class. The most straightforward way to create a Flask application is to create a global Flask instance directly at the top of your code, like how the \u201cHello, World!\u201d example did on the previous page. While this is simple and useful in some cases, it can cause some tricky issues as the project grows. Instead of creating a Flask instance globally, you will create it inside a function. This function is known as the application factory. Any configuration, registration, and other setup the application needs will happen inside the function, then the application will be returned. The Application Factory It\u2019s time to start coding! Create the flaskr directory and add the init .py file. The init .py serves double duty: it will contain the application factory, and it tells Python that the flaskr directory should be treated as a package. $ mkdir flaskr flaskr/ init .py import os from flask import Flask def create_app(test_config=None): # create and configure the app app = Flask( name , instance_relative_config=True) app.config.from_mapping( SECRET_KEY='dev', DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'), ) if test_config is None : # load the instance config , if it exists , when not testing app . config . from_pyfile ( 'config.py' , silent = True ) else : # load the test config if passed in app . config . from_mapping ( test_config ) # ensure the instance folder exists try : os . makedirs ( app . instance_path ) except OSError : pass # a simple page that says hello @app . route ( '/hello' ) def hello () : return 'Hello, World!' return app create_app is the application factory function. You\u2019ll add to it later in the tutorial, but it already does a lot. app = Flask ( __name__ , instance_relative_config = True ) creates the Flask instance . __name__ is the name of the current Python module . The app needs to know where it \u2019 s located to set up some paths , and __name__ is a convenient way to tell it that . instance_relative_config = True tells the app that configuration files are relative to the instance folder . The instance folder is located outside the flaskr package and can hold local data that shouldn \u2019 t be committed to version control , such as configuration secrets and the database file . app . config . from_mapping () sets some default configuration that the app will use : SECRET_KEY is used by Flask and extensions to keep data safe . It \u2019 s set to 'dev' to provide a convenient value during development , but it should be overridden with a random value when deploying . DATABASE is the path where the SQLite database file will be saved . It \u2019 s under app . instance_path , which is the path that Flask has chosen for the instance folder . You \u2019 ll learn more about the database in the next section . app . config . from_pyfile () overrides the default configuration with values taken from the config . py file in the instance folder if it exists . For example , when deploying , this can be used to set a real SECRET_KEY . test_config can also be passed to the factory , and will be used instead of the instance configuration . This is so the tests you \u2019 ll write later in the tutorial can be configured independently of any development values you have configured . os . makedirs () ensures that app . instance_path exists . Flask doesn \u2019 t create the instance folder automatically , but it needs to be created because your project will create the SQLite database file there . @app . route () creates a simple route so you can see the application working before getting into the rest of the tutorial . It creates a connection between the URL / hello and a function that returns a response , the string 'Hello, World!' in this case . Run The Application Now you can run your application using the flask command. From the terminal, tell Flask where to find your application, then run it in development mode. Remember, you should still be in the top-level flask-tutorial directory, not the flaskr package. Development mode shows an interactive debugger whenever a page raises an exception, and restarts the server whenever you make changes to the code. You can leave it running and just reload the browser page as you follow the tutorial. For Linux and Mac: $ export FLASK_APP=flaskr $ export FLASK_ENV=development $ flask run For Windows cmd, use set instead of export: set FLASK_APP=flaskr set FLASK_ENV=development flask run For Windows PowerShell, use $env: instead of export: $env:FLASK_APP = \"flaskr\" $env:FLASK_ENV = \"development\" flask run You\u2019ll see output similar to this: Serving Flask app \"flaskr\" Environment: development Debug mode: on Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) Restarting with stat Debugger is active! Debugger PIN: 855-212-761 Visit http://127.0.0.1:5000/hello in a browser and you should see the \u201cHello, World!\u201d message. Congratulations, you\u2019re now running your Flask web application! Continue to Define and Access the Database. Define and Access the Database The application will use a SQLite database to store users and posts. Python comes with built-in support for SQLite in the sqlite3 module. SQLite is convenient because it doesn\u2019t require setting up a separate database server and is built-in to Python. However, if concurrent requests try to write to the database at the same time, they will slow down as each write happens sequentially. Small applications won\u2019t notice this. Once you become big, you may want to switch to a different database. The tutorial doesn\u2019t go into detail about SQL. If you are not familiar with it, the SQLite docs describe the language. Connect to the Database The first thing to do when working with a SQLite database (and most other Python database libraries) is to create a connection to it. Any queries and operations are performed using the connection, which is closed after the work is finished. In web applications this connection is typically tied to the request. It is created at some point when handling a request, and closed before the response is sent. flaskr/db.py import sqlite3 import click from flask import current_app, g from flask.cli import with_appcontext def get_db(): if 'db' not in g: g.db = sqlite3.connect( current_app.config['DATABASE'], detect_types=sqlite3.PARSE_DECLTYPES ) g.db.row_factory = sqlite3.Row return g.db def close_db(e=None): db = g.pop('db', None) if db is not None: db.close() g is a special object that is unique for each request. It is used to store data that might be accessed by multiple functions during the request. The connection is stored and reused instead of creating a new connection if get_db is called a second time in the same request. current_app is another special object that points to the Flask application handling the request. Since you used an application factory, there is no application object when writing the rest of your code. get_db will be called when the application has been created and is handling a request, so current_app can be used. sqlite3.connect() establishes a connection to the file pointed at by the DATABASE configuration key. This file doesn\u2019t have to exist yet, and won\u2019t until you initialize the database later. sqlite3.Row tells the connection to return rows that behave like dicts. This allows accessing the columns by name. close_db checks if a connection was created by checking if g.db was set. If the connection exists, it is closed. Further down you will tell your application about the close_db function in the application factory so that it is called after each request. Create the Tables In SQLite, data is stored in tables and columns. These need to be created before you can store and retrieve data. Flaskr will store users in the user table, and posts in the post table. Create a file with the SQL commands needed to create empty tables: flaskr/schema.sql DROP TABLE IF EXISTS user; DROP TABLE IF EXISTS post; CREATE TABLE user ( id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT UNIQUE NOT NULL, password TEXT NOT NULL ); CREATE TABLE post ( id INTEGER PRIMARY KEY AUTOINCREMENT, author_id INTEGER NOT NULL, created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, title TEXT NOT NULL, body TEXT NOT NULL, FOREIGN KEY (author_id) REFERENCES user (id) ); Add the Python functions that will run these SQL commands to the db.py file: flaskr/db.py def init_db(): db = get_db() with current_app.open_resource('schema.sql') as f: db.executescript(f.read().decode('utf8')) @click.command('init-db') @with_appcontext def init_db_command(): \"\"\"Clear the existing data and create new tables.\"\"\" init_db() click.echo('Initialized the database.') open_resource() opens a file relative to the flaskr package, which is useful since you won\u2019t necessarily know where that location is when deploying the application later. get_db returns a database connection, which is used to execute the commands read from the file. click.command() defines a command line command called init-db that calls the init_db function and shows a success message to the user. You can read Command Line Interface to learn more about writing commands. Register with the Application The close_db and init_db_command functions need to be registered with the application instance; otherwise, they won\u2019t be used by the application. However, since you\u2019re using a factory function, that instance isn\u2019t available when writing the functions. Instead, write a function that takes an application and does the registration. flaskr/db.py def init_app(app): app.teardown_appcontext(close_db) app.cli.add_command(init_db_command) app.teardown_appcontext() tells Flask to call that function when cleaning up after returning the response. app.cli.add_command() adds a new command that can be called with the flask command. Import and call this function from the factory. Place the new code at the end of the factory function before returning the app. flaskr/ init .py def create_app(): app = ... # existing code omitted from . import db db . init_app ( app ) return app Initialize the Database File Now that init-db has been registered with the app, it can be called using the flask command, similar to the run command from the previous page. Note If you\u2019re still running the server from the previous page, you can either stop the server, or run this command in a new terminal. If you use a new terminal, remember to change to your project directory and activate the env as described in Activate the environment. You\u2019ll also need to set FLASK_APP and FLASK_ENV as shown on the previous page. Run the init-db command: $ flask init-db Initialized the database. There will now be a flaskr.sqlite file in the instance folder in your project. Continue to Blueprints and Views. Blueprints and Views A view function is the code you write to respond to requests to your application. Flask uses patterns to match the incoming request URL to the view that should handle it. The view returns data that Flask turns into an outgoing response. Flask can also go the other direction and generate a URL to a view based on its name and arguments. Create a Blueprint A Blueprint is a way to organize a group of related views and other code. Rather than registering views and other code directly with an application, they are registered with a blueprint. Then the blueprint is registered with the application when it is available in the factory function. Flaskr will have two blueprints, one for authentication functions and one for the blog posts functions. The code for each blueprint will go in a separate module. Since the blog needs to know about authentication, you\u2019ll write the authentication one first. flaskr/auth.py import functools from flask import ( Blueprint, flash, g, redirect, render_template, request, session, url_for ) from werkzeug.security import check_password_hash, generate_password_hash from flaskr.db import get_db bp = Blueprint('auth', name , url_prefix='/auth') This creates a Blueprint named 'auth'. Like the application object, the blueprint needs to know where it\u2019s defined, so name is passed as the second argument. The url_prefix will be prepended to all the URLs associated with the blueprint. Import and register the blueprint from the factory using app.register_blueprint(). Place the new code at the end of the factory function before returning the app. flaskr/ init .py def create_app(): app = ... # existing code omitted from . import auth app . register_blueprint ( auth . bp ) return app The authentication blueprint will have views to register new users and to log in and log out. The First View: Register When the user visits the /auth/register URL, the register view will return HTML with a form for them to fill out. When they submit the form, it will validate their input and either show the form again with an error message or create the new user and go to the login page. For now you will just write the view code. On the next page, you\u2019ll write templates to generate the HTML form. flaskr/auth.py @bp.route('/register', methods=('GET', 'POST')) def register(): if request.method == 'POST': username = request.form['username'] password = request.form['password'] db = get_db() error = None if not username : error = 'Username is required.' elif not password : error = 'Password is required.' elif db . execute ( 'SELECT id FROM user WHERE username = ?' , ( username ,) ). fetchone () is not None : error = 'User {} is already registered.' . format ( username ) if error is None : db . execute ( 'INSERT INTO user (username, password) VALUES (?, ?)' , ( username , generate_password_hash ( password )) ) db . commit () return redirect ( url_for ( 'auth.login' )) flash ( error ) return render_template ( 'auth/register.html' ) Here\u2019s what the register view function is doing: @bp . route associates the URL / register with the register view function . When Flask receives a request to / auth / register , it will call the register view and use the return value as the response . If the user submitted the form , request . method will be 'POST' . In this case , start validating the input . request . form is a special type of dict mapping submitted form keys and values . The user will input their username and password . Validate that username and password are not empty . Validate that username is not already registered by querying the database and checking if a result is returned . db . execute takes a SQL query with ? placeholders for any user input , and a tuple of values to replace the placeholders with . The database library will take care of escaping the values so you are not vulnerable to a SQL injection attack . fetchone () returns one row from the query . If the query returned no results , it returns None . Later , fetchall () is used , which returns a list of all results . If validation succeeds , insert the new user data into the database . For security , passwords should never be stored in the database directly . Instead , generate_password_hash () is used to securely hash the password , and that hash is stored . Since this query modifies data , db . commit () needs to be called afterwards to save the changes . After storing the user , they are redirected to the login page . url_for () generates the URL for the login view based on its name . This is preferable to writing the URL directly as it allows you to change the URL later without changing all code that links to it . redirect () generates a redirect response to the generated URL . If validation fails , the error is shown to the user . flash () stores messages that can be retrieved when rendering the template . When the user initially navigates to auth / register , or there was a validation error , an HTML page with the registration form should be shown . render_template () will render a template containing the HTML , which you \u2019 ll write in the next step of the tutorial . Login This view follows the same pattern as the register view above. flaskr/auth.py @bp.route('/login', methods=('GET', 'POST')) def login(): if request.method == 'POST': username = request.form['username'] password = request.form['password'] db = get_db() error = None user = db.execute( 'SELECT * FROM user WHERE username = ?', (username,) ).fetchone() if user is None : error = 'Incorrect username.' elif not check_password_hash ( user [ 'password' ], password ): error = 'Incorrect password.' if error is None : session . clear () session [ 'user_id' ] = user [ 'id' ] return redirect ( url_for ( 'index' )) flash ( error ) return render_template ( 'auth/login.html' ) There are a few differences from the register view: The user is queried first and stored in a variable for later use . check_password_hash () hashes the submitted password in the same way as the stored hash and securely compares them . If they match , the password is valid . session is a dict that stores data across requests . When validation succeeds , the user \u2019 s id is stored in a new session . The data is stored in a cookie that is sent to the browser , and the browser then sends it back with subsequent requests . Flask securely signs the data so that it can \u2019 t be tampered with . Now that the user\u2019s id is stored in the session, it will be available on subsequent requests. At the beginning of each request, if a user is logged in their information should be loaded and made available to other views. flaskr/auth.py @bp.before_app_request def load_logged_in_user(): user_id = session.get('user_id') if user_id is None: g.user = None else: g.user = get_db().execute( 'SELECT * FROM user WHERE id = ?', (user_id,) ).fetchone() bp.before_app_request() registers a function that runs before the view function, no matter what URL is requested. load_logged_in_user checks if a user id is stored in the session and gets that user\u2019s data from the database, storing it on g.user, which lasts for the length of the request. If there is no user id, or if the id doesn\u2019t exist, g.user will be None. Logout To log out, you need to remove the user id from the session. Then load_logged_in_user won\u2019t load a user on subsequent requests. flaskr/auth.py @bp.route('/logout') def logout(): session.clear() return redirect(url_for('index')) Require Authentication in Other Views Creating, editing, and deleting blog posts will require a user to be logged in. A decorator can be used to check this for each view it\u2019s applied to. flaskr/auth.py def login_required(view): @functools.wraps(view) def wrapped_view(**kwargs): if g.user is None: return redirect(url_for('auth.login')) return view ( ** kwargs ) return wrapped_view This decorator returns a new view function that wraps the original view it\u2019s applied to. The new function checks if a user is loaded and redirects to the login page otherwise. If a user is loaded the original view is called and continues normally. You\u2019ll use this decorator when writing the blog views. Endpoints and URLs The url_for() function generates the URL to a view based on a name and arguments. The name associated with a view is also called the endpoint, and by default it\u2019s the same as the name of the view function. For example, the hello() view that was added to the app factory earlier in the tutorial has the name 'hello' and can be linked to with url_for('hello'). If it took an argument, which you\u2019ll see later, it would be linked to using url_for('hello', who='World'). When using a blueprint, the name of the blueprint is prepended to the name of the function, so the endpoint for the login function you wrote above is 'auth.login' because you added it to the 'auth' blueprint. Continue to Templates. Templates You\u2019ve written the authentication views for your application, but if you\u2019re running the server and try to go to any of the URLs, you\u2019ll see a TemplateNotFound error. That\u2019s because the views are calling render_template(), but you haven\u2019t written the templates yet. The template files will be stored in the templates directory inside the flaskr package. Templates are files that contain static data as well as placeholders for dynamic data. A template is rendered with specific data to produce a final document. Flask uses the Jinja template library to render templates. In your application, you will use templates to render HTML which will display in the user\u2019s browser. In Flask, Jinja is configured to autoescape any data that is rendered in HTML templates. This means that it\u2019s safe to render user input; any characters they\u2019ve entered that could mess with the HTML, such as < and > will be escaped with safe values that look the same in the browser but don\u2019t cause unwanted effects. Jinja looks and behaves mostly like Python. Special delimiters are used to distinguish Jinja syntax from the static data in the template. Anything between {{ and }} is an expression that will be output to the final document. {% and %} denotes a control flow statement like if and for. Unlike Python, blocks are denoted by start and end tags rather than indentation since static text within a block could change indentation. The Base Layout Each page in the application will have the same basic layout around a different body. Instead of writing the entire HTML structure in each template, each template will extend a base template and override specific sections. flaskr/templates/base.html {% block title %}{% endblock %} - Flaskr","title":"Set the secret key to some random bytes. Keep this really secret!"},{"location":"python/flask/#name-stmts-miss-branch-brpart-cover","text":"flaskr/ init .py 21 0 2 0 100% flaskr/auth.py 54 0 22 0 100% flaskr/blog.py 54 0 16 0 100% flaskr/db.py 24 0 4 0 100% TOTAL 153 0 44 0 100% An HTML report allows you to see which lines were covered in each file: $ coverage html This generates files in the htmlcov directory. Open htmlcov/index.html in your browser to see the report. Continue to Deploy to Production. Deploy to Production This part of the tutorial assumes you have a server that you want to deploy your application to. It gives an overview of how to create the distribution file and install it, but won\u2019t go into specifics about what server or software to use. You can set up a new environment on your development computer to try out the instructions below, but probably shouldn\u2019t use it for hosting a real public application. See Deployment Options for a list of many different ways to host your application. Build and Install When you want to deploy your application elsewhere, you build a distribution file. The current standard for Python distribution is the wheel format, with the .whl extension. Make sure the wheel library is installed first: $ pip install wheel Running setup.py with Python gives you a command line tool to issue build-related commands. The bdist_wheel command will build a wheel distribution file. $ python setup.py bdist_wheel You can find the file in dist/flaskr-1.0.0-py3-none-any.whl. The file name is the name of the project, the version, and some tags about the file can install. Copy this file to another machine, set up a new virtualenv, then install the file with pip. $ pip install flaskr-1.0.0-py3-none-any.whl Pip will install your project along with its dependencies. Since this is a different machine, you need to run init-db again to create the database in the instance folder. $ export FLASK_APP=flaskr $ flask init-db When Flask detects that it\u2019s installed (not in editable mode), it uses a different directory for the instance folder. You can find it at venv/var/flaskr-instance instead. Configure the Secret Key In the beginning of the tutorial that you gave a default value for SECRET_KEY. This should be changed to some random bytes in production. Otherwise, attackers could use the public 'dev' key to modify the session cookie, or anything else that uses the secret key. You can use the following command to output a random secret key: $ python -c 'import os; print(os.urandom(16))' b'_5#y2L\"F4Q8z\\n\\xec]/' Create the config.py file in the instance folder, which the factory will read from if it exists. Copy the generated value into it. venv/var/flaskr-instance/config.py SECRET_KEY = b'_5#y2L\"F4Q8z\\n\\xec]/' You can also set any other necessary configuration here, although SECRET_KEY is the only one needed for Flaskr. Run with a Production Server When running publicly rather than in development, you should not use the built-in development server (flask run). The development server is provided by Werkzeug for convenience, but is not designed to be particularly efficient, stable, or secure. Instead, use a production WSGI server. For example, to use Waitress, first install it in the virtual environment: $ pip install waitress You need to tell Waitress about your application, but it doesn\u2019t use FLASK_APP like flask run does. You need to tell it to import and call the application factory to get an application object. $ waitress-serve --call 'flaskr:create_app' Serving on http://0.0.0.0:8080 See Deployment Options for a list of many different ways to host your application. Waitress is just an example, chosen for the tutorial because it supports both Windows and Linux. There are many more WSGI servers and deployment options that you may choose for your project. Continue to Keep Developing!. Keep Developing! You\u2019ve learned about quite a few Flask and Python concepts throughout the tutorial. Go back and review the tutorial and compare your code with the steps you took to get there. Compare your project to the example project, which might look a bit different due to the step-by-step nature of the tutorial. There\u2019s a lot more to Flask than what you\u2019ve seen so far. Even so, you\u2019re now equipped to start developing your own web applications. Check out the Quickstart for an overview of what Flask can do, then dive into the docs to keep learning. Flask uses Jinja, Click, Werkzeug, and ItsDangerous behind the scenes, and they all have their own documentation too. You\u2019ll also be interested in Extensions which make tasks like working with the database or validating form data easier and more powerful. If you want to keep developing your Flaskr project, here are some ideas for what to try next: A detail view to show a single post . Click a post \u2019 s title to go to its page . Like / unlike a post . Comments . Tags . Clicking a tag shows all the posts with that tag . A search box that filters the index page by name . Paged display . Only show 5 posts per page . Upload an image to go along with a post . Format posts using Markdown . An RSS feed of new posts . Have fun and make awesome applications! This tutorial will walk you through creating a basic blog application called Flaskr. Users will be able to register, log in, create posts, and edit or delete their own posts. You will be able to package and install the application on other computers.","title":"Name                 Stmts   Miss Branch BrPart  Cover"},{"location":"python/python/","text":"Python \u00b6 1.\u53c2\u8003\u624b\u518c \u00b6 \u82f1\u6587\u7248 python-3.7.6 \u4e2d\u6587\u7248 python-3.6.3 2.\u722c\u866b \u00b6 Scrapy","title":"Basic"},{"location":"python/python/#python","text":"","title":"Python"},{"location":"python/python/#1","text":"\u82f1\u6587\u7248 python-3.7.6 \u4e2d\u6587\u7248 python-3.6.3","title":"1.\u53c2\u8003\u624b\u518c"},{"location":"python/python/#2","text":"Scrapy","title":"2.\u722c\u866b"},{"location":"python/scrapy/","text":"Scrapy \u00b6 1. Scrapy web site \u00b6","title":"Scrapy"},{"location":"python/scrapy/#scrapy","text":"","title":"Scrapy"},{"location":"python/scrapy/#1scrapy-web-site","text":"","title":"1.Scrapy web site"},{"location":"python/tornado/","text":"Tornado \u00b6","title":"Tornado"},{"location":"python/tornado/#tornado","text":"","title":"Tornado"},{"location":"sci-tools/M/","text":"M \u00b6 Matlab Mathematica","title":"M"},{"location":"sci-tools/M/#m","text":"Matlab Mathematica","title":"M"},{"location":"sci-tools/R/","text":"R \u00b6","title":"R"},{"location":"sci-tools/R/#r","text":"","title":"R"},{"location":"sci-tools/jupyter/","text":"Jupyter \u00b6 Jupyter notebook Jupyter lab Anaconda","title":"Jupyter"},{"location":"sci-tools/jupyter/#jupyter","text":"Jupyter notebook Jupyter lab Anaconda","title":"Jupyter"},{"location":"sci-tools/latex/","text":"Latex \u00b6","title":"Latex"},{"location":"sci-tools/latex/#latex","text":"","title":"Latex"},{"location":"server/apt/","text":"apt /etc/apt/source.list \u00b6 # https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/ deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse # deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse # https://opsx.alibaba.com/mirror deb https://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb https://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse deb https://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse deb https://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse deb https://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse # deb-src https://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse # deb-src https://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse # deb-src https://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse # deb-src https://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse # deb-src https://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse pip .pip \u00b6 [global] timeout = 6000 #douban index-url = http://pypi.douban.com/simple trusted-host = pypi.douban.com #aliyun # index-url = http://mirrors.aliyun.com/pypi/simple/ # trusted-host = mirrors.aliyun.com #ustc # index-url=http://pypi.mirrors.ustc.edu.cn/simple/ # trusted-host =pypi.mirrors.ustc.edu.cn yum \u00b6 ref: \u00b6 [1]. apt [2]. pip","title":"Apt-pip-yum"},{"location":"server/apt/#apt-etcaptsourcelist","text":"# https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/ deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse # deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse # https://opsx.alibaba.com/mirror deb https://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb https://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse deb https://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse deb https://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse deb https://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse # deb-src https://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse # deb-src https://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse # deb-src https://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse # deb-src https://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse # deb-src https://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse","title":"apt /etc/apt/source.list"},{"location":"server/apt/#pip-pip","text":"[global] timeout = 6000 #douban index-url = http://pypi.douban.com/simple trusted-host = pypi.douban.com #aliyun # index-url = http://mirrors.aliyun.com/pypi/simple/ # trusted-host = mirrors.aliyun.com #ustc # index-url=http://pypi.mirrors.ustc.edu.cn/simple/ # trusted-host =pypi.mirrors.ustc.edu.cn","title":"pip .pip"},{"location":"server/apt/#yum","text":"","title":"yum"},{"location":"server/apt/#ref","text":"[1]. apt [2]. pip","title":"ref:"},{"location":"server/bt/","text":"bt \u00b6 offical sit bt on github","title":"DevOps"},{"location":"server/bt/#bt","text":"offical sit bt on github","title":"bt"},{"location":"server/examples/","text":"Linux Commands' Examples \u00b6 1.tar \u00b6 \u538b\u7f29\u6587\u4ef6 \u975e\u6253\u5305 # touch a.c # tar -czvf test.tar.gz a.c //\u538b\u7f29 a.c\u6587\u4ef6\u4e3atest.tar.gz a.c \u5217\u51fa\u538b\u7f29\u6587\u4ef6\u5185\u5bb9 # tar -tzvf test.tar.gz -rw-r--r-- root/root 0 2010-05-24 16:51:59 a.c \u89e3\u538b\u6587\u4ef6 # tar -xzvf test.tar.gz a.c 2.grep \u00b6 grep 'name' -r ./ 3.find \u00b6 find ./ -name 'name' 4.netstat \u00b6 netstat -apn 5.ln \u00b6 ln -s Source Destination 6.cd \u00b6 cd .. 7.cp \u00b6 cp ./* ../ 8.mv \u00b6 mv ./.* ../ 9.rm \u00b6 rm ./* 10.cat \u00b6 cat file 11.touch \u00b6 touch newfile 12.mkdir \u00b6 mkdir -p ./tmp/","title":"Examples"},{"location":"server/examples/#linux-commands-examples","text":"","title":"Linux Commands' Examples"},{"location":"server/examples/#1tar","text":"\u538b\u7f29\u6587\u4ef6 \u975e\u6253\u5305 # touch a.c # tar -czvf test.tar.gz a.c //\u538b\u7f29 a.c\u6587\u4ef6\u4e3atest.tar.gz a.c \u5217\u51fa\u538b\u7f29\u6587\u4ef6\u5185\u5bb9 # tar -tzvf test.tar.gz -rw-r--r-- root/root 0 2010-05-24 16:51:59 a.c \u89e3\u538b\u6587\u4ef6 # tar -xzvf test.tar.gz a.c","title":"1.tar"},{"location":"server/examples/#2grep","text":"grep 'name' -r ./","title":"2.grep"},{"location":"server/examples/#3find","text":"find ./ -name 'name'","title":"3.find"},{"location":"server/examples/#4netstat","text":"netstat -apn","title":"4.netstat"},{"location":"server/examples/#5ln","text":"ln -s Source Destination","title":"5.ln"},{"location":"server/examples/#6cd","text":"cd ..","title":"6.cd"},{"location":"server/examples/#7cp","text":"cp ./* ../","title":"7.cp"},{"location":"server/examples/#8mv","text":"mv ./.* ../","title":"8.mv"},{"location":"server/examples/#9rm","text":"rm ./*","title":"9.rm"},{"location":"server/examples/#10cat","text":"cat file","title":"10.cat"},{"location":"server/examples/#11touch","text":"touch newfile","title":"11.touch"},{"location":"server/examples/#12mkdir","text":"mkdir -p ./tmp/","title":"12.mkdir"},{"location":"server/kvm/","text":"KVM \u00b6","title":"KVM"},{"location":"server/kvm/#kvm","text":"","title":"KVM"},{"location":"server/linux-cmds/","text":"Linux \u547d\u4ee4\u5927\u5168 \u00b6 1\u3001\u6587\u4ef6\u7ba1\u7406 \u00b6 cat chattr chgrp chmod chown cksum cmp diff diffstat file find git gitview indent cut ln less locate lsattr mattrib mc mdel mdir mktemp more mmove mread mren mtools mtoolstest mv od paste patch rcp rm slocate split tee tmpwatch touch umask which cp whereis mcopy mshowfat rhmask scp awk read updatedb 2\u3001\u6587\u6863\u7f16\u8f91 \u00b6 col colrm comm csplit ed egrep ex fgrep fmt fold grep ispell jed joe join look mtype pico rgrep sed sort spell tr expr uniq wc let 3\u3001\u6587\u4ef6\u4f20\u8f93 \u00b6 lprm lpr lpq lpd bye ftp uuto uupick uucp uucico tftp ncftp ftpshut ftpwho ftpcount 4\u3001\u78c1\u76d8\u7ba1\u7406 \u00b6 cd df dirs du edquota eject mcd mdeltree mdu mkdir mlabel mmd mrd mzip pwd quota mount mmount rmdir rmt stat tree umount ls quotacheck quotaoff lndir repquota quotaon 5\u3001\u78c1\u76d8\u7ef4\u62a4 \u00b6 badblocks cfdisk dd e2fsck ext2ed fsck fsck.minix fsconf fdformat hdparm mformat mkbootdisk mkdosfs mke2fs mkfs.ext2 mkfs.msdos mkinitrd mkisofs mkswap mpartition swapon symlinks sync mbadblocks mkfs.minix fsck.ext2 fdisk losetup mkfs sfdisk swapoff 6\u3001\u7f51\u7edc\u901a\u8baf \u00b6 apachectl arpwatch dip getty mingetty uux telnet uulog uustat ppp-off netconfig nc httpd ifconfig minicom mesg dnsconf wall netstat ping pppstats samba setserial talk traceroute tty newaliases uuname netconf write statserial efax pppsetup tcpdump ytalk cu smbd testparm smbclient shapecfg 7\u3001\u7cfb\u7edf\u7ba1\u7406 \u00b6 adduser chfn useradd date exit finger fwhios sleep suspend groupdel groupmod halt kill last lastb login logname logout ps nice procinfo top pstree reboot rlogin rsh sliplogin screen shutdown rwho sudo gitps swatch tload logrotate uname chsh userconf userdel usermod vlock who whoami whois newgrp renice su skill w id groupadd free 8\u3001\u7cfb\u7edf\u8bbe\u7f6e \u00b6 reset clear alias dircolors aumix bind chroot clock crontab declare depmod dmesg enable eval export pwunconv grpconv rpm insmod kbdconfig lilo liloconfig lsmod minfo set modprobe ntsysv mouseconfig passwd pwconv rdate resize rmmod grpunconv modinfo time setup sndconfig setenv setconsole timeconfig ulimit unset chkconfig apmd hwclock mkkickstart fbset unalias SVGATextMode gpasswd 9\u3001\u5907\u4efd\u538b\u7f29 \u00b6 ar bunzip2 bzip2 bzip2recover gunzip unarj compress cpio dump uuencode gzexe gzip lha restore tar uudecode unzip zip zipinfo 10\u3001\u8bbe\u5907\u7ba1\u7406 \u00b6 setleds loadkeys rdev dumpkeys MAKEDEV \u5176\u4ed6\u547d\u4ee4 \u00b6 Linux bc \u547d\u4ee4 Linux tail \u547d\u4ee4 Linux xargs \u547d\u4ee4 \u6269\u5c55\u6587\u7ae0 \u00b6 Linux \u5e38\u7528\u547d\u4ee4\u5168\u62fc ref: \u00b6 [1] https://www.runoob.com/linux/linux-command-manual.html","title":"Linux commands"},{"location":"server/linux-cmds/#linux","text":"","title":"Linux \u547d\u4ee4\u5927\u5168"},{"location":"server/linux-cmds/#1","text":"cat chattr chgrp chmod chown cksum cmp diff diffstat file find git gitview indent cut ln less locate lsattr mattrib mc mdel mdir mktemp more mmove mread mren mtools mtoolstest mv od paste patch rcp rm slocate split tee tmpwatch touch umask which cp whereis mcopy mshowfat rhmask scp awk read updatedb","title":"1\u3001\u6587\u4ef6\u7ba1\u7406"},{"location":"server/linux-cmds/#2","text":"col colrm comm csplit ed egrep ex fgrep fmt fold grep ispell jed joe join look mtype pico rgrep sed sort spell tr expr uniq wc let","title":"2\u3001\u6587\u6863\u7f16\u8f91"},{"location":"server/linux-cmds/#3","text":"lprm lpr lpq lpd bye ftp uuto uupick uucp uucico tftp ncftp ftpshut ftpwho ftpcount","title":"3\u3001\u6587\u4ef6\u4f20\u8f93"},{"location":"server/linux-cmds/#4","text":"cd df dirs du edquota eject mcd mdeltree mdu mkdir mlabel mmd mrd mzip pwd quota mount mmount rmdir rmt stat tree umount ls quotacheck quotaoff lndir repquota quotaon","title":"4\u3001\u78c1\u76d8\u7ba1\u7406"},{"location":"server/linux-cmds/#5","text":"badblocks cfdisk dd e2fsck ext2ed fsck fsck.minix fsconf fdformat hdparm mformat mkbootdisk mkdosfs mke2fs mkfs.ext2 mkfs.msdos mkinitrd mkisofs mkswap mpartition swapon symlinks sync mbadblocks mkfs.minix fsck.ext2 fdisk losetup mkfs sfdisk swapoff","title":"5\u3001\u78c1\u76d8\u7ef4\u62a4"},{"location":"server/linux-cmds/#6","text":"apachectl arpwatch dip getty mingetty uux telnet uulog uustat ppp-off netconfig nc httpd ifconfig minicom mesg dnsconf wall netstat ping pppstats samba setserial talk traceroute tty newaliases uuname netconf write statserial efax pppsetup tcpdump ytalk cu smbd testparm smbclient shapecfg","title":"6\u3001\u7f51\u7edc\u901a\u8baf"},{"location":"server/linux-cmds/#7","text":"adduser chfn useradd date exit finger fwhios sleep suspend groupdel groupmod halt kill last lastb login logname logout ps nice procinfo top pstree reboot rlogin rsh sliplogin screen shutdown rwho sudo gitps swatch tload logrotate uname chsh userconf userdel usermod vlock who whoami whois newgrp renice su skill w id groupadd free","title":"7\u3001\u7cfb\u7edf\u7ba1\u7406"},{"location":"server/linux-cmds/#8","text":"reset clear alias dircolors aumix bind chroot clock crontab declare depmod dmesg enable eval export pwunconv grpconv rpm insmod kbdconfig lilo liloconfig lsmod minfo set modprobe ntsysv mouseconfig passwd pwconv rdate resize rmmod grpunconv modinfo time setup sndconfig setenv setconsole timeconfig ulimit unset chkconfig apmd hwclock mkkickstart fbset unalias SVGATextMode gpasswd","title":"8\u3001\u7cfb\u7edf\u8bbe\u7f6e"},{"location":"server/linux-cmds/#9","text":"ar bunzip2 bzip2 bzip2recover gunzip unarj compress cpio dump uuencode gzexe gzip lha restore tar uudecode unzip zip zipinfo","title":"9\u3001\u5907\u4efd\u538b\u7f29"},{"location":"server/linux-cmds/#10","text":"setleds loadkeys rdev dumpkeys MAKEDEV","title":"10\u3001\u8bbe\u5907\u7ba1\u7406"},{"location":"server/linux-cmds/#_1","text":"Linux bc \u547d\u4ee4 Linux tail \u547d\u4ee4 Linux xargs \u547d\u4ee4","title":"\u5176\u4ed6\u547d\u4ee4"},{"location":"server/linux-cmds/#_2","text":"Linux \u5e38\u7528\u547d\u4ee4\u5168\u62fc","title":"\u6269\u5c55\u6587\u7ae0"},{"location":"server/linux-cmds/#ref","text":"[1] https://www.runoob.com/linux/linux-command-manual.html","title":"ref:"},{"location":"server/linux-shell/","text":"Linux \u00b6 1.sed-grep \u00b6 sed-grep.sh sed -i \"s/vim_runtime/vim/g\" `grep \"vim_runtime\" -rl ./README.md` \u7ecf\u5e38\u8981\u4f7f\u7528\u5230 Linux \u7684\u6279\u91cf\u67e5\u627e\u4e0e\u66ff\u6362\uff0c\u8fd9\u91cc\u6211\u4eec\u4e3a\u5927\u5bb6\u4ecb\u7ecd\u4f7f\u7528 sed \u547d\u4ee4\u6765\u5b9e\u73b0\u67e5\u627e\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u5e76\u66ff\u6362\u3002 \u8bed\u6cd5\u683c\u5f0f \u00b6 sed -i \"s/\u539f\u5b57\u7b26\u4e32/\u65b0\u5b57\u7b26\u4e32/g\" `grep \u539f\u5b57\u7b26\u4e32 -rl \u6240\u5728\u76ee\u5f55` \u5b9e\u4f8b \u00b6 \u4ee5\u4e0b\u6211\u4eec\u5b9e\u73b0\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u67e5\u627e\u5305\u542b \"1\" \u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5b57\u7b26\u4e32 \"1\" \u66ff\u6362\u4e3a \"PARAM\"\uff0c\u6267\u884c\u547d\u4ee4\uff1a sed -i \"s/1/PARAM/g\" `grep \"1\" -rl ./test-webhook.sh` \u63a5\u4e0b\u6765\u4f7f\u7528\u4e00\u4e2a\u66f4\u590d\u6742\u5b9e\u4f8b\uff0c\u6279\u91cf\u66ff\u6362\u7f51\u5740 baidu.com \u4e3a ztloadfield.com\uff1a sed -i \"s/https:\\/\\/baidu.com/https:\\/\\/ztloadfield.com/g\" `grep -rl \"baidu.com\" ./` ----------------^-^-----------------^-^-------------------------------------------- **\u6ce8\u610f\uff1a\u63d2\u5165 '\\'\u7684\u4f4d\u7f6e\uff0c\u5176\u4ed6\u4f4d\u7f6e\u4e0d\u53d8\u3002** 2.git webhook \u00b6 ref: webhook.sh Here is mine: mywebhook.sh #!/bin/bash wc -l << EOF mywebhook.sh control hooks to github Author:dick7 Date:20200307 Config sample: [must] project=YOUR_PROJECT CD=WWW_ROOT [option-default] access_key='KjL3aQB6mvapcokPhOuWJ6NLPACa5QYVZzY1cRtjEp2s3as0' git_server='https://github.com' git_user='dick7' EOF echo \"Some ('push') event(s) makes webhook start!\" echo \"-------------------Start-------------------\" date --date = '0 days ago' \"+%Y-%m-%d %H:%M:%S\" project = $1 # echo \"'project=$project'is the project name on GitHub(git server).\" CD = $2 # echo \"'CD=$CD'is the path to clone.\" access_key = 'KjL3aQB6mvapcokPhOuWJ6NLPACa5QYVZzY1cRtjEp2s3as0' git_server = 'https://github.com' git_user = 'dick7' if [ ! -n \" $project \" ] ; then echo \"project= $project is NULL!\" echo \"--------------------End--------------------\" exit fi if [ ! -n \" $CD \" ] ; then echo \"CD= $CD is NULL!Use $PWD for default.\" CD = $PWD fi printf \" 'project= $project '\\n 'CD= $CD '\\n '0= $0 '\\n '1= $1 '\\n '2= $2 '\\n\" gitLocal = \" $CD / $project \" gitRemote = \" $git_server / $git_user / $project .git\" echo \"gitLocal= $gitLocal \" echo \"gitRemote= $gitRemote \" git_init_pull (){ echo \"Do NOT maintain GIT state!\" echo -e \"Starting 'git_init_pull()'!\\nNeeding:\\n 1.'git init' and\\n 2.'git remote add origin'\" git init git remote add origin $gitRemote echo \"'git pull [master|dev|v0.1|v0.2|v1.0]...' from $gitRemote .\" # git reset --hard origin/master # git pull origin master git pull # git pull --rebase } backup (){ echo \"Starting 'backup()'!\" if [ ! -d ../backup ] ; then mkdir ../backup mv ./* ../backup mv ./.* ../backup else mv ./* ../backup mv ./.* ../backup fi echo \"Already backup to $CD /backup\" #rm -rf ./* #rm -rf ./.* } if [ -d \" $gitLocal \" ] ; then echo \" $gitLocal EXISTs\uff01\" cd $gitLocal p = ` ls -a ` echo -e \"[ $p ]\\n ${# p } \" if test -d .git ; then echo \"Optional 'git branch -l', to see the branch list.\" git branch -l #git pull origin master git pull elif [ ${# p } -lt 5 ] ; then git_init_pull else echo \"There is other file(s),backup or remove.\" backup git_init_pull fi echo -e \"Change $gitLocal own rights to 'www:www'.\" echo -e \"NOTICE: the 'git status' will change to 'modified' or 'deleted'!\" chown -R www:www $gitLocal > /dev/null 2 > & 1 echo \"--------------------End--------------------\" exit else echo -e \" $gitLocal does NOT EXIST!\\n'git clone $gitRemote ' directly!\" git clone $gitRemote $gitLocal echo \"--------------------End--------------------\" exit fi 3.File Operation \u00b6 Check File/Directory Mode(s) [Situation/ is Empity?/ is NULL] 3.1 if/for/test/array/case...esac/$#/string \u00b6 ~/mylf.sh #!/bin/bash # Generate test files # for (( i=0;i<5;i++ )); do touch tmp-$i.txt;done # for (( i=0;i<5;i++ )); do touch tmp-$i.txt; echo 'test'-$i >> tmp-$i.txt;done echo \"Number of params= $# \" echo -e \"Run file= $0 \\nParam= $1 \" if [ 1 -gt $# ] ; then echo \"No param input!Only need one!\" exit fi if [ 1 -lt $# ] ; then echo 'Too many params!Only need one!' exit fi fm =( '-e' '-b' '-c' '-d' '-f' '-g' '-k' '-p' '-u' '-r' '-w' '-x' '-s' '-S' '-L' ) # echo ${fm[1]} # echo ${fm} # echo ${fm[*]} # echo ${#fm[@]} count = 0 ml = \"\" for m in ${ fm [*] } do if [ ! -e $1 ] ; then echo \" $1 does NOT exist.\" exit fi if [ $m $1 ] ; then count = ` expr $count + 1 ` ml = \" $ml \" ' ' \" $m \" # echo \"$1 has $m mode!\" fi done echo -e \"ml= $ml \\ncount= $count \" if [[ ${# ml } -lt 1 || $count -eq 0 ]] ; then echo \" $1 has spacial mode.\" exit fi for m in ${ ml [*] } do case $m in '-e' ) echo \"-e : $1 exists.\" # continue ;; '-d' ) echo \"-d : $1 is DIR.\" p = ` ls -a $1 ` if [ ${# p } -lt 5 ] ; then echo -e \" $1 is an empity DIR!But NOT a NULL DIR,it contains:\\n[ $p ]!\" else # ls -a $1 # echo $p continue fi ;; '-f' ) echo \"-f : $1 is common file Nither DIR nor DEVICE.\" p = ` cat $1 ` if [ ${# p } -eq 0 ] ; then echo \" $1 is NULL common file.\" fi # cat $1 ;; '-s' ) echo \"-s : $1 NOT NULL.\" # cat $1 ;; '-x' ) echo \"-x : $1 is an EXEC RUN file.\" ;; '-r' ) echo \"-r : $1 is Readable.\" ;; '-w' ) echo \"-w : $1 is Writeable.\" ;; '-b' | '-c' | '-g' | '-k' | '-p' | 'u' ) echo \"'-b'|'-c'|'-g'|'-k'|'-p'|'u' : $1 is something else,such as BLOCKSET, CHARSET, SGID, Sticky Bit, Panel, SUID.\" ;; '-S' ) echo \"-S : $1 is a Socket.\" ;; '-L' ) echo \"-L : $1 is a Symbol Link.\" ;; * ) echo \" $1 does NOT exist, or is something unknown.\" break ;; esac done 3.2 if/$#/-gt/-e.../|| \u00b6 ~/test-file.sh #!/bin/bash # for (( i=0;i<5;i++ )); do touch tmp-$i.txt;done # for (( i=0;i<5;i++ )); do touch tmp-$i.txt; echo 'test'-$i >> tmp-$i.txt;done echo \" $# \" echo -e \" $0 \\n $1 \\n $2 \" if [ 1 -gt $# ] ; then echo \"No param input!Only need one!\" exit fi if [ 1 -lt $# ] ; then echo 'Too many params!Only need one!' exit fi if [ -e $1 ] ; then echo $1 ' exists!' else echo $1 ' NOT exists!' exit fi if [ -d $1 ] ; then echo $1 ' is DIR.' p = ` ls -a $1 ` if [ ${# p } -lt 5 ] ; then echo $1 ' is NULL DIR!' else ls -a $1 fi exit else echo $1 ' is NOT DIR.' fi if [ -f $1 ] ; then echo $1 ' is common file Nither DIR nor device.' if [ -s $1 ] ; then echo $1 ' NOT NULL.' if [ -x $1 ] ; then echo $1 ' is RUN file.' exit else cat $1 exit fi else echo $1 ' is NULL file.' exit fi else if [[ -b $1 || -c $1 || -g $1 || -k $1 || -p $1 || -u $1 ]] ; then echo $1 ' is something else.' exit fi echo $1 ' is something unknown.' exit fi 4.scp \u00b6 sshpass - p \"dick@206530\" scp - r . vim root @121.43.154.253 :/ root scp root @106.13.213.177 :/ www / wwwroot / ftp / tmp_aria2 / StormOnline - master . zip . # cd /mnt/d/backups/linux/zt-aliyun # sshpass -p \u201cpassword\u201d rsync -avz --delete root@121.43.154.253:/ . 5.rsync \u00b6 echo '# 1. \u5907\u4efd : zt - bd - yun ' cd / mnt / d / backups / linux / zt - bd - yun # sshpass -p \u201cpassword\u201d rsync -avz --delete root@106.13.213.177:/www/wwwroot/ftp . nohup sshpass - p \u201c dick @206530 \u201d rsync - avz root @106.13.213.177 :/ www . & echo '# 2. \u5907\u4efd : zt - aliyun ' cd / mnt / d / backups / linux / zt - aliyun nohup sshpass - p \u201c dick @206530 \u201d rsync - avz root @121.43.154.253 :/ www . & #!/bin/bash 6.connect mysql \u00b6 sudo sshpass - p 123 / etc / init . d / mysql restart # sudo sshpass - p 123 mysql - u root - p dbname < * . sql sudo sshpass - p 123 mysql - u root - p 7.kill ps \u00b6 ps -ef|grep flask|awk {print }|xargs kill -9 8.pause \u00b6 #!/bin/bash read -p 'Input pause time:' ipt ti1 = ` date +%s ` #\u83b7\u53d6\u65f6\u95f4\u6233 ti2 = ` date +%s ` i = $(( $ti2 - $ti1 )) while [[ \" $i \" -ne \" $ipt \" ]] do ti2 = ` date +%s ` i = $(( $ti2 - $ti1 )) done echo \"Pause $ipt (s), over,then start!\"","title":"Linux shell"},{"location":"server/linux-shell/#linux","text":"","title":"Linux"},{"location":"server/linux-shell/#1sed-grep","text":"sed-grep.sh sed -i \"s/vim_runtime/vim/g\" `grep \"vim_runtime\" -rl ./README.md` \u7ecf\u5e38\u8981\u4f7f\u7528\u5230 Linux \u7684\u6279\u91cf\u67e5\u627e\u4e0e\u66ff\u6362\uff0c\u8fd9\u91cc\u6211\u4eec\u4e3a\u5927\u5bb6\u4ecb\u7ecd\u4f7f\u7528 sed \u547d\u4ee4\u6765\u5b9e\u73b0\u67e5\u627e\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u5e76\u66ff\u6362\u3002","title":"1.sed-grep"},{"location":"server/linux-shell/#_1","text":"sed -i \"s/\u539f\u5b57\u7b26\u4e32/\u65b0\u5b57\u7b26\u4e32/g\" `grep \u539f\u5b57\u7b26\u4e32 -rl \u6240\u5728\u76ee\u5f55`","title":"\u8bed\u6cd5\u683c\u5f0f"},{"location":"server/linux-shell/#_2","text":"\u4ee5\u4e0b\u6211\u4eec\u5b9e\u73b0\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u67e5\u627e\u5305\u542b \"1\" \u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5b57\u7b26\u4e32 \"1\" \u66ff\u6362\u4e3a \"PARAM\"\uff0c\u6267\u884c\u547d\u4ee4\uff1a sed -i \"s/1/PARAM/g\" `grep \"1\" -rl ./test-webhook.sh` \u63a5\u4e0b\u6765\u4f7f\u7528\u4e00\u4e2a\u66f4\u590d\u6742\u5b9e\u4f8b\uff0c\u6279\u91cf\u66ff\u6362\u7f51\u5740 baidu.com \u4e3a ztloadfield.com\uff1a sed -i \"s/https:\\/\\/baidu.com/https:\\/\\/ztloadfield.com/g\" `grep -rl \"baidu.com\" ./` ----------------^-^-----------------^-^-------------------------------------------- **\u6ce8\u610f\uff1a\u63d2\u5165 '\\'\u7684\u4f4d\u7f6e\uff0c\u5176\u4ed6\u4f4d\u7f6e\u4e0d\u53d8\u3002**","title":"\u5b9e\u4f8b"},{"location":"server/linux-shell/#2git-webhook","text":"ref: webhook.sh Here is mine: mywebhook.sh #!/bin/bash wc -l << EOF mywebhook.sh control hooks to github Author:dick7 Date:20200307 Config sample: [must] project=YOUR_PROJECT CD=WWW_ROOT [option-default] access_key='KjL3aQB6mvapcokPhOuWJ6NLPACa5QYVZzY1cRtjEp2s3as0' git_server='https://github.com' git_user='dick7' EOF echo \"Some ('push') event(s) makes webhook start!\" echo \"-------------------Start-------------------\" date --date = '0 days ago' \"+%Y-%m-%d %H:%M:%S\" project = $1 # echo \"'project=$project'is the project name on GitHub(git server).\" CD = $2 # echo \"'CD=$CD'is the path to clone.\" access_key = 'KjL3aQB6mvapcokPhOuWJ6NLPACa5QYVZzY1cRtjEp2s3as0' git_server = 'https://github.com' git_user = 'dick7' if [ ! -n \" $project \" ] ; then echo \"project= $project is NULL!\" echo \"--------------------End--------------------\" exit fi if [ ! -n \" $CD \" ] ; then echo \"CD= $CD is NULL!Use $PWD for default.\" CD = $PWD fi printf \" 'project= $project '\\n 'CD= $CD '\\n '0= $0 '\\n '1= $1 '\\n '2= $2 '\\n\" gitLocal = \" $CD / $project \" gitRemote = \" $git_server / $git_user / $project .git\" echo \"gitLocal= $gitLocal \" echo \"gitRemote= $gitRemote \" git_init_pull (){ echo \"Do NOT maintain GIT state!\" echo -e \"Starting 'git_init_pull()'!\\nNeeding:\\n 1.'git init' and\\n 2.'git remote add origin'\" git init git remote add origin $gitRemote echo \"'git pull [master|dev|v0.1|v0.2|v1.0]...' from $gitRemote .\" # git reset --hard origin/master # git pull origin master git pull # git pull --rebase } backup (){ echo \"Starting 'backup()'!\" if [ ! -d ../backup ] ; then mkdir ../backup mv ./* ../backup mv ./.* ../backup else mv ./* ../backup mv ./.* ../backup fi echo \"Already backup to $CD /backup\" #rm -rf ./* #rm -rf ./.* } if [ -d \" $gitLocal \" ] ; then echo \" $gitLocal EXISTs\uff01\" cd $gitLocal p = ` ls -a ` echo -e \"[ $p ]\\n ${# p } \" if test -d .git ; then echo \"Optional 'git branch -l', to see the branch list.\" git branch -l #git pull origin master git pull elif [ ${# p } -lt 5 ] ; then git_init_pull else echo \"There is other file(s),backup or remove.\" backup git_init_pull fi echo -e \"Change $gitLocal own rights to 'www:www'.\" echo -e \"NOTICE: the 'git status' will change to 'modified' or 'deleted'!\" chown -R www:www $gitLocal > /dev/null 2 > & 1 echo \"--------------------End--------------------\" exit else echo -e \" $gitLocal does NOT EXIST!\\n'git clone $gitRemote ' directly!\" git clone $gitRemote $gitLocal echo \"--------------------End--------------------\" exit fi","title":"2.git webhook"},{"location":"server/linux-shell/#3file-operation","text":"Check File/Directory Mode(s) [Situation/ is Empity?/ is NULL]","title":"3.File Operation"},{"location":"server/linux-shell/#31-iffortestarraycaseesacstring","text":"~/mylf.sh #!/bin/bash # Generate test files # for (( i=0;i<5;i++ )); do touch tmp-$i.txt;done # for (( i=0;i<5;i++ )); do touch tmp-$i.txt; echo 'test'-$i >> tmp-$i.txt;done echo \"Number of params= $# \" echo -e \"Run file= $0 \\nParam= $1 \" if [ 1 -gt $# ] ; then echo \"No param input!Only need one!\" exit fi if [ 1 -lt $# ] ; then echo 'Too many params!Only need one!' exit fi fm =( '-e' '-b' '-c' '-d' '-f' '-g' '-k' '-p' '-u' '-r' '-w' '-x' '-s' '-S' '-L' ) # echo ${fm[1]} # echo ${fm} # echo ${fm[*]} # echo ${#fm[@]} count = 0 ml = \"\" for m in ${ fm [*] } do if [ ! -e $1 ] ; then echo \" $1 does NOT exist.\" exit fi if [ $m $1 ] ; then count = ` expr $count + 1 ` ml = \" $ml \" ' ' \" $m \" # echo \"$1 has $m mode!\" fi done echo -e \"ml= $ml \\ncount= $count \" if [[ ${# ml } -lt 1 || $count -eq 0 ]] ; then echo \" $1 has spacial mode.\" exit fi for m in ${ ml [*] } do case $m in '-e' ) echo \"-e : $1 exists.\" # continue ;; '-d' ) echo \"-d : $1 is DIR.\" p = ` ls -a $1 ` if [ ${# p } -lt 5 ] ; then echo -e \" $1 is an empity DIR!But NOT a NULL DIR,it contains:\\n[ $p ]!\" else # ls -a $1 # echo $p continue fi ;; '-f' ) echo \"-f : $1 is common file Nither DIR nor DEVICE.\" p = ` cat $1 ` if [ ${# p } -eq 0 ] ; then echo \" $1 is NULL common file.\" fi # cat $1 ;; '-s' ) echo \"-s : $1 NOT NULL.\" # cat $1 ;; '-x' ) echo \"-x : $1 is an EXEC RUN file.\" ;; '-r' ) echo \"-r : $1 is Readable.\" ;; '-w' ) echo \"-w : $1 is Writeable.\" ;; '-b' | '-c' | '-g' | '-k' | '-p' | 'u' ) echo \"'-b'|'-c'|'-g'|'-k'|'-p'|'u' : $1 is something else,such as BLOCKSET, CHARSET, SGID, Sticky Bit, Panel, SUID.\" ;; '-S' ) echo \"-S : $1 is a Socket.\" ;; '-L' ) echo \"-L : $1 is a Symbol Link.\" ;; * ) echo \" $1 does NOT exist, or is something unknown.\" break ;; esac done","title":"3.1 if/for/test/array/case...esac/$#/string"},{"location":"server/linux-shell/#32-if-gt-e","text":"~/test-file.sh #!/bin/bash # for (( i=0;i<5;i++ )); do touch tmp-$i.txt;done # for (( i=0;i<5;i++ )); do touch tmp-$i.txt; echo 'test'-$i >> tmp-$i.txt;done echo \" $# \" echo -e \" $0 \\n $1 \\n $2 \" if [ 1 -gt $# ] ; then echo \"No param input!Only need one!\" exit fi if [ 1 -lt $# ] ; then echo 'Too many params!Only need one!' exit fi if [ -e $1 ] ; then echo $1 ' exists!' else echo $1 ' NOT exists!' exit fi if [ -d $1 ] ; then echo $1 ' is DIR.' p = ` ls -a $1 ` if [ ${# p } -lt 5 ] ; then echo $1 ' is NULL DIR!' else ls -a $1 fi exit else echo $1 ' is NOT DIR.' fi if [ -f $1 ] ; then echo $1 ' is common file Nither DIR nor device.' if [ -s $1 ] ; then echo $1 ' NOT NULL.' if [ -x $1 ] ; then echo $1 ' is RUN file.' exit else cat $1 exit fi else echo $1 ' is NULL file.' exit fi else if [[ -b $1 || -c $1 || -g $1 || -k $1 || -p $1 || -u $1 ]] ; then echo $1 ' is something else.' exit fi echo $1 ' is something unknown.' exit fi","title":"3.2 if/$#/-gt/-e.../||"},{"location":"server/linux-shell/#4scp","text":"sshpass - p \"dick@206530\" scp - r . vim root @121.43.154.253 :/ root scp root @106.13.213.177 :/ www / wwwroot / ftp / tmp_aria2 / StormOnline - master . zip . # cd /mnt/d/backups/linux/zt-aliyun # sshpass -p \u201cpassword\u201d rsync -avz --delete root@121.43.154.253:/ .","title":"4.scp"},{"location":"server/linux-shell/#5rsync","text":"echo '# 1. \u5907\u4efd : zt - bd - yun ' cd / mnt / d / backups / linux / zt - bd - yun # sshpass -p \u201cpassword\u201d rsync -avz --delete root@106.13.213.177:/www/wwwroot/ftp . nohup sshpass - p \u201c dick @206530 \u201d rsync - avz root @106.13.213.177 :/ www . & echo '# 2. \u5907\u4efd : zt - aliyun ' cd / mnt / d / backups / linux / zt - aliyun nohup sshpass - p \u201c dick @206530 \u201d rsync - avz root @121.43.154.253 :/ www . & #!/bin/bash","title":"5.rsync"},{"location":"server/linux-shell/#6connect-mysql","text":"sudo sshpass - p 123 / etc / init . d / mysql restart # sudo sshpass - p 123 mysql - u root - p dbname < * . sql sudo sshpass - p 123 mysql - u root - p","title":"6.connect mysql"},{"location":"server/linux-shell/#7kill-ps","text":"ps -ef|grep flask|awk {print }|xargs kill -9","title":"7.kill ps"},{"location":"server/linux-shell/#8pause","text":"#!/bin/bash read -p 'Input pause time:' ipt ti1 = ` date +%s ` #\u83b7\u53d6\u65f6\u95f4\u6233 ti2 = ` date +%s ` i = $(( $ti2 - $ti1 )) while [[ \" $i \" -ne \" $ipt \" ]] do ti2 = ` date +%s ` i = $(( $ti2 - $ti1 )) done echo \"Pause $ipt (s), over,then start!\"","title":"8.pause"},{"location":"server/nginx/","text":"Configration \u00b6 Templates \u00b6 master \u00b6 user www www ; worker_processes auto ; error_log / www / wwwlogs / nginx_error . log crit ; pid / www / server / nginx / logs / nginx . pid ; worker_rlimit_nofile 51200 ; events { use epoll ; worker_connections 51200 ; multi_accept on ; } http { include mime.types ; #include luawaf.conf ; include proxy.conf ; default_type application/octet-stream ; server_names_hash_bucket_size 512 ; client_header_buffer_size 32k ; large_client_header_buffers 4 32k ; client_max_body_size 50m ; sendfile on ; tcp_nopush on ; keepalive_timeout 60 ; tcp_nodelay on ; fastcgi_connect_timeout 300 ; fastcgi_send_timeout 300 ; fastcgi_read_timeout 300 ; fastcgi_buffer_size 64k ; fastcgi_buffers 4 64k ; fastcgi_busy_buffers_size 128k ; fastcgi_temp_file_write_size 256k ; fastcgi_intercept_errors on ; gzip on ; gzip_min_length 1k ; gzip_buffers 4 16k ; gzip_http_version 1.1 ; gzip_comp_level 2 ; gzip_types text/plain application/javascript application/x-javascript text/javascript text/css application/xml ; gzip_vary on ; gzip_proxied expired no-cache no-store private auth ; gzip_disable \"MSIE [ 1 - 6 ] \\.\" ; limit_conn_zone $binary_remote_addr zone= perip : 10 m ; limit_conn_zone $server_name zone= perserver : 10 m ; server_tokens off ; access_log off ; server { listen 888 ; server_name phpmyadmin ; index index.html index.htm index.php ; root /www/server/phpmyadmin ; #error_page 404 /404.html ; include enable-php.conf ; location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$ { expires 30d ; } location ~ .* \\ .( js | css )?$ { expires 12h ; } location ~ / \\ . { deny all ; } access_log / www / wwwlogs / access . log ; } include / www / server / panel / vhost / nginx /* . conf ; } worker \u00b6 Transfer uwsgi_pass of flask-osroom \u00b6 server { # \u76d1\u542c80\u7aef\u7aef\u53e3 listen 80; listen [::]:80; server_name dev.ztloadfield.com 121.43.154.253; gzip on; gzip_comp_level 5; gzip_types application/json text/plain application/javascript application/x-javascript text/javascript text/xml text/css; open_log_file_cache max=1000 inactive=20s valid=1m min_uses=2; access_log /www/wwwlogs/dev.ztloadfield.com.log; error_log /www/wwwlogs/dev.ztloadfield.com.error.log; location / { include uwsgi_params; # upstream \u7684\u90a3\u4e2a\u540d\u79f0 uwsgi_pass 127.0.0.1:5000; # python\u865a\u62df\u73af\u5883\u76ee\u5f55\u8def\u5f84 # uwsgi_param UWSGI:_PYHOME /www/wwwroot/venv; # \u9879\u76ee\u76ee\u5f55\u8def\u5f84 # uwsgi_param UWSGI_CHDIR /www/wwwroot/ztloadfield.com/dev/osroom; # uwsgi_param UWSGI_SCRIPT start:app; } } Transfer proxy_pass without uwsgi of flask-minimal \u00b6 server { listen 8765 ; listen [ :: ] : 8765 ; server_name 121.43.154.253 ; # server_name 121.43.154.253 ; # test.ztloadfield.com index index.html index.htm default.htm default.html ; root /www/wwwroot/ztloadfield.com/test/flaskapp ; location / { proxy_set_header X-Forwarded-Host $host ; proxy_set_header X-Forwarded-Server $host ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_pass http : // 127.0.0.1 : 5050 / ; } access_log / www / wwwlogs / test . ztloadfield . com . log ; error_log / www / wwwlogs / test . ztloadfield . com . error . log ; } Transfer PHP-site \u00b6 server { listen 80 ; listen [::]: 80 ; server_name blog . new - realm . cn ; index index . php index . html index . htm default . php default . htm default . html ; root / www / wwwroot / new - realm . cn / blog ; # SSL - START SSL\u76f8\u5173\u914d\u7f6e \uff0c\u8bf7\u52ff\u5220\u9664\u6216\u4fee\u6539\u4e0b\u4e00\u884c\u5e26\u6ce8\u91ca\u7684 404 \u89c4\u5219 # error_page 404 / 404 . html ; # SSL - END # ERROR - PAGE - START \u9519\u8bef\u9875\u914d\u7f6e\uff0c\u53ef\u4ee5\u6ce8\u91ca\u3001\u5220\u9664\u6216\u4fee\u6539 # error_page 404 / 404 . html ; # error_page 502 / 502 . html ; # ERROR - PAGE - END # PHP - INFO - START PHP\u5f15\u7528\u914d\u7f6e \uff0c\u53ef\u4ee5\u6ce8\u91ca\u6216\u4fee\u6539 include enable - php - 71 . conf ; # PHP - INFO - END # REWRITE - START URL\u91cd\u5199\u89c4\u5219\u5f15\u7528 , \u4fee\u6539\u540e\u5c06\u5bfc\u81f4\u9762\u677f\u8bbe\u7f6e\u7684\u4f2a\u9759\u6001\u89c4\u5219\u5931\u6548 include / www / server / panel / vhost / rewrite / blog . new - realm . cn . conf ; # REWRITE - END # \u7981\u6b62\u8bbf\u95ee\u7684\u6587\u4ef6\u6216\u76ee\u5f55 location ~ ^/ ( \\ . user . ini | \\ . htaccess | \\ . git | \\ . svn | \\ . project | LICENSE | README . md ) { return 404 ; } # \u4e00\u952e\u7533\u8bf7 SSL\u8bc1\u4e66\u9a8c\u8bc1\u76ee\u5f55\u76f8\u5173\u8bbe\u7f6e location ~ \\ . well - known { allow all ; } location ~ . * \\ .( gif | jpg | jpeg | png | bmp | swf ) $ { expires 30 d ; error_log off ; access_log / dev / null ; } location ~ . * \\ .( js | css ) ? $ { expires 12 h ; error_log off ; access_log / dev / null ; } access_log / www / wwwlogs / blog . new - realm . cn . log ; error_log / www / wwwlogs / blog . new - realm . cn . error . log ; }","title":"Nginx"},{"location":"server/nginx/#configration","text":"","title":"Configration"},{"location":"server/nginx/#templates","text":"","title":"Templates"},{"location":"server/nginx/#master","text":"user www www ; worker_processes auto ; error_log / www / wwwlogs / nginx_error . log crit ; pid / www / server / nginx / logs / nginx . pid ; worker_rlimit_nofile 51200 ; events { use epoll ; worker_connections 51200 ; multi_accept on ; } http { include mime.types ; #include luawaf.conf ; include proxy.conf ; default_type application/octet-stream ; server_names_hash_bucket_size 512 ; client_header_buffer_size 32k ; large_client_header_buffers 4 32k ; client_max_body_size 50m ; sendfile on ; tcp_nopush on ; keepalive_timeout 60 ; tcp_nodelay on ; fastcgi_connect_timeout 300 ; fastcgi_send_timeout 300 ; fastcgi_read_timeout 300 ; fastcgi_buffer_size 64k ; fastcgi_buffers 4 64k ; fastcgi_busy_buffers_size 128k ; fastcgi_temp_file_write_size 256k ; fastcgi_intercept_errors on ; gzip on ; gzip_min_length 1k ; gzip_buffers 4 16k ; gzip_http_version 1.1 ; gzip_comp_level 2 ; gzip_types text/plain application/javascript application/x-javascript text/javascript text/css application/xml ; gzip_vary on ; gzip_proxied expired no-cache no-store private auth ; gzip_disable \"MSIE [ 1 - 6 ] \\.\" ; limit_conn_zone $binary_remote_addr zone= perip : 10 m ; limit_conn_zone $server_name zone= perserver : 10 m ; server_tokens off ; access_log off ; server { listen 888 ; server_name phpmyadmin ; index index.html index.htm index.php ; root /www/server/phpmyadmin ; #error_page 404 /404.html ; include enable-php.conf ; location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$ { expires 30d ; } location ~ .* \\ .( js | css )?$ { expires 12h ; } location ~ / \\ . { deny all ; } access_log / www / wwwlogs / access . log ; } include / www / server / panel / vhost / nginx /* . conf ; }","title":"master"},{"location":"server/nginx/#worker","text":"","title":"worker"},{"location":"server/nginx/#transfer-uwsgi_pass-of-flask-osroom","text":"server { # \u76d1\u542c80\u7aef\u7aef\u53e3 listen 80; listen [::]:80; server_name dev.ztloadfield.com 121.43.154.253; gzip on; gzip_comp_level 5; gzip_types application/json text/plain application/javascript application/x-javascript text/javascript text/xml text/css; open_log_file_cache max=1000 inactive=20s valid=1m min_uses=2; access_log /www/wwwlogs/dev.ztloadfield.com.log; error_log /www/wwwlogs/dev.ztloadfield.com.error.log; location / { include uwsgi_params; # upstream \u7684\u90a3\u4e2a\u540d\u79f0 uwsgi_pass 127.0.0.1:5000; # python\u865a\u62df\u73af\u5883\u76ee\u5f55\u8def\u5f84 # uwsgi_param UWSGI:_PYHOME /www/wwwroot/venv; # \u9879\u76ee\u76ee\u5f55\u8def\u5f84 # uwsgi_param UWSGI_CHDIR /www/wwwroot/ztloadfield.com/dev/osroom; # uwsgi_param UWSGI_SCRIPT start:app; } }","title":"Transfer uwsgi_pass of flask-osroom"},{"location":"server/nginx/#transfer-proxy_pass-without-uwsgi-of-flask-minimal","text":"server { listen 8765 ; listen [ :: ] : 8765 ; server_name 121.43.154.253 ; # server_name 121.43.154.253 ; # test.ztloadfield.com index index.html index.htm default.htm default.html ; root /www/wwwroot/ztloadfield.com/test/flaskapp ; location / { proxy_set_header X-Forwarded-Host $host ; proxy_set_header X-Forwarded-Server $host ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_pass http : // 127.0.0.1 : 5050 / ; } access_log / www / wwwlogs / test . ztloadfield . com . log ; error_log / www / wwwlogs / test . ztloadfield . com . error . log ; }","title":"Transfer proxy_pass without uwsgi of flask-minimal"},{"location":"server/nginx/#transfer-php-site","text":"server { listen 80 ; listen [::]: 80 ; server_name blog . new - realm . cn ; index index . php index . html index . htm default . php default . htm default . html ; root / www / wwwroot / new - realm . cn / blog ; # SSL - START SSL\u76f8\u5173\u914d\u7f6e \uff0c\u8bf7\u52ff\u5220\u9664\u6216\u4fee\u6539\u4e0b\u4e00\u884c\u5e26\u6ce8\u91ca\u7684 404 \u89c4\u5219 # error_page 404 / 404 . html ; # SSL - END # ERROR - PAGE - START \u9519\u8bef\u9875\u914d\u7f6e\uff0c\u53ef\u4ee5\u6ce8\u91ca\u3001\u5220\u9664\u6216\u4fee\u6539 # error_page 404 / 404 . html ; # error_page 502 / 502 . html ; # ERROR - PAGE - END # PHP - INFO - START PHP\u5f15\u7528\u914d\u7f6e \uff0c\u53ef\u4ee5\u6ce8\u91ca\u6216\u4fee\u6539 include enable - php - 71 . conf ; # PHP - INFO - END # REWRITE - START URL\u91cd\u5199\u89c4\u5219\u5f15\u7528 , \u4fee\u6539\u540e\u5c06\u5bfc\u81f4\u9762\u677f\u8bbe\u7f6e\u7684\u4f2a\u9759\u6001\u89c4\u5219\u5931\u6548 include / www / server / panel / vhost / rewrite / blog . new - realm . cn . conf ; # REWRITE - END # \u7981\u6b62\u8bbf\u95ee\u7684\u6587\u4ef6\u6216\u76ee\u5f55 location ~ ^/ ( \\ . user . ini | \\ . htaccess | \\ . git | \\ . svn | \\ . project | LICENSE | README . md ) { return 404 ; } # \u4e00\u952e\u7533\u8bf7 SSL\u8bc1\u4e66\u9a8c\u8bc1\u76ee\u5f55\u76f8\u5173\u8bbe\u7f6e location ~ \\ . well - known { allow all ; } location ~ . * \\ .( gif | jpg | jpeg | png | bmp | swf ) $ { expires 30 d ; error_log off ; access_log / dev / null ; } location ~ . * \\ .( js | css ) ? $ { expires 12 h ; error_log off ; access_log / dev / null ; } access_log / www / wwwlogs / blog . new - realm . cn . log ; error_log / www / wwwlogs / blog . new - realm . cn . error . log ; }","title":"Transfer PHP-site"},{"location":"server/ssh/","text":"\u8bbe\u7f6e SSH \u901a\u8fc7\u5bc6\u94a5\u767b\u5f55 \u00b6 \u5206\u7c7b \u7f16\u7a0b\u6280\u672f \u6211\u4eec\u4e00\u822c\u4f7f\u7528 PuTTY \u7b49 SSH \u5ba2\u6237\u7aef\u6765\u8fdc\u7a0b\u7ba1\u7406 Linux \u670d\u52a1\u5668\u3002\u4f46\u662f\uff0c\u4e00\u822c\u7684\u5bc6\u7801\u65b9\u5f0f\u767b\u5f55\uff0c\u5bb9\u6613\u6709\u5bc6\u7801\u88ab\u66b4\u529b\u7834\u89e3\u7684\u95ee\u9898\u3002\u6240\u4ee5\uff0c\u4e00\u822c\u6211\u4eec\u4f1a\u5c06 SSH \u7684\u7aef\u53e3\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u7684 22 \u4ee5\u5916\u7684\u7aef\u53e3\uff0c\u6216\u8005\u7981\u7528 root \u8d26\u6237\u767b\u5f55\u3002\u5176\u5b9e\uff0c\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u529e\u6cd5\u6765\u4fdd\u8bc1\u5b89\u5168\uff0c\u800c\u4e14\u8ba9\u4f60\u53ef\u4ee5\u653e\u5fc3\u5730\u7528 root \u8d26\u6237\u4ece\u8fdc\u7a0b\u767b\u5f55\u2014\u2014\u90a3\u5c31\u662f\u901a\u8fc7\u5bc6\u94a5\u65b9\u5f0f\u767b\u5f55\u3002 \u5bc6\u94a5\u5f62\u5f0f\u767b\u5f55\u7684\u539f\u7406\u662f\uff1a\u5229\u7528\u5bc6\u94a5\u751f\u6210\u5668\u5236\u4f5c\u4e00\u5bf9\u5bc6\u94a5\u2014\u2014\u4e00\u53ea\u516c\u94a5\u548c\u4e00\u53ea\u79c1\u94a5\u3002\u5c06\u516c\u94a5\u6dfb\u52a0\u5230\u670d\u52a1\u5668\u7684\u67d0\u4e2a\u8d26\u6237\u4e0a\uff0c\u7136\u540e\u5728\u5ba2\u6237\u7aef\u5229\u7528\u79c1\u94a5\u5373\u53ef\u5b8c\u6210\u8ba4\u8bc1\u5e76\u767b\u5f55\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u6ca1\u6709\u79c1\u94a5\uff0c\u4efb\u4f55\u4eba\u90fd\u65e0\u6cd5\u901a\u8fc7 SSH \u66b4\u529b\u7834\u89e3\u4f60\u7684\u5bc6\u7801\u6765\u8fdc\u7a0b\u767b\u5f55\u5230\u7cfb\u7edf\u3002\u6b64\u5916\uff0c\u5982\u679c\u5c06\u516c\u94a5\u590d\u5236\u5230\u5176\u4ed6\u8d26\u6237\u751a\u81f3\u4e3b\u673a\uff0c\u5229\u7528\u79c1\u94a5\u4e5f\u53ef\u4ee5\u767b\u5f55\u3002 \u4e0b\u9762\u6765\u8bb2\u89e3\u5982\u4f55\u5728 Linux \u670d\u52a1\u5668\u4e0a\u5236\u4f5c\u5bc6\u94a5\u5bf9\uff0c\u5c06\u516c\u94a5\u6dfb\u52a0\u7ed9\u8d26\u6237\uff0c\u8bbe\u7f6e SSH\uff0c\u6700\u540e\u901a\u8fc7\u5ba2\u6237\u7aef\u767b\u5f55\u3002 1. \u5236\u4f5c\u5bc6\u94a5\u5bf9 \u00b6 \u9996\u5148\u5728\u670d\u52a1\u5668\u4e0a\u5236\u4f5c\u5bc6\u94a5\u5bf9\u3002\u9996\u5148\u7528\u5bc6\u7801\u767b\u5f55\u5230\u4f60\u6253\u7b97\u4f7f\u7528\u5bc6\u94a5\u767b\u5f55\u7684\u8d26\u6237\uff0c\u7136\u540e\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a [root@host ~]$ ssh-keygen <== \u5efa\u7acb\u5bc6\u94a5\u5bf9 Generating public/private rsa key pair. Enter file in which to save the key (/root/.ssh/id_rsa): <== \u6309 Enter Created directory '/root/.ssh'. Enter passphrase (empty for no passphrase): <== \u8f93\u5165\u5bc6\u94a5\u9501\u7801\uff0c\u6216\u76f4\u63a5\u6309 Enter \u7559\u7a7a Enter same passphrase again: <== \u518d\u8f93\u5165\u4e00\u904d\u5bc6\u94a5\u9501\u7801 Your identification has been saved in /root/.ssh/id_rsa. <== \u79c1\u94a5 Your public key has been saved in /root/.ssh/id_rsa.pub. <== \u516c\u94a5 The key fingerprint is: 0f:d3:e7:1a:1c:bd:5c:03:f1:19:f1:22:df:9b:cc:08 root@host \u5bc6\u94a5\u9501\u7801\u5728\u4f7f\u7528\u79c1\u94a5\u65f6\u5fc5\u987b\u8f93\u5165\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u62a4\u79c1\u94a5\u4e0d\u88ab\u76d7\u7528\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u7559\u7a7a\uff0c\u5b9e\u73b0\u65e0\u5bc6\u7801\u767b\u5f55\u3002 \u73b0\u5728\uff0c\u5728 root \u7528\u6237\u7684\u5bb6\u76ee\u5f55\u4e2d\u751f\u6210\u4e86\u4e00\u4e2a .ssh \u7684\u9690\u85cf\u76ee\u5f55\uff0c\u5185\u542b\u4e24\u4e2a\u5bc6\u94a5\u6587\u4ef6\u3002id_rsa \u4e3a\u79c1\u94a5\uff0cid_rsa.pub \u4e3a\u516c\u94a5\u3002 2. \u5728\u670d\u52a1\u5668\u4e0a\u5b89\u88c5\u516c\u94a5 \u00b6 \u952e\u5165\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5728\u670d\u52a1\u5668\u4e0a\u5b89\u88c5\u516c\u94a5\uff1a [root@host ~]$ cd .ssh [root@host .ssh]$ cat id_rsa.pub >> authorized_keys \u5982\u6b64\u4fbf\u5b8c\u6210\u4e86\u516c\u94a5\u7684\u5b89\u88c5\u3002\u4e3a\u4e86\u786e\u4fdd\u8fde\u63a5\u6210\u529f\uff0c\u8bf7\u4fdd\u8bc1\u4ee5\u4e0b\u6587\u4ef6\u6743\u9650\u6b63\u786e\uff1a [root@host .ssh]$ chmod 600 authorized_keys [root@host .ssh]$ chmod 700 ~/.ssh 3. \u8bbe\u7f6e SSH\uff0c\u6253\u5f00\u5bc6\u94a5\u767b\u5f55\u529f\u80fd \u00b6 \u7f16\u8f91 /etc/ssh/sshd_config \u6587\u4ef6\uff0c\u8fdb\u884c\u5982\u4e0b\u8bbe\u7f6e\uff1a RSAAuthentication yes PubkeyAuthentication yes \u53e6\u5916\uff0c\u8bf7\u7559\u610f root \u7528\u6237\u80fd\u5426\u901a\u8fc7 SSH \u767b\u5f55\uff1a PermitRootLogin yes \u5f53\u4f60\u5b8c\u6210\u5168\u90e8\u8bbe\u7f6e\uff0c\u5e76\u4ee5\u5bc6\u94a5\u65b9\u5f0f\u767b\u5f55\u6210\u529f\u540e\uff0c\u518d\u7981\u7528\u5bc6\u7801\u767b\u5f55\uff1a PasswordAuthentication no \u6700\u540e\uff0c\u91cd\u542f SSH \u670d\u52a1\uff1a [root@host .ssh]$ service sshd restart 4. \u5c06\u79c1\u94a5\u4e0b\u8f7d\u5230\u5ba2\u6237\u7aef\uff0c\u7136\u540e\u8f6c\u6362\u4e3a PuTTY \u80fd\u4f7f\u7528\u7684\u683c\u5f0f \u00b6 \u4f7f\u7528 WinSCP\u3001SFTP \u7b49\u5de5\u5177\u5c06\u79c1\u94a5\u6587\u4ef6 id_rsa \u4e0b\u8f7d\u5230\u5ba2\u6237\u7aef\u673a\u5668\u4e0a\u3002\u7136\u540e\u6253\u5f00 PuTTYGen\uff0c\u5355\u51fb Actions \u4e2d\u7684 Load \u6309\u94ae\uff0c\u8f7d\u5165\u4f60\u521a\u624d\u4e0b\u8f7d\u5230\u7684\u79c1\u94a5\u6587\u4ef6\u3002\u5982\u679c\u4f60\u521a\u624d\u8bbe\u7f6e\u4e86\u5bc6\u94a5\u9501\u7801\uff0c\u8fd9\u65f6\u5219\u9700\u8981\u8f93\u5165\u3002 \u8f7d\u5165\u6210\u529f\u540e\uff0cPuTTYGen \u4f1a\u663e\u793a\u5bc6\u94a5\u76f8\u5173\u7684\u4fe1\u606f\u3002\u5728 Key comment \u4e2d\u952e\u5165\u5bf9\u5bc6\u94a5\u7684\u8bf4\u660e\u4fe1\u606f\uff0c\u7136\u540e\u5355\u51fb Save private key \u6309\u94ae\u5373\u53ef\u5c06\u79c1\u94a5\u6587\u4ef6\u5b58\u653e\u4e3a PuTTY \u80fd\u4f7f\u7528\u7684\u683c\u5f0f\u3002 \u4eca\u540e\uff0c\u5f53\u4f60\u4f7f\u7528 PuTTY \u767b\u5f55\u65f6\uff0c\u53ef\u4ee5\u5728\u5de6\u4fa7\u7684 Connection -> SSH -> Auth \u4e2d\u7684 Private key file for authentication: \u5904\u9009\u62e9\u4f60\u7684\u79c1\u94a5\u6587\u4ef6\uff0c\u7136\u540e\u5373\u53ef\u767b\u5f55\u4e86\uff0c\u8fc7\u7a0b\u4e2d\u53ea\u9700\u8f93\u5165\u5bc6\u94a5\u9501\u7801\u5373\u53ef\u3002","title":"SSH"},{"location":"server/ssh/#ssh","text":"\u5206\u7c7b \u7f16\u7a0b\u6280\u672f \u6211\u4eec\u4e00\u822c\u4f7f\u7528 PuTTY \u7b49 SSH \u5ba2\u6237\u7aef\u6765\u8fdc\u7a0b\u7ba1\u7406 Linux \u670d\u52a1\u5668\u3002\u4f46\u662f\uff0c\u4e00\u822c\u7684\u5bc6\u7801\u65b9\u5f0f\u767b\u5f55\uff0c\u5bb9\u6613\u6709\u5bc6\u7801\u88ab\u66b4\u529b\u7834\u89e3\u7684\u95ee\u9898\u3002\u6240\u4ee5\uff0c\u4e00\u822c\u6211\u4eec\u4f1a\u5c06 SSH \u7684\u7aef\u53e3\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u7684 22 \u4ee5\u5916\u7684\u7aef\u53e3\uff0c\u6216\u8005\u7981\u7528 root \u8d26\u6237\u767b\u5f55\u3002\u5176\u5b9e\uff0c\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u529e\u6cd5\u6765\u4fdd\u8bc1\u5b89\u5168\uff0c\u800c\u4e14\u8ba9\u4f60\u53ef\u4ee5\u653e\u5fc3\u5730\u7528 root \u8d26\u6237\u4ece\u8fdc\u7a0b\u767b\u5f55\u2014\u2014\u90a3\u5c31\u662f\u901a\u8fc7\u5bc6\u94a5\u65b9\u5f0f\u767b\u5f55\u3002 \u5bc6\u94a5\u5f62\u5f0f\u767b\u5f55\u7684\u539f\u7406\u662f\uff1a\u5229\u7528\u5bc6\u94a5\u751f\u6210\u5668\u5236\u4f5c\u4e00\u5bf9\u5bc6\u94a5\u2014\u2014\u4e00\u53ea\u516c\u94a5\u548c\u4e00\u53ea\u79c1\u94a5\u3002\u5c06\u516c\u94a5\u6dfb\u52a0\u5230\u670d\u52a1\u5668\u7684\u67d0\u4e2a\u8d26\u6237\u4e0a\uff0c\u7136\u540e\u5728\u5ba2\u6237\u7aef\u5229\u7528\u79c1\u94a5\u5373\u53ef\u5b8c\u6210\u8ba4\u8bc1\u5e76\u767b\u5f55\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u6ca1\u6709\u79c1\u94a5\uff0c\u4efb\u4f55\u4eba\u90fd\u65e0\u6cd5\u901a\u8fc7 SSH \u66b4\u529b\u7834\u89e3\u4f60\u7684\u5bc6\u7801\u6765\u8fdc\u7a0b\u767b\u5f55\u5230\u7cfb\u7edf\u3002\u6b64\u5916\uff0c\u5982\u679c\u5c06\u516c\u94a5\u590d\u5236\u5230\u5176\u4ed6\u8d26\u6237\u751a\u81f3\u4e3b\u673a\uff0c\u5229\u7528\u79c1\u94a5\u4e5f\u53ef\u4ee5\u767b\u5f55\u3002 \u4e0b\u9762\u6765\u8bb2\u89e3\u5982\u4f55\u5728 Linux \u670d\u52a1\u5668\u4e0a\u5236\u4f5c\u5bc6\u94a5\u5bf9\uff0c\u5c06\u516c\u94a5\u6dfb\u52a0\u7ed9\u8d26\u6237\uff0c\u8bbe\u7f6e SSH\uff0c\u6700\u540e\u901a\u8fc7\u5ba2\u6237\u7aef\u767b\u5f55\u3002","title":"\u8bbe\u7f6e SSH \u901a\u8fc7\u5bc6\u94a5\u767b\u5f55"},{"location":"server/ssh/#1","text":"\u9996\u5148\u5728\u670d\u52a1\u5668\u4e0a\u5236\u4f5c\u5bc6\u94a5\u5bf9\u3002\u9996\u5148\u7528\u5bc6\u7801\u767b\u5f55\u5230\u4f60\u6253\u7b97\u4f7f\u7528\u5bc6\u94a5\u767b\u5f55\u7684\u8d26\u6237\uff0c\u7136\u540e\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a [root@host ~]$ ssh-keygen <== \u5efa\u7acb\u5bc6\u94a5\u5bf9 Generating public/private rsa key pair. Enter file in which to save the key (/root/.ssh/id_rsa): <== \u6309 Enter Created directory '/root/.ssh'. Enter passphrase (empty for no passphrase): <== \u8f93\u5165\u5bc6\u94a5\u9501\u7801\uff0c\u6216\u76f4\u63a5\u6309 Enter \u7559\u7a7a Enter same passphrase again: <== \u518d\u8f93\u5165\u4e00\u904d\u5bc6\u94a5\u9501\u7801 Your identification has been saved in /root/.ssh/id_rsa. <== \u79c1\u94a5 Your public key has been saved in /root/.ssh/id_rsa.pub. <== \u516c\u94a5 The key fingerprint is: 0f:d3:e7:1a:1c:bd:5c:03:f1:19:f1:22:df:9b:cc:08 root@host \u5bc6\u94a5\u9501\u7801\u5728\u4f7f\u7528\u79c1\u94a5\u65f6\u5fc5\u987b\u8f93\u5165\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u62a4\u79c1\u94a5\u4e0d\u88ab\u76d7\u7528\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u7559\u7a7a\uff0c\u5b9e\u73b0\u65e0\u5bc6\u7801\u767b\u5f55\u3002 \u73b0\u5728\uff0c\u5728 root \u7528\u6237\u7684\u5bb6\u76ee\u5f55\u4e2d\u751f\u6210\u4e86\u4e00\u4e2a .ssh \u7684\u9690\u85cf\u76ee\u5f55\uff0c\u5185\u542b\u4e24\u4e2a\u5bc6\u94a5\u6587\u4ef6\u3002id_rsa \u4e3a\u79c1\u94a5\uff0cid_rsa.pub \u4e3a\u516c\u94a5\u3002","title":"1. \u5236\u4f5c\u5bc6\u94a5\u5bf9"},{"location":"server/ssh/#2","text":"\u952e\u5165\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5728\u670d\u52a1\u5668\u4e0a\u5b89\u88c5\u516c\u94a5\uff1a [root@host ~]$ cd .ssh [root@host .ssh]$ cat id_rsa.pub >> authorized_keys \u5982\u6b64\u4fbf\u5b8c\u6210\u4e86\u516c\u94a5\u7684\u5b89\u88c5\u3002\u4e3a\u4e86\u786e\u4fdd\u8fde\u63a5\u6210\u529f\uff0c\u8bf7\u4fdd\u8bc1\u4ee5\u4e0b\u6587\u4ef6\u6743\u9650\u6b63\u786e\uff1a [root@host .ssh]$ chmod 600 authorized_keys [root@host .ssh]$ chmod 700 ~/.ssh","title":"2. \u5728\u670d\u52a1\u5668\u4e0a\u5b89\u88c5\u516c\u94a5"},{"location":"server/ssh/#3-ssh","text":"\u7f16\u8f91 /etc/ssh/sshd_config \u6587\u4ef6\uff0c\u8fdb\u884c\u5982\u4e0b\u8bbe\u7f6e\uff1a RSAAuthentication yes PubkeyAuthentication yes \u53e6\u5916\uff0c\u8bf7\u7559\u610f root \u7528\u6237\u80fd\u5426\u901a\u8fc7 SSH \u767b\u5f55\uff1a PermitRootLogin yes \u5f53\u4f60\u5b8c\u6210\u5168\u90e8\u8bbe\u7f6e\uff0c\u5e76\u4ee5\u5bc6\u94a5\u65b9\u5f0f\u767b\u5f55\u6210\u529f\u540e\uff0c\u518d\u7981\u7528\u5bc6\u7801\u767b\u5f55\uff1a PasswordAuthentication no \u6700\u540e\uff0c\u91cd\u542f SSH \u670d\u52a1\uff1a [root@host .ssh]$ service sshd restart","title":"3. \u8bbe\u7f6e SSH\uff0c\u6253\u5f00\u5bc6\u94a5\u767b\u5f55\u529f\u80fd"},{"location":"server/ssh/#4-putty","text":"\u4f7f\u7528 WinSCP\u3001SFTP \u7b49\u5de5\u5177\u5c06\u79c1\u94a5\u6587\u4ef6 id_rsa \u4e0b\u8f7d\u5230\u5ba2\u6237\u7aef\u673a\u5668\u4e0a\u3002\u7136\u540e\u6253\u5f00 PuTTYGen\uff0c\u5355\u51fb Actions \u4e2d\u7684 Load \u6309\u94ae\uff0c\u8f7d\u5165\u4f60\u521a\u624d\u4e0b\u8f7d\u5230\u7684\u79c1\u94a5\u6587\u4ef6\u3002\u5982\u679c\u4f60\u521a\u624d\u8bbe\u7f6e\u4e86\u5bc6\u94a5\u9501\u7801\uff0c\u8fd9\u65f6\u5219\u9700\u8981\u8f93\u5165\u3002 \u8f7d\u5165\u6210\u529f\u540e\uff0cPuTTYGen \u4f1a\u663e\u793a\u5bc6\u94a5\u76f8\u5173\u7684\u4fe1\u606f\u3002\u5728 Key comment \u4e2d\u952e\u5165\u5bf9\u5bc6\u94a5\u7684\u8bf4\u660e\u4fe1\u606f\uff0c\u7136\u540e\u5355\u51fb Save private key \u6309\u94ae\u5373\u53ef\u5c06\u79c1\u94a5\u6587\u4ef6\u5b58\u653e\u4e3a PuTTY \u80fd\u4f7f\u7528\u7684\u683c\u5f0f\u3002 \u4eca\u540e\uff0c\u5f53\u4f60\u4f7f\u7528 PuTTY \u767b\u5f55\u65f6\uff0c\u53ef\u4ee5\u5728\u5de6\u4fa7\u7684 Connection -> SSH -> Auth \u4e2d\u7684 Private key file for authentication: \u5904\u9009\u62e9\u4f60\u7684\u79c1\u94a5\u6587\u4ef6\uff0c\u7136\u540e\u5373\u53ef\u767b\u5f55\u4e86\uff0c\u8fc7\u7a0b\u4e2d\u53ea\u9700\u8f93\u5165\u5bc6\u94a5\u9501\u7801\u5373\u53ef\u3002","title":"4. \u5c06\u79c1\u94a5\u4e0b\u8f7d\u5230\u5ba2\u6237\u7aef\uff0c\u7136\u540e\u8f6c\u6362\u4e3a PuTTY \u80fd\u4f7f\u7528\u7684\u683c\u5f0f"},{"location":"server/vim/","text":"vi/ vim \u00b6 1. vimrc 2. vim:cheatsheat 2. vim \u952e\u76d8\u56fe\uff1a \u00b6 3. vi/vim \u7684\u4f7f\u7528 \u00b6 \u57fa\u672c\u4e0a vi/vim \u5171\u5206\u4e3a\u4e09\u79cd\u6a21\u5f0f\uff0c\u5206\u522b\u662f\u547d\u4ee4\u6a21\u5f0f\uff08Command mode\uff09\uff0c\u8f93\u5165\u6a21\u5f0f\uff08Insert mode\uff09\u548c\u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f\uff08Last line mode\uff09\u3002 \u8fd9\u4e09\u79cd\u6a21\u5f0f\u7684\u4f5c\u7528\u5206\u522b\u662f\uff1a \u547d\u4ee4\u6a21\u5f0f\uff1a \u7528\u6237\u521a\u521a\u542f\u52a8 vi/vim\uff0c\u4fbf\u8fdb\u5165\u4e86\u547d\u4ee4\u6a21\u5f0f\u3002 \u6b64\u72b6\u6001\u4e0b\u6572\u51fb\u952e\u76d8\u52a8\u4f5c\u4f1a\u88abVim\u8bc6\u522b\u4e3a\u547d\u4ee4\uff0c\u800c\u975e\u8f93\u5165\u5b57\u7b26\u3002\u6bd4\u5982\u6211\u4eec\u6b64\u65f6\u6309\u4e0bi\uff0c\u5e76\u4e0d\u4f1a\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\uff0ci\u88ab\u5f53\u4f5c\u4e86\u4e00\u4e2a\u547d\u4ee4\u3002 \u4ee5\u4e0b\u662f\u5e38\u7528\u7684\u51e0\u4e2a\u547d\u4ee4\uff1a i \u5207\u6362\u5230\u8f93\u5165\u6a21\u5f0f\uff0c\u4ee5\u8f93\u5165\u5b57\u7b26\u3002 x \u5220\u9664\u5f53\u524d\u5149\u6807\u6240\u5728\u5904\u7684\u5b57\u7b26\u3002 : \u5207\u6362\u5230\u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f\uff0c\u4ee5\u5728\u6700\u5e95\u4e00\u884c\u8f93\u5165\u547d\u4ee4\u3002 \u82e5\u60f3\u8981\u7f16\u8f91\u6587\u672c\uff1a\u542f\u52a8Vim\uff0c\u8fdb\u5165\u4e86\u547d\u4ee4\u6a21\u5f0f\uff0c\u6309\u4e0bi\uff0c\u5207\u6362\u5230\u8f93\u5165\u6a21\u5f0f\u3002 \u547d\u4ee4\u6a21\u5f0f\u53ea\u6709\u4e00\u4e9b\u6700\u57fa\u672c\u7684\u547d\u4ee4\uff0c\u56e0\u6b64\u4ecd\u8981\u4f9d\u9760\u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f\u8f93\u5165\u66f4\u591a\u547d\u4ee4\u3002 \u8f93\u5165\u6a21\u5f0f \u5728\u547d\u4ee4\u6a21\u5f0f\u4e0b\u6309\u4e0bi\u5c31\u8fdb\u5165\u4e86\u8f93\u5165\u6a21\u5f0f\u3002 \u5728\u8f93\u5165\u6a21\u5f0f\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6309\u952e\uff1a \u5b57\u7b26\u6309\u952e\u4ee5\u53caShift\u7ec4\u5408\uff0c\u8f93\u5165\u5b57\u7b26 ENTER\uff0c\u56de\u8f66\u952e\uff0c\u6362\u884c BACK SPACE\uff0c\u9000\u683c\u952e\uff0c\u5220\u9664\u5149\u6807\u524d\u4e00\u4e2a\u5b57\u7b26 DEL\uff0c\u5220\u9664\u952e\uff0c\u5220\u9664\u5149\u6807\u540e\u4e00\u4e2a\u5b57\u7b26 \u65b9\u5411\u952e\uff0c\u5728\u6587\u672c\u4e2d\u79fb\u52a8\u5149\u6807 HOME/END\uff0c\u79fb\u52a8\u5149\u6807\u5230\u884c\u9996/\u884c\u5c3e Page Up/Page Down\uff0c\u4e0a/\u4e0b\u7ffb\u9875 Insert\uff0c\u5207\u6362\u5149\u6807\u4e3a\u8f93\u5165/\u66ff\u6362\u6a21\u5f0f\uff0c\u5149\u6807\u5c06\u53d8\u6210\u7ad6\u7ebf/\u4e0b\u5212\u7ebf ESC\uff0c\u9000\u51fa\u8f93\u5165\u6a21\u5f0f\uff0c\u5207\u6362\u5230\u547d\u4ee4\u6a21\u5f0f \u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f \u5728\u547d\u4ee4\u6a21\u5f0f\u4e0b\u6309\u4e0b:\uff08\u82f1\u6587\u5192\u53f7\uff09\u5c31\u8fdb\u5165\u4e86\u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f\u3002 \u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f\u53ef\u4ee5\u8f93\u5165\u5355\u4e2a\u6216\u591a\u4e2a\u5b57\u7b26\u7684\u547d\u4ee4\uff0c\u53ef\u7528\u7684\u547d\u4ee4\u975e\u5e38\u591a\u3002 \u5728\u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f\u4e2d\uff0c\u57fa\u672c\u7684\u547d\u4ee4\u6709\uff08\u5df2\u7ecf\u7701\u7565\u4e86\u5192\u53f7\uff09\uff1a q \u9000\u51fa\u7a0b\u5e8f w \u4fdd\u5b58\u6587\u4ef6 \u6309ESC\u952e\u53ef\u968f\u65f6\u9000\u51fa\u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f\u3002 \u7b80\u5355\u7684\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e09\u4e2a\u6a21\u5f0f\u60f3\u6210\u5e95\u4e0b\u7684\u56fe\u6807\u6765\u8868\u793a\uff1a 4. vi/vim \u4f7f\u7528\u5b9e\u4f8b \u00b6 \u67e5\u627e\uff1a / \u67e5\u627e-\u66ff\u6362\uff1a :%s/AAA/BBB/g ,\u5176\u4e2d '%'\u8868\u793a\u540c\u4e00\u6587\u4ef6\u5185\u7684\u6240\u6709\u5185\u5bb9\uff0c\u4e0d\u52a0\u8868\u793a\u5149\u6807\u6240\u5728\u884c\u3002 \u8054\u60f3\uff1a\u4e0eLinux\u7684 sed -i s/AAA/BBB/g grep AAA -rl ./`` \u547d\u4ee4\u76f8\u4f3c\u3002 \u00b6","title":"Vim"},{"location":"server/vim/#vivim","text":"1. vimrc 2. vim:cheatsheat","title":"vi/vim"},{"location":"server/vim/#2-vim","text":"","title":"2. vim \u952e\u76d8\u56fe\uff1a"},{"location":"server/vim/#3-vivim","text":"\u57fa\u672c\u4e0a vi/vim \u5171\u5206\u4e3a\u4e09\u79cd\u6a21\u5f0f\uff0c\u5206\u522b\u662f\u547d\u4ee4\u6a21\u5f0f\uff08Command mode\uff09\uff0c\u8f93\u5165\u6a21\u5f0f\uff08Insert mode\uff09\u548c\u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f\uff08Last line mode\uff09\u3002 \u8fd9\u4e09\u79cd\u6a21\u5f0f\u7684\u4f5c\u7528\u5206\u522b\u662f\uff1a \u547d\u4ee4\u6a21\u5f0f\uff1a \u7528\u6237\u521a\u521a\u542f\u52a8 vi/vim\uff0c\u4fbf\u8fdb\u5165\u4e86\u547d\u4ee4\u6a21\u5f0f\u3002 \u6b64\u72b6\u6001\u4e0b\u6572\u51fb\u952e\u76d8\u52a8\u4f5c\u4f1a\u88abVim\u8bc6\u522b\u4e3a\u547d\u4ee4\uff0c\u800c\u975e\u8f93\u5165\u5b57\u7b26\u3002\u6bd4\u5982\u6211\u4eec\u6b64\u65f6\u6309\u4e0bi\uff0c\u5e76\u4e0d\u4f1a\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\uff0ci\u88ab\u5f53\u4f5c\u4e86\u4e00\u4e2a\u547d\u4ee4\u3002 \u4ee5\u4e0b\u662f\u5e38\u7528\u7684\u51e0\u4e2a\u547d\u4ee4\uff1a i \u5207\u6362\u5230\u8f93\u5165\u6a21\u5f0f\uff0c\u4ee5\u8f93\u5165\u5b57\u7b26\u3002 x \u5220\u9664\u5f53\u524d\u5149\u6807\u6240\u5728\u5904\u7684\u5b57\u7b26\u3002 : \u5207\u6362\u5230\u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f\uff0c\u4ee5\u5728\u6700\u5e95\u4e00\u884c\u8f93\u5165\u547d\u4ee4\u3002 \u82e5\u60f3\u8981\u7f16\u8f91\u6587\u672c\uff1a\u542f\u52a8Vim\uff0c\u8fdb\u5165\u4e86\u547d\u4ee4\u6a21\u5f0f\uff0c\u6309\u4e0bi\uff0c\u5207\u6362\u5230\u8f93\u5165\u6a21\u5f0f\u3002 \u547d\u4ee4\u6a21\u5f0f\u53ea\u6709\u4e00\u4e9b\u6700\u57fa\u672c\u7684\u547d\u4ee4\uff0c\u56e0\u6b64\u4ecd\u8981\u4f9d\u9760\u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f\u8f93\u5165\u66f4\u591a\u547d\u4ee4\u3002 \u8f93\u5165\u6a21\u5f0f \u5728\u547d\u4ee4\u6a21\u5f0f\u4e0b\u6309\u4e0bi\u5c31\u8fdb\u5165\u4e86\u8f93\u5165\u6a21\u5f0f\u3002 \u5728\u8f93\u5165\u6a21\u5f0f\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6309\u952e\uff1a \u5b57\u7b26\u6309\u952e\u4ee5\u53caShift\u7ec4\u5408\uff0c\u8f93\u5165\u5b57\u7b26 ENTER\uff0c\u56de\u8f66\u952e\uff0c\u6362\u884c BACK SPACE\uff0c\u9000\u683c\u952e\uff0c\u5220\u9664\u5149\u6807\u524d\u4e00\u4e2a\u5b57\u7b26 DEL\uff0c\u5220\u9664\u952e\uff0c\u5220\u9664\u5149\u6807\u540e\u4e00\u4e2a\u5b57\u7b26 \u65b9\u5411\u952e\uff0c\u5728\u6587\u672c\u4e2d\u79fb\u52a8\u5149\u6807 HOME/END\uff0c\u79fb\u52a8\u5149\u6807\u5230\u884c\u9996/\u884c\u5c3e Page Up/Page Down\uff0c\u4e0a/\u4e0b\u7ffb\u9875 Insert\uff0c\u5207\u6362\u5149\u6807\u4e3a\u8f93\u5165/\u66ff\u6362\u6a21\u5f0f\uff0c\u5149\u6807\u5c06\u53d8\u6210\u7ad6\u7ebf/\u4e0b\u5212\u7ebf ESC\uff0c\u9000\u51fa\u8f93\u5165\u6a21\u5f0f\uff0c\u5207\u6362\u5230\u547d\u4ee4\u6a21\u5f0f \u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f \u5728\u547d\u4ee4\u6a21\u5f0f\u4e0b\u6309\u4e0b:\uff08\u82f1\u6587\u5192\u53f7\uff09\u5c31\u8fdb\u5165\u4e86\u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f\u3002 \u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f\u53ef\u4ee5\u8f93\u5165\u5355\u4e2a\u6216\u591a\u4e2a\u5b57\u7b26\u7684\u547d\u4ee4\uff0c\u53ef\u7528\u7684\u547d\u4ee4\u975e\u5e38\u591a\u3002 \u5728\u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f\u4e2d\uff0c\u57fa\u672c\u7684\u547d\u4ee4\u6709\uff08\u5df2\u7ecf\u7701\u7565\u4e86\u5192\u53f7\uff09\uff1a q \u9000\u51fa\u7a0b\u5e8f w \u4fdd\u5b58\u6587\u4ef6 \u6309ESC\u952e\u53ef\u968f\u65f6\u9000\u51fa\u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f\u3002 \u7b80\u5355\u7684\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e09\u4e2a\u6a21\u5f0f\u60f3\u6210\u5e95\u4e0b\u7684\u56fe\u6807\u6765\u8868\u793a\uff1a","title":"3. vi/vim \u7684\u4f7f\u7528"},{"location":"server/vim/#4-vivim","text":"\u67e5\u627e\uff1a / \u67e5\u627e-\u66ff\u6362\uff1a :%s/AAA/BBB/g ,\u5176\u4e2d '%'\u8868\u793a\u540c\u4e00\u6587\u4ef6\u5185\u7684\u6240\u6709\u5185\u5bb9\uff0c\u4e0d\u52a0\u8868\u793a\u5149\u6807\u6240\u5728\u884c\u3002","title":"4. vi/vim \u4f7f\u7528\u5b9e\u4f8b"},{"location":"server/vim/#linux-sed-i-saaabbbggrep-aaa-rl","text":"","title":"\u8054\u60f3\uff1a\u4e0eLinux\u7684 sed -i s/AAA/BBB/ggrep AAA -rl ./`` \u547d\u4ee4\u76f8\u4f3c\u3002"},{"location":"yaml-travis/mydocs-yaml/","text":"mydocs yaml \u00b6 site_name : mydocs - MkDocs nav : - Home : index . md - MkDocs : mkdocs . md - Markdown : markdown . md - Yaml : - mydocs yaml : mydocs - yaml . md - yaml intro : yaml . md - Travis CI : - Intro : travis . md - Use : travis - 1 . md - Fields : fields . md - Imgs : imgs . md - Links : links . md - SSH : ssh . md - Git / Github : git . md - Vi / Vim : vim . md - Apt /pip/ yum : apt . md - Linux / Shell : - linux commands : linux - cmds . md - linux shell : linux - shell . md - Nginx : nginx . md - Databases : - MySQL : dbs / mysql . md - Mongo : dbs / mongo . md - Python : python . md - Django : django . md - Flask : flask . md - Cheat - Sheets : cheat - sheets . md - Diary - 2020 - 3 : - Test : diaries / 0 . md - First day : diaries / 20200303 . md - Second day : diaries / 4 . md markdown_extensions : - pymdownx . arithmatex - pymdownx . betterem : smart_enable : all - pymdownx . caret - pymdownx . critic - pymdownx . details - pymdownx . emoji : emoji_generator : !! python / name : pymdownx . emoji . to_svg - pymdownx . inlinehilite - pymdownx . magiclink - pymdownx . mark - pymdownx . smartsymbols - pymdownx . superfences - pymdownx . tasklist : custom_checkbox : true - pymdownx . tilde - footnotes - meta - admonition - codehilite - toc : permalink : true # add plugins plugins : - search - minify : minify_html : true - search - git - revision - date - localized : type : iso_datetime # uncomment under line to use the \"readthedocs\" theme # theme : readthedocs # Need to install ` pip install mkdocs - material ` theme : name : 'material' # custom_dir : 'mkdocs-material/material' palette : primary : 'green' accent : 'green' font : text : 'Ubuntu' # code : 'Ubuntu Mono' code : 'Consolas' logo : 'imgs/ico-head.jpg' # language : 'zh' language : 'en' extra : search : language : 'en' tokenizer : '[\\s\\-\\.]+' social : - type : 'github' link : 'https://github.com/dick7' - type : 'wechat' link : 'https://weixin.com/dick7_love' - type : 'linkedin' link : 'https://www.linkedin.com/in/dick7_love' manifest : 'manifest.webmanifest' # google_analytics : # - 'UA-XXXXXXXX-X' # - 'auto' repo_name : 'dick7/mydocs' repo_url : 'https://github.com/dick7/mydocs' copyright : 'Copyright &copy; 2020 - 2021 Dick Sven'","title":"mydocs yaml"},{"location":"yaml-travis/mydocs-yaml/#mydocs-yaml","text":"site_name : mydocs - MkDocs nav : - Home : index . md - MkDocs : mkdocs . md - Markdown : markdown . md - Yaml : - mydocs yaml : mydocs - yaml . md - yaml intro : yaml . md - Travis CI : - Intro : travis . md - Use : travis - 1 . md - Fields : fields . md - Imgs : imgs . md - Links : links . md - SSH : ssh . md - Git / Github : git . md - Vi / Vim : vim . md - Apt /pip/ yum : apt . md - Linux / Shell : - linux commands : linux - cmds . md - linux shell : linux - shell . md - Nginx : nginx . md - Databases : - MySQL : dbs / mysql . md - Mongo : dbs / mongo . md - Python : python . md - Django : django . md - Flask : flask . md - Cheat - Sheets : cheat - sheets . md - Diary - 2020 - 3 : - Test : diaries / 0 . md - First day : diaries / 20200303 . md - Second day : diaries / 4 . md markdown_extensions : - pymdownx . arithmatex - pymdownx . betterem : smart_enable : all - pymdownx . caret - pymdownx . critic - pymdownx . details - pymdownx . emoji : emoji_generator : !! python / name : pymdownx . emoji . to_svg - pymdownx . inlinehilite - pymdownx . magiclink - pymdownx . mark - pymdownx . smartsymbols - pymdownx . superfences - pymdownx . tasklist : custom_checkbox : true - pymdownx . tilde - footnotes - meta - admonition - codehilite - toc : permalink : true # add plugins plugins : - search - minify : minify_html : true - search - git - revision - date - localized : type : iso_datetime # uncomment under line to use the \"readthedocs\" theme # theme : readthedocs # Need to install ` pip install mkdocs - material ` theme : name : 'material' # custom_dir : 'mkdocs-material/material' palette : primary : 'green' accent : 'green' font : text : 'Ubuntu' # code : 'Ubuntu Mono' code : 'Consolas' logo : 'imgs/ico-head.jpg' # language : 'zh' language : 'en' extra : search : language : 'en' tokenizer : '[\\s\\-\\.]+' social : - type : 'github' link : 'https://github.com/dick7' - type : 'wechat' link : 'https://weixin.com/dick7_love' - type : 'linkedin' link : 'https://www.linkedin.com/in/dick7_love' manifest : 'manifest.webmanifest' # google_analytics : # - 'UA-XXXXXXXX-X' # - 'auto' repo_name : 'dick7/mydocs' repo_url : 'https://github.com/dick7/mydocs' copyright : 'Copyright &copy; 2020 - 2021 Dick Sven'","title":"mydocs yaml"},{"location":"yaml-travis/travis-1/","text":"\u6301\u7eed\u96c6\u6210\u670d\u52a1 Travis CI \u4f7f\u7528\u6559\u7a0b \u00b6 \u7f16\u5199\u4ee3\u7801\u53ea\u662f\u8f6f\u4ef6\u5f00\u53d1\u7684\u4e00\u5c0f\u90e8\u5206\uff0c\u66f4\u591a\u7684\u65f6\u95f4\u5f80\u5f80\u82b1\u5728\u6784\u5efa\uff08build\uff09\u548c\u6d4b\u8bd5\uff08test\uff09\u3002 \u4e3a\u4e86\u63d0\u9ad8\u8f6f\u4ef6\u5f00\u53d1\u7684\u6548\u7387\uff0c\u6784\u5efa\u548c\u6d4b\u8bd5\u7684\u81ea\u52a8\u5316\u5de5\u5177\u5c42\u51fa\u4e0d\u7a77\u3002Travis CI \u5c31\u662f\u8fd9\u7c7b\u5de5\u5177\u4e4b\u4e2d\uff0c\u5e02\u573a\u4efd\u989d\u6700\u5927\u7684\u4e00\u4e2a\u3002 image \u672c\u6587\u4ecb\u7ecd Travis CI \u7684\u57fa\u672c\u7528\u6cd5\u3002\u7528\u597d\u8fd9\u4e2a\u5de5\u5177\u4e0d\u4ec5\u53ef\u4ee5\u63d0\u9ad8\u6548\u7387\uff0c\u8fd8\u80fd\u4f7f\u5f00\u53d1\u6d41\u7a0b\u66f4\u53ef\u9760\u548c\u4e13\u4e1a\u5316\uff0c\u4ece\u800c\u63d0\u9ad8\u8f6f\u4ef6\u7684\u4ef7\u503c\u3002\u800c\u4e14\uff0c\u5b83\u5bf9\u4e8e\u5f00\u6e90\u9879\u76ee\u662f\u514d\u8d39\u7684\uff0c\u4e0d\u82b1\u4e00\u5206\u94b1\uff0c\u5c31\u80fd\u5e2e\u4f60\u505a\u6389\u5f88\u591a\u4e8b\u60c5\u3002 \u4e00\u3001\u4ec0\u4e48\u662f\u6301\u7eed\u96c6\u6210\uff1f \u00b6 Travis CI \u63d0\u4f9b\u7684\u662f\u6301\u7eed\u96c6\u6210\u670d\u52a1\uff08Continuous Integration\uff0c\u7b80\u79f0 CI\uff09\u3002\u5b83\u7ed1\u5b9a Github \u4e0a\u9762\u7684\u9879\u76ee\uff0c\u53ea\u8981\u6709\u65b0\u7684\u4ee3\u7801\uff0c\u5c31\u4f1a\u81ea\u52a8\u6293\u53d6\u3002\u7136\u540e\uff0c\u63d0\u4f9b\u4e00\u4e2a\u8fd0\u884c\u73af\u5883\uff0c\u6267\u884c\u6d4b\u8bd5\uff0c\u5b8c\u6210\u6784\u5efa\uff0c\u8fd8\u80fd\u90e8\u7f72\u5230\u670d\u52a1\u5668\u3002 \u6301\u7eed\u96c6\u6210\u6307\u7684\u662f\u53ea\u8981\u4ee3\u7801\u6709\u53d8\u66f4\uff0c\u5c31\u81ea\u52a8\u8fd0\u884c\u6784\u5efa\u548c\u6d4b\u8bd5\uff0c\u53cd\u9988\u8fd0\u884c\u7ed3\u679c\u3002\u786e\u4fdd\u7b26\u5408\u9884\u671f\u4ee5\u540e\uff0c\u518d\u5c06\u65b0\u4ee3\u7801\"\u96c6\u6210\"\u5230\u4e3b\u5e72\u3002 \u6301\u7eed\u96c6\u6210\u7684\u597d\u5904\u5728\u4e8e\uff0c\u6bcf\u6b21\u4ee3\u7801\u7684\u5c0f\u5e45\u53d8\u66f4\uff0c\u5c31\u80fd\u770b\u5230\u8fd0\u884c\u7ed3\u679c\uff0c\u4ece\u800c\u4e0d\u65ad\u7d2f\u79ef\u5c0f\u7684\u53d8\u66f4\uff0c\u800c\u4e0d\u662f\u5728\u5f00\u53d1\u5468\u671f\u7ed3\u675f\u65f6\uff0c\u4e00\u4e0b\u5b50\u5408\u5e76\u4e00\u5927\u5757\u4ee3\u7801\u3002 \u4e8c\u3001\u4f7f\u7528\u51c6\u5907 \u00b6 Travis CI \u53ea\u652f\u6301 Github\uff0c\u4e0d\u652f\u6301\u5176\u4ed6\u4ee3\u7801\u6258\u7ba1\u670d\u52a1\u3002\u8fd9\u610f\u5473\u7740\uff0c\u4f60\u5fc5\u987b\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u624d\u80fd\u4f7f\u7528 Travis CI\u3002 \u62e5\u6709 GitHub \u5e10\u53f7 \u8be5\u5e10\u53f7\u4e0b\u9762\u6709\u4e00\u4e2a\u9879\u76ee \u8be5\u9879\u76ee\u91cc\u9762\u6709\u53ef\u8fd0\u884c\u7684\u4ee3\u7801 \u8be5\u9879\u76ee\u8fd8\u5305\u542b\u6784\u5efa\u6216\u6d4b\u8bd5\u811a\u672c \u5982\u679c\u8fd9\u4e9b\u6761\u4ef6\u90fd\u6ca1\u95ee\u9898\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u4f7f\u7528 Travis CI \u4e86\u3002 \u9996\u5148\uff0c\u8bbf\u95ee\u5b98\u65b9\u7f51\u7ad9 travis-ci.org\uff0c\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684\u4e2a\u4eba\u5934\u50cf\uff0c\u4f7f\u7528 Github \u8d26\u6237\u767b\u5165 Travis CI\u3002 Travis \u4f1a\u5217\u51fa Github \u4e0a\u9762\u4f60\u7684\u6240\u6709\u4ed3\u5e93\uff0c\u4ee5\u53ca\u4f60\u6240\u5c5e\u4e8e\u7684\u7ec4\u7ec7\u3002\u6b64\u65f6\uff0c\u9009\u62e9\u4f60\u9700\u8981 Travis \u5e2e\u4f60\u6784\u5efa\u7684\u4ed3\u5e93\uff0c\u6253\u5f00\u4ed3\u5e93\u65c1\u8fb9\u7684\u5f00\u5173\u3002\u4e00\u65e6\u6fc0\u6d3b\u4e86\u4e00\u4e2a\u4ed3\u5e93\uff0cTravis \u4f1a\u76d1\u542c\u8fd9\u4e2a\u4ed3\u5e93\u7684\u6240\u6709\u53d8\u5316\u3002 image \u4e09\u3001.travis.yml \u00b6 Travis \u8981\u6c42\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u9762\uff0c\u5fc5\u987b\u6709\u4e00\u4e2a.travis.yml\u6587\u4ef6\u3002\u8fd9\u662f\u914d\u7f6e\u6587\u4ef6\uff0c\u6307\u5b9a\u4e86 Travis \u7684\u884c\u4e3a\u3002\u8be5\u6587\u4ef6\u5fc5\u987b\u4fdd\u5b58\u5728 Github \u4ed3\u5e93\u91cc\u9762\uff0c\u4e00\u65e6\u4ee3\u7801\u4ed3\u5e93\u6709\u65b0\u7684 Commit\uff0cTravis \u5c31\u4f1a\u53bb\u627e\u8fd9\u4e2a\u6587\u4ef6\uff0c\u6267\u884c\u91cc\u9762\u7684\u547d\u4ee4\u3002 \u8fd9\u4e2a\u6587\u4ef6\u91c7\u7528 YAML \u683c\u5f0f\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u6700\u7b80\u5355\u7684 Python \u9879\u76ee\u7684.travis.yml\u6587\u4ef6\u3002 language : python script : true \u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c\u8bbe\u7f6e\u4e86\u4e24\u4e2a\u5b57\u6bb5\u3002language\u5b57\u6bb5\u6307\u5b9a\u4e86\u9ed8\u8ba4\u8fd0\u884c\u73af\u5883\uff0c\u8fd9\u91cc\u8bbe\u5b9a\u4f7f\u7528 Python \u73af\u5883\u3002script\u5b57\u6bb5\u6307\u5b9a\u8981\u8fd0\u884c\u7684\u811a\u672c\uff0cscript: true\u8868\u793a\u4e0d\u6267\u884c\u4efb\u4f55\u811a\u672c\uff0c\u72b6\u6001\u76f4\u63a5\u8bbe\u4e3a\u6210\u529f\u3002 Travis \u9ed8\u8ba4\u63d0\u4f9b\u7684\u8fd0\u884c\u73af\u5883\uff0c\u8bf7\u53c2\u8003\u5b98\u65b9\u6587\u6863 \u3002\u76ee\u524d\u4e00\u5171\u652f\u630131\u79cd\u8bed\u8a00\uff0c\u4ee5\u540e\u8fd8\u4f1a\u4e0d\u65ad\u589e\u52a0\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\u7684.travis.yml\u3002 language : python sudo : required before_install : sudo pip install foo script : py . test \u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c\u8bbe\u7f6e\u4e86\u56db\u4e2a\u5b57\u6bb5\uff1a\u8fd0\u884c\u73af\u5883\u662f Python\uff0c\u9700\u8981sudo\u6743\u9650\uff0c\u5728\u5b89\u88c5\u4f9d\u8d56\u4e4b\u524d\u9700\u8981\u5b89\u88c5foo\u6a21\u5757\uff0c\u7136\u540e\u6267\u884c\u811a\u672cpy.test\u3002 \u56db\u3001\u8fd0\u884c\u6d41\u7a0b \u00b6 Travis \u7684\u8fd0\u884c\u6d41\u7a0b\u5f88\u7b80\u5355\uff0c\u4efb\u4f55\u9879\u76ee\u90fd\u4f1a\u7ecf\u8fc7\u4e24\u4e2a\u9636\u6bb5\u3002 install \u9636\u6bb5\uff1a\u5b89\u88c5\u4f9d\u8d56 script \u9636\u6bb5\uff1a\u8fd0\u884c\u811a\u672c 4.1 install \u5b57\u6bb5 \u00b6 install\u5b57\u6bb5\u7528\u6765\u6307\u5b9a\u5b89\u88c5\u811a\u672c\u3002 install: ./install-dependencies.sh \u5982\u679c\u6709\u591a\u4e2a\u811a\u672c\uff0c\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u7684\u5f62\u5f0f\u3002 install: - command1 - command2 \u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c\u5982\u679ccommand1\u5931\u8d25\u4e86\uff0c\u6574\u4e2a\u6784\u5efa\u5c31\u4f1a\u505c\u4e0b\u6765\uff0c\u4e0d\u518d\u5f80\u4e0b\u8fdb\u884c\u3002 \u5982\u679c\u4e0d\u9700\u8981\u5b89\u88c5\uff0c\u5373\u8df3\u8fc7\u5b89\u88c5\u9636\u6bb5\uff0c\u5c31\u76f4\u63a5\u8bbe\u4e3atrue\u3002 install : true 4.2\u3001script \u5b57\u6bb5 \u00b6 script\u5b57\u6bb5\u7528\u6765\u6307\u5b9a\u6784\u5efa\u6216\u6d4b\u8bd5\u811a\u672c\u3002 script : bundle exec thor build \u5982\u679c\u6709\u591a\u4e2a\u811a\u672c\uff0c\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u7684\u5f62\u5f0f\u3002 script: - command1 - command2 \u6ce8\u610f\uff0cscript\u4e0einstall\u4e0d\u4e00\u6837\uff0c\u5982\u679ccommand1\u5931\u8d25\uff0ccommand2\u4f1a\u7ee7\u7eed\u6267\u884c\u3002\u4f46\u662f\uff0c\u6574\u4e2a\u6784\u5efa\u9636\u6bb5\u7684\u72b6\u6001\u662f\u5931\u8d25\u3002 \u5982\u679ccommand2\u53ea\u6709\u5728command1\u6210\u529f\u540e\u624d\u80fd\u6267\u884c\uff0c\u5c31\u8981\u5199\u6210\u4e0b\u9762\u8fd9\u6837\u3002 script : command1 && command2 4.3 \u5b9e\u4f8b\uff1aNode \u9879\u76ee \u00b6 Node \u9879\u76ee\u7684\u73af\u5883\u9700\u8981\u5199\u6210\u4e0b\u9762\u8fd9\u6837\u3002 language : node_js node_js : - \"8\" \u4e0a\u9762\u4ee3\u7801\u4e2d\uff0cnode_js\u5b57\u6bb5\u7528\u6765\u6307\u5b9a Node \u7248\u672c\u3002 Node \u9879\u76ee\u7684install\u548cscript\u9636\u6bb5\u90fd\u6709\u9ed8\u8ba4\u811a\u672c\uff0c\u53ef\u4ee5\u7701\u7565\u3002 install\u9ed8\u8ba4\u503c\uff1anpm install script\u9ed8\u8ba4\u503c\uff1anpm test \u66f4\u591a\u8bbe\u7f6e\u8bf7\u770b\u5b98\u65b9\u6587\u6863\u3002 4.4 \u90e8\u7f72 \u00b6 script\u9636\u6bb5\u7ed3\u675f\u4ee5\u540e\uff0c\u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u901a\u77e5\u6b65\u9aa4\uff08notification\uff09\u548c\u90e8\u7f72\u6b65\u9aa4\uff08deployment\uff09\uff0c\u5b83\u4eec\u4e0d\u662f\u5fc5\u987b\u7684\u3002 \u90e8\u7f72\u7684\u811a\u672c\u53ef\u4ee5\u5728script\u9636\u6bb5\u6267\u884c\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 Travis \u4e3a\u51e0\u5341\u79cd\u5e38\u89c1\u670d\u52a1\u63d0\u4f9b\u7684\u5feb\u6377\u90e8\u7f72\u529f\u80fd\u3002\u6bd4\u5982\uff0c\u8981\u90e8\u7f72\u5230 Github Pages\uff0c\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u8fd9\u6837\u3002 deploy : provider : pages skip_cleanup : true github_token : $GITHUB_TOKEN # Set in travis - ci . org dashboard on : branch : master \u5176\u4ed6\u90e8\u7f72\u65b9\u5f0f\uff0c\u8bf7\u770b\u5b98\u65b9\u6587\u6863\u3002 4.5 \u94a9\u5b50\u65b9\u6cd5 \u00b6 Travis \u4e3a\u4e0a\u9762\u8fd9\u4e9b\u9636\u6bb5\u63d0\u4f9b\u4e867\u4e2a\u94a9\u5b50\u3002 - before_install\uff1ainstall \u9636\u6bb5\u4e4b\u524d\u6267\u884c - before_script\uff1ascript \u9636\u6bb5\u4e4b\u524d\u6267\u884c - after_failure\uff1ascript \u9636\u6bb5\u5931\u8d25\u65f6\u6267\u884c - after_success\uff1ascript \u9636\u6bb5\u6210\u529f\u65f6\u6267\u884c - before_deploy\uff1adeploy \u6b65\u9aa4\u4e4b\u524d\u6267\u884c - after_deploy\uff1adeploy \u6b65\u9aa4\u4e4b\u540e\u6267\u884c - after_script\uff1ascript \u9636\u6bb5\u4e4b\u540e\u6267\u884c \u5b8c\u6574\u7684\u751f\u547d\u5468\u671f\uff0c\u4ece\u5f00\u59cb\u5230\u7ed3\u675f\u662f\u4e0b\u9762\u7684\u6d41\u7a0b\u3002 before_install install before_script script aftersuccess or afterfailure [OPTIONAL] before_deploy [OPTIONAL] deploy [OPTIONAL] after_deploy after_script \u4e0b\u9762\u662f\u4e00\u4e2abefore_install\u94a9\u5b50\u7684\u4f8b\u5b50\u3002 before_install: - sudo apt-get -qq update - sudo apt-get install -y libxml2-dev \u4e0a\u9762\u4ee3\u7801\u8868\u793abefore_install\u9636\u6bb5\u8981\u505a\u4e24\u4ef6\u4e8b\uff0c\u7b2c\u4e00\u4ef6\u4e8b\u662f\u8981\u66f4\u65b0\u4f9d\u8d56\uff0c\u7b2c\u4e8c\u4ef6\u4e8b\u662f\u5b89\u88c5libxml2-dev\u3002\u7528\u5230\u7684\u51e0\u4e2a\u53c2\u6570\u7684\u542b\u4e49\u5982\u4e0b\uff1a-qq\u8868\u793a\u51cf\u5c11\u4e2d\u95f4\u6b65\u9aa4\u7684\u8f93\u51fa\uff0c-y\u8868\u793a\u5982\u679c\u9700\u8981\u7528\u6237\u8f93\u5165\uff0c\u603b\u662f\u8f93\u5165yes\u3002 4.6 \u8fd0\u884c\u72b6\u6001 \u00b6 \u6700\u540e\uff0cTravis \u6bcf\u6b21\u8fd0\u884c\uff0c\u53ef\u80fd\u4f1a\u8fd4\u56de\u56db\u79cd\u72b6\u6001\u3002 passed\uff1a\u8fd0\u884c\u6210\u529f\uff0c\u6240\u6709\u6b65\u9aa4\u7684\u9000\u51fa\u7801\u90fd\u662f0 canceled\uff1a\u7528\u6237\u53d6\u6d88\u6267\u884c errored\uff1abefore_install\u3001install\u3001before_script\u6709\u975e\u96f6\u9000\u51fa\u7801\uff0c\u8fd0\u884c\u4f1a\u7acb\u5373\u505c\u6b62 failed \uff1ascript\u6709\u975e\u96f6\u72b6\u6001\u7801 \uff0c\u4f1a\u7ee7\u7eed\u8fd0\u884c \u4e94\u3001\u4f7f\u7528\u6280\u5de7 \u00b6 5.1 \u73af\u5883\u53d8\u91cf \u00b6 .travis.yml\u7684env\u5b57\u6bb5\u53ef\u4ee5\u5b9a\u4e49\u73af\u5883\u53d8\u91cf\u3002 env: - DB=postgres - SH=bash - PACKAGE_VERSION=\"1.0.*\" \u7136\u540e\uff0c\u811a\u672c\u5185\u90e8\u5c31\u4f7f\u7528\u8fd9\u4e9b\u53d8\u91cf\u4e86\u3002 \u6709\u4e9b\u73af\u5883\u53d8\u91cf\uff08\u6bd4\u5982\u7528\u6237\u540d\u548c\u5bc6\u7801\uff09\u4e0d\u80fd\u516c\u5f00\uff0c\u8fd9\u65f6\u53ef\u4ee5\u901a\u8fc7 Travis \u7f51\u7ad9\uff0c\u5199\u5728\u6bcf\u4e2a\u4ed3\u5e93\u7684\u8bbe\u7f6e\u9875\u91cc\u9762\uff0cTravis \u4f1a\u81ea\u52a8\u628a\u5b83\u4eec\u52a0\u5165\u73af\u5883\u53d8\u91cf\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u811a\u672c\u5185\u90e8\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\uff0c\u4f46\u662f\u53ea\u6709\u7ba1\u7406\u5458\u624d\u80fd\u770b\u5230\u53d8\u91cf\u7684\u503c\u3002\u5177\u4f53\u64cd\u4f5c\u8bf7\u770b\u5b98\u65b9\u6587\u6863\u3002 image 5.2 \u52a0\u5bc6\u4fe1\u606f \u00b6 \u5982\u679c\u4e0d\u653e\u5fc3\u4fdd\u5bc6\u4fe1\u606f\u660e\u6587\u5b58\u5728 Travis \u7684\u7f51\u7ad9\uff0c\u53ef\u4ee5\u4f7f\u7528 Travis \u63d0\u4f9b\u7684\u52a0\u5bc6\u529f\u80fd\u3002 \u9996\u5148\uff0c\u5b89\u88c5 Ruby \u7684\u5305travis\u3002 $ apt install travis \u7136\u540e\uff0c\u5c31\u53ef\u4ee5\u7528travis encrypt\u547d\u4ee4\u52a0\u5bc6\u4fe1\u606f\u3002 \u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u3002 $ travis encrypt SOMEVAR = secretvalue \u4e0a\u9762\u547d\u4ee4\u4e2d\uff0cSOMEVAR\u662f\u8981\u52a0\u5bc6\u7684\u53d8\u91cf\u540d\uff0csecretvalue\u662f\u8981\u52a0\u5bc6\u7684\u53d8\u91cf\u503c\u3002\u6267\u884c\u4ee5\u540e\uff0c\u5c4f\u5e55\u4e0a\u4f1a\u8f93\u51fa\u5982\u4e0b\u4fe1\u606f\u3002 secure: \".... encrypted data ....\" \u73b0\u5728\uff0c\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e00\u884c\u52a0\u5165.travis.yml\u3002 env : global : - secure : \".... encrypted data ....\" \u7136\u540e\uff0c\u811a\u672c\u91cc\u9762\u5c31\u53ef\u4ee5\u4f7f\u7528\u73af\u5883\u53d8\u91cf$SOMEVAR\u4e86\uff0cTravis \u4f1a\u5728\u8fd0\u884c\u65f6\u81ea\u52a8\u5bf9\u5b83\u89e3\u5bc6\u3002 travis encrypt\u547d\u4ee4\u7684--add\u53c2\u6570\u4f1a\u628a\u8f93\u51fa\u81ea\u52a8\u5199\u5165.travis.yml\uff0c\u7701\u6389\u4e86\u4fee\u6539env\u5b57\u6bb5\u7684\u6b65\u9aa4\u3002 $ travis encrypt SOMEVAR = secretvalue --add \u8be6\u7ec6\u4fe1\u606f\u8bf7\u770b\u5b98\u65b9\u6587\u6863\u3002 5.3 \u52a0\u5bc6\u6587\u4ef6 \u00b6 \u5982\u679c\u8981\u52a0\u5bc6\u7684\u662f\u6587\u4ef6\uff08\u6bd4\u5982\u79c1\u94a5\uff09\uff0cTravis \u63d0\u4f9b\u4e86\u52a0\u5bc6\u6587\u4ef6\u529f\u80fd\u3002 \u5b89\u88c5\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u4ee5\u540e\uff0c\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u767b\u5165 Travis CI\u3002 $ travis login \u7136\u540e\uff0c\u8fdb\u5165\u9879\u76ee\u7684\u6839\u76ee\u5f55\uff0c\u4f7f\u7528travis encrypt-file\u547d\u4ee4\u52a0\u5bc6\u90a3\u4e9b\u60f3\u8981\u52a0\u5bc6\u7684\u6587\u4ef6\u3002 $ travis encrypt-file bacon.txt encrypting bacon.txt for rkh/travis-encrypt-file-example storing result as bacon.txt.enc storing secure env variables for decryption Please add the following to your build script ( before_install stage in your .travis.yml, for instance ) : openssl aes-256-cbc -K $encrypted_0a6446eb3ae3_key -iv $encrypted_0a6446eb3ae3_key -in bacon.txt.enc -out bacon.txt -d Pro Tip: You can add it automatically by running with --add. Make sure to add bacon.txt.enc to the git repository. Make sure not to add bacon.txt to the git repository. Commit all changes to your .travis.yml. \u4e0a\u9762\u7684\u4ee3\u7801\u5bf9\u6587\u4ef6bacon.txt\u8fdb\u884c\u52a0\u5bc6\uff0c\u52a0\u5bc6\u540e\u4f1a\u751f\u6210bacon.txt.enc\uff0c\u8be5\u6587\u4ef6\u9700\u8981\u63d0\u4ea4\u5230\u4ee3\u7801\u5e93\u3002\u6b64\u5916\uff0c\u8be5\u547d\u4ee4\u8fd8\u4f1a\u751f\u6210\u4e00\u4e2a\u73af\u5883\u53d8\u91cf$encrypted_0a6446eb3ae3_key\uff0c\u4fdd\u5b58\u5bc6\u94a5\uff0c\u50a8\u5b58\u5728 Travis CI\uff0c\u6587\u4ef6\u89e3\u5bc6\u65f6\u9700\u8981\u8fd9\u4e2a\u73af\u5883\u53d8\u91cf\u3002\u4f60\u9700\u8981\u628a\u89e3\u5bc6\u6240\u9700\u7684openssl\u547d\u4ee4\uff0c\u5199\u5728.travis.yml\u7684before_install\u5b57\u6bb5\u91cc\u9762\u3002\u8fd9\u4e9b\u90fd\u5199\u5728\u4e0a\u9762\u7684\u547d\u4ee4\u884c\u63d0\u793a\u91cc\u9762\u3002 --add\u53c2\u6570\u53ef\u4ee5\u81ea\u52a8\u628a\u73af\u5883\u53d8\u91cf\u5199\u5165.travis.yml\u3002 $ travis encrypt-file bacon.txt --add encrypting bacon.txt for rkh/travis-encrypt-file-example storing result as bacon.txt.enc storing secure env variables for decryption Make sure to add bacon.txt.enc to the git repository. Make sure not to add bacon.txt to the git repository. Commit all changes to your .travis.yml. \u8be6\u7ec6\u4fe1\u606f\u8bf7\u770b\u5b98\u65b9\u6587\u6863\uff0c\u5b9e\u9645\u7684\u4f8b\u5b50\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u4e24\u7bc7\u6587\u7ae0\u3002 Auto-deploying built products to gh-pages with Travis SSH deploys with Travis CI","title":"Use"},{"location":"yaml-travis/travis-1/#travis-ci","text":"\u7f16\u5199\u4ee3\u7801\u53ea\u662f\u8f6f\u4ef6\u5f00\u53d1\u7684\u4e00\u5c0f\u90e8\u5206\uff0c\u66f4\u591a\u7684\u65f6\u95f4\u5f80\u5f80\u82b1\u5728\u6784\u5efa\uff08build\uff09\u548c\u6d4b\u8bd5\uff08test\uff09\u3002 \u4e3a\u4e86\u63d0\u9ad8\u8f6f\u4ef6\u5f00\u53d1\u7684\u6548\u7387\uff0c\u6784\u5efa\u548c\u6d4b\u8bd5\u7684\u81ea\u52a8\u5316\u5de5\u5177\u5c42\u51fa\u4e0d\u7a77\u3002Travis CI \u5c31\u662f\u8fd9\u7c7b\u5de5\u5177\u4e4b\u4e2d\uff0c\u5e02\u573a\u4efd\u989d\u6700\u5927\u7684\u4e00\u4e2a\u3002 image \u672c\u6587\u4ecb\u7ecd Travis CI \u7684\u57fa\u672c\u7528\u6cd5\u3002\u7528\u597d\u8fd9\u4e2a\u5de5\u5177\u4e0d\u4ec5\u53ef\u4ee5\u63d0\u9ad8\u6548\u7387\uff0c\u8fd8\u80fd\u4f7f\u5f00\u53d1\u6d41\u7a0b\u66f4\u53ef\u9760\u548c\u4e13\u4e1a\u5316\uff0c\u4ece\u800c\u63d0\u9ad8\u8f6f\u4ef6\u7684\u4ef7\u503c\u3002\u800c\u4e14\uff0c\u5b83\u5bf9\u4e8e\u5f00\u6e90\u9879\u76ee\u662f\u514d\u8d39\u7684\uff0c\u4e0d\u82b1\u4e00\u5206\u94b1\uff0c\u5c31\u80fd\u5e2e\u4f60\u505a\u6389\u5f88\u591a\u4e8b\u60c5\u3002","title":"\u6301\u7eed\u96c6\u6210\u670d\u52a1 Travis CI \u4f7f\u7528\u6559\u7a0b"},{"location":"yaml-travis/travis-1/#_1","text":"Travis CI \u63d0\u4f9b\u7684\u662f\u6301\u7eed\u96c6\u6210\u670d\u52a1\uff08Continuous Integration\uff0c\u7b80\u79f0 CI\uff09\u3002\u5b83\u7ed1\u5b9a Github \u4e0a\u9762\u7684\u9879\u76ee\uff0c\u53ea\u8981\u6709\u65b0\u7684\u4ee3\u7801\uff0c\u5c31\u4f1a\u81ea\u52a8\u6293\u53d6\u3002\u7136\u540e\uff0c\u63d0\u4f9b\u4e00\u4e2a\u8fd0\u884c\u73af\u5883\uff0c\u6267\u884c\u6d4b\u8bd5\uff0c\u5b8c\u6210\u6784\u5efa\uff0c\u8fd8\u80fd\u90e8\u7f72\u5230\u670d\u52a1\u5668\u3002 \u6301\u7eed\u96c6\u6210\u6307\u7684\u662f\u53ea\u8981\u4ee3\u7801\u6709\u53d8\u66f4\uff0c\u5c31\u81ea\u52a8\u8fd0\u884c\u6784\u5efa\u548c\u6d4b\u8bd5\uff0c\u53cd\u9988\u8fd0\u884c\u7ed3\u679c\u3002\u786e\u4fdd\u7b26\u5408\u9884\u671f\u4ee5\u540e\uff0c\u518d\u5c06\u65b0\u4ee3\u7801\"\u96c6\u6210\"\u5230\u4e3b\u5e72\u3002 \u6301\u7eed\u96c6\u6210\u7684\u597d\u5904\u5728\u4e8e\uff0c\u6bcf\u6b21\u4ee3\u7801\u7684\u5c0f\u5e45\u53d8\u66f4\uff0c\u5c31\u80fd\u770b\u5230\u8fd0\u884c\u7ed3\u679c\uff0c\u4ece\u800c\u4e0d\u65ad\u7d2f\u79ef\u5c0f\u7684\u53d8\u66f4\uff0c\u800c\u4e0d\u662f\u5728\u5f00\u53d1\u5468\u671f\u7ed3\u675f\u65f6\uff0c\u4e00\u4e0b\u5b50\u5408\u5e76\u4e00\u5927\u5757\u4ee3\u7801\u3002","title":"\u4e00\u3001\u4ec0\u4e48\u662f\u6301\u7eed\u96c6\u6210\uff1f"},{"location":"yaml-travis/travis-1/#_2","text":"Travis CI \u53ea\u652f\u6301 Github\uff0c\u4e0d\u652f\u6301\u5176\u4ed6\u4ee3\u7801\u6258\u7ba1\u670d\u52a1\u3002\u8fd9\u610f\u5473\u7740\uff0c\u4f60\u5fc5\u987b\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u624d\u80fd\u4f7f\u7528 Travis CI\u3002 \u62e5\u6709 GitHub \u5e10\u53f7 \u8be5\u5e10\u53f7\u4e0b\u9762\u6709\u4e00\u4e2a\u9879\u76ee \u8be5\u9879\u76ee\u91cc\u9762\u6709\u53ef\u8fd0\u884c\u7684\u4ee3\u7801 \u8be5\u9879\u76ee\u8fd8\u5305\u542b\u6784\u5efa\u6216\u6d4b\u8bd5\u811a\u672c \u5982\u679c\u8fd9\u4e9b\u6761\u4ef6\u90fd\u6ca1\u95ee\u9898\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u4f7f\u7528 Travis CI \u4e86\u3002 \u9996\u5148\uff0c\u8bbf\u95ee\u5b98\u65b9\u7f51\u7ad9 travis-ci.org\uff0c\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684\u4e2a\u4eba\u5934\u50cf\uff0c\u4f7f\u7528 Github \u8d26\u6237\u767b\u5165 Travis CI\u3002 Travis \u4f1a\u5217\u51fa Github \u4e0a\u9762\u4f60\u7684\u6240\u6709\u4ed3\u5e93\uff0c\u4ee5\u53ca\u4f60\u6240\u5c5e\u4e8e\u7684\u7ec4\u7ec7\u3002\u6b64\u65f6\uff0c\u9009\u62e9\u4f60\u9700\u8981 Travis \u5e2e\u4f60\u6784\u5efa\u7684\u4ed3\u5e93\uff0c\u6253\u5f00\u4ed3\u5e93\u65c1\u8fb9\u7684\u5f00\u5173\u3002\u4e00\u65e6\u6fc0\u6d3b\u4e86\u4e00\u4e2a\u4ed3\u5e93\uff0cTravis \u4f1a\u76d1\u542c\u8fd9\u4e2a\u4ed3\u5e93\u7684\u6240\u6709\u53d8\u5316\u3002 image","title":"\u4e8c\u3001\u4f7f\u7528\u51c6\u5907"},{"location":"yaml-travis/travis-1/#travisyml","text":"Travis \u8981\u6c42\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u9762\uff0c\u5fc5\u987b\u6709\u4e00\u4e2a.travis.yml\u6587\u4ef6\u3002\u8fd9\u662f\u914d\u7f6e\u6587\u4ef6\uff0c\u6307\u5b9a\u4e86 Travis \u7684\u884c\u4e3a\u3002\u8be5\u6587\u4ef6\u5fc5\u987b\u4fdd\u5b58\u5728 Github \u4ed3\u5e93\u91cc\u9762\uff0c\u4e00\u65e6\u4ee3\u7801\u4ed3\u5e93\u6709\u65b0\u7684 Commit\uff0cTravis \u5c31\u4f1a\u53bb\u627e\u8fd9\u4e2a\u6587\u4ef6\uff0c\u6267\u884c\u91cc\u9762\u7684\u547d\u4ee4\u3002 \u8fd9\u4e2a\u6587\u4ef6\u91c7\u7528 YAML \u683c\u5f0f\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u6700\u7b80\u5355\u7684 Python \u9879\u76ee\u7684.travis.yml\u6587\u4ef6\u3002 language : python script : true \u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c\u8bbe\u7f6e\u4e86\u4e24\u4e2a\u5b57\u6bb5\u3002language\u5b57\u6bb5\u6307\u5b9a\u4e86\u9ed8\u8ba4\u8fd0\u884c\u73af\u5883\uff0c\u8fd9\u91cc\u8bbe\u5b9a\u4f7f\u7528 Python \u73af\u5883\u3002script\u5b57\u6bb5\u6307\u5b9a\u8981\u8fd0\u884c\u7684\u811a\u672c\uff0cscript: true\u8868\u793a\u4e0d\u6267\u884c\u4efb\u4f55\u811a\u672c\uff0c\u72b6\u6001\u76f4\u63a5\u8bbe\u4e3a\u6210\u529f\u3002 Travis \u9ed8\u8ba4\u63d0\u4f9b\u7684\u8fd0\u884c\u73af\u5883\uff0c\u8bf7\u53c2\u8003\u5b98\u65b9\u6587\u6863 \u3002\u76ee\u524d\u4e00\u5171\u652f\u630131\u79cd\u8bed\u8a00\uff0c\u4ee5\u540e\u8fd8\u4f1a\u4e0d\u65ad\u589e\u52a0\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\u7684.travis.yml\u3002 language : python sudo : required before_install : sudo pip install foo script : py . test \u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c\u8bbe\u7f6e\u4e86\u56db\u4e2a\u5b57\u6bb5\uff1a\u8fd0\u884c\u73af\u5883\u662f Python\uff0c\u9700\u8981sudo\u6743\u9650\uff0c\u5728\u5b89\u88c5\u4f9d\u8d56\u4e4b\u524d\u9700\u8981\u5b89\u88c5foo\u6a21\u5757\uff0c\u7136\u540e\u6267\u884c\u811a\u672cpy.test\u3002","title":"\u4e09\u3001.travis.yml"},{"location":"yaml-travis/travis-1/#_3","text":"Travis \u7684\u8fd0\u884c\u6d41\u7a0b\u5f88\u7b80\u5355\uff0c\u4efb\u4f55\u9879\u76ee\u90fd\u4f1a\u7ecf\u8fc7\u4e24\u4e2a\u9636\u6bb5\u3002 install \u9636\u6bb5\uff1a\u5b89\u88c5\u4f9d\u8d56 script \u9636\u6bb5\uff1a\u8fd0\u884c\u811a\u672c","title":"\u56db\u3001\u8fd0\u884c\u6d41\u7a0b"},{"location":"yaml-travis/travis-1/#41-install","text":"install\u5b57\u6bb5\u7528\u6765\u6307\u5b9a\u5b89\u88c5\u811a\u672c\u3002 install: ./install-dependencies.sh \u5982\u679c\u6709\u591a\u4e2a\u811a\u672c\uff0c\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u7684\u5f62\u5f0f\u3002 install: - command1 - command2 \u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c\u5982\u679ccommand1\u5931\u8d25\u4e86\uff0c\u6574\u4e2a\u6784\u5efa\u5c31\u4f1a\u505c\u4e0b\u6765\uff0c\u4e0d\u518d\u5f80\u4e0b\u8fdb\u884c\u3002 \u5982\u679c\u4e0d\u9700\u8981\u5b89\u88c5\uff0c\u5373\u8df3\u8fc7\u5b89\u88c5\u9636\u6bb5\uff0c\u5c31\u76f4\u63a5\u8bbe\u4e3atrue\u3002 install : true","title":"4.1 install \u5b57\u6bb5"},{"location":"yaml-travis/travis-1/#42script","text":"script\u5b57\u6bb5\u7528\u6765\u6307\u5b9a\u6784\u5efa\u6216\u6d4b\u8bd5\u811a\u672c\u3002 script : bundle exec thor build \u5982\u679c\u6709\u591a\u4e2a\u811a\u672c\uff0c\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u7684\u5f62\u5f0f\u3002 script: - command1 - command2 \u6ce8\u610f\uff0cscript\u4e0einstall\u4e0d\u4e00\u6837\uff0c\u5982\u679ccommand1\u5931\u8d25\uff0ccommand2\u4f1a\u7ee7\u7eed\u6267\u884c\u3002\u4f46\u662f\uff0c\u6574\u4e2a\u6784\u5efa\u9636\u6bb5\u7684\u72b6\u6001\u662f\u5931\u8d25\u3002 \u5982\u679ccommand2\u53ea\u6709\u5728command1\u6210\u529f\u540e\u624d\u80fd\u6267\u884c\uff0c\u5c31\u8981\u5199\u6210\u4e0b\u9762\u8fd9\u6837\u3002 script : command1 && command2","title":"4.2\u3001script \u5b57\u6bb5"},{"location":"yaml-travis/travis-1/#43-node","text":"Node \u9879\u76ee\u7684\u73af\u5883\u9700\u8981\u5199\u6210\u4e0b\u9762\u8fd9\u6837\u3002 language : node_js node_js : - \"8\" \u4e0a\u9762\u4ee3\u7801\u4e2d\uff0cnode_js\u5b57\u6bb5\u7528\u6765\u6307\u5b9a Node \u7248\u672c\u3002 Node \u9879\u76ee\u7684install\u548cscript\u9636\u6bb5\u90fd\u6709\u9ed8\u8ba4\u811a\u672c\uff0c\u53ef\u4ee5\u7701\u7565\u3002 install\u9ed8\u8ba4\u503c\uff1anpm install script\u9ed8\u8ba4\u503c\uff1anpm test \u66f4\u591a\u8bbe\u7f6e\u8bf7\u770b\u5b98\u65b9\u6587\u6863\u3002","title":"4.3 \u5b9e\u4f8b\uff1aNode \u9879\u76ee"},{"location":"yaml-travis/travis-1/#44","text":"script\u9636\u6bb5\u7ed3\u675f\u4ee5\u540e\uff0c\u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u901a\u77e5\u6b65\u9aa4\uff08notification\uff09\u548c\u90e8\u7f72\u6b65\u9aa4\uff08deployment\uff09\uff0c\u5b83\u4eec\u4e0d\u662f\u5fc5\u987b\u7684\u3002 \u90e8\u7f72\u7684\u811a\u672c\u53ef\u4ee5\u5728script\u9636\u6bb5\u6267\u884c\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 Travis \u4e3a\u51e0\u5341\u79cd\u5e38\u89c1\u670d\u52a1\u63d0\u4f9b\u7684\u5feb\u6377\u90e8\u7f72\u529f\u80fd\u3002\u6bd4\u5982\uff0c\u8981\u90e8\u7f72\u5230 Github Pages\uff0c\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u8fd9\u6837\u3002 deploy : provider : pages skip_cleanup : true github_token : $GITHUB_TOKEN # Set in travis - ci . org dashboard on : branch : master \u5176\u4ed6\u90e8\u7f72\u65b9\u5f0f\uff0c\u8bf7\u770b\u5b98\u65b9\u6587\u6863\u3002","title":"4.4 \u90e8\u7f72"},{"location":"yaml-travis/travis-1/#45","text":"Travis \u4e3a\u4e0a\u9762\u8fd9\u4e9b\u9636\u6bb5\u63d0\u4f9b\u4e867\u4e2a\u94a9\u5b50\u3002 - before_install\uff1ainstall \u9636\u6bb5\u4e4b\u524d\u6267\u884c - before_script\uff1ascript \u9636\u6bb5\u4e4b\u524d\u6267\u884c - after_failure\uff1ascript \u9636\u6bb5\u5931\u8d25\u65f6\u6267\u884c - after_success\uff1ascript \u9636\u6bb5\u6210\u529f\u65f6\u6267\u884c - before_deploy\uff1adeploy \u6b65\u9aa4\u4e4b\u524d\u6267\u884c - after_deploy\uff1adeploy \u6b65\u9aa4\u4e4b\u540e\u6267\u884c - after_script\uff1ascript \u9636\u6bb5\u4e4b\u540e\u6267\u884c \u5b8c\u6574\u7684\u751f\u547d\u5468\u671f\uff0c\u4ece\u5f00\u59cb\u5230\u7ed3\u675f\u662f\u4e0b\u9762\u7684\u6d41\u7a0b\u3002 before_install install before_script script aftersuccess or afterfailure [OPTIONAL] before_deploy [OPTIONAL] deploy [OPTIONAL] after_deploy after_script \u4e0b\u9762\u662f\u4e00\u4e2abefore_install\u94a9\u5b50\u7684\u4f8b\u5b50\u3002 before_install: - sudo apt-get -qq update - sudo apt-get install -y libxml2-dev \u4e0a\u9762\u4ee3\u7801\u8868\u793abefore_install\u9636\u6bb5\u8981\u505a\u4e24\u4ef6\u4e8b\uff0c\u7b2c\u4e00\u4ef6\u4e8b\u662f\u8981\u66f4\u65b0\u4f9d\u8d56\uff0c\u7b2c\u4e8c\u4ef6\u4e8b\u662f\u5b89\u88c5libxml2-dev\u3002\u7528\u5230\u7684\u51e0\u4e2a\u53c2\u6570\u7684\u542b\u4e49\u5982\u4e0b\uff1a-qq\u8868\u793a\u51cf\u5c11\u4e2d\u95f4\u6b65\u9aa4\u7684\u8f93\u51fa\uff0c-y\u8868\u793a\u5982\u679c\u9700\u8981\u7528\u6237\u8f93\u5165\uff0c\u603b\u662f\u8f93\u5165yes\u3002","title":"4.5 \u94a9\u5b50\u65b9\u6cd5"},{"location":"yaml-travis/travis-1/#46","text":"\u6700\u540e\uff0cTravis \u6bcf\u6b21\u8fd0\u884c\uff0c\u53ef\u80fd\u4f1a\u8fd4\u56de\u56db\u79cd\u72b6\u6001\u3002 passed\uff1a\u8fd0\u884c\u6210\u529f\uff0c\u6240\u6709\u6b65\u9aa4\u7684\u9000\u51fa\u7801\u90fd\u662f0 canceled\uff1a\u7528\u6237\u53d6\u6d88\u6267\u884c errored\uff1abefore_install\u3001install\u3001before_script\u6709\u975e\u96f6\u9000\u51fa\u7801\uff0c\u8fd0\u884c\u4f1a\u7acb\u5373\u505c\u6b62 failed \uff1ascript\u6709\u975e\u96f6\u72b6\u6001\u7801 \uff0c\u4f1a\u7ee7\u7eed\u8fd0\u884c","title":"4.6 \u8fd0\u884c\u72b6\u6001"},{"location":"yaml-travis/travis-1/#_4","text":"","title":"\u4e94\u3001\u4f7f\u7528\u6280\u5de7"},{"location":"yaml-travis/travis-1/#51","text":".travis.yml\u7684env\u5b57\u6bb5\u53ef\u4ee5\u5b9a\u4e49\u73af\u5883\u53d8\u91cf\u3002 env: - DB=postgres - SH=bash - PACKAGE_VERSION=\"1.0.*\" \u7136\u540e\uff0c\u811a\u672c\u5185\u90e8\u5c31\u4f7f\u7528\u8fd9\u4e9b\u53d8\u91cf\u4e86\u3002 \u6709\u4e9b\u73af\u5883\u53d8\u91cf\uff08\u6bd4\u5982\u7528\u6237\u540d\u548c\u5bc6\u7801\uff09\u4e0d\u80fd\u516c\u5f00\uff0c\u8fd9\u65f6\u53ef\u4ee5\u901a\u8fc7 Travis \u7f51\u7ad9\uff0c\u5199\u5728\u6bcf\u4e2a\u4ed3\u5e93\u7684\u8bbe\u7f6e\u9875\u91cc\u9762\uff0cTravis \u4f1a\u81ea\u52a8\u628a\u5b83\u4eec\u52a0\u5165\u73af\u5883\u53d8\u91cf\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u811a\u672c\u5185\u90e8\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\uff0c\u4f46\u662f\u53ea\u6709\u7ba1\u7406\u5458\u624d\u80fd\u770b\u5230\u53d8\u91cf\u7684\u503c\u3002\u5177\u4f53\u64cd\u4f5c\u8bf7\u770b\u5b98\u65b9\u6587\u6863\u3002 image","title":"5.1 \u73af\u5883\u53d8\u91cf"},{"location":"yaml-travis/travis-1/#52","text":"\u5982\u679c\u4e0d\u653e\u5fc3\u4fdd\u5bc6\u4fe1\u606f\u660e\u6587\u5b58\u5728 Travis \u7684\u7f51\u7ad9\uff0c\u53ef\u4ee5\u4f7f\u7528 Travis \u63d0\u4f9b\u7684\u52a0\u5bc6\u529f\u80fd\u3002 \u9996\u5148\uff0c\u5b89\u88c5 Ruby \u7684\u5305travis\u3002 $ apt install travis \u7136\u540e\uff0c\u5c31\u53ef\u4ee5\u7528travis encrypt\u547d\u4ee4\u52a0\u5bc6\u4fe1\u606f\u3002 \u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u3002 $ travis encrypt SOMEVAR = secretvalue \u4e0a\u9762\u547d\u4ee4\u4e2d\uff0cSOMEVAR\u662f\u8981\u52a0\u5bc6\u7684\u53d8\u91cf\u540d\uff0csecretvalue\u662f\u8981\u52a0\u5bc6\u7684\u53d8\u91cf\u503c\u3002\u6267\u884c\u4ee5\u540e\uff0c\u5c4f\u5e55\u4e0a\u4f1a\u8f93\u51fa\u5982\u4e0b\u4fe1\u606f\u3002 secure: \".... encrypted data ....\" \u73b0\u5728\uff0c\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e00\u884c\u52a0\u5165.travis.yml\u3002 env : global : - secure : \".... encrypted data ....\" \u7136\u540e\uff0c\u811a\u672c\u91cc\u9762\u5c31\u53ef\u4ee5\u4f7f\u7528\u73af\u5883\u53d8\u91cf$SOMEVAR\u4e86\uff0cTravis \u4f1a\u5728\u8fd0\u884c\u65f6\u81ea\u52a8\u5bf9\u5b83\u89e3\u5bc6\u3002 travis encrypt\u547d\u4ee4\u7684--add\u53c2\u6570\u4f1a\u628a\u8f93\u51fa\u81ea\u52a8\u5199\u5165.travis.yml\uff0c\u7701\u6389\u4e86\u4fee\u6539env\u5b57\u6bb5\u7684\u6b65\u9aa4\u3002 $ travis encrypt SOMEVAR = secretvalue --add \u8be6\u7ec6\u4fe1\u606f\u8bf7\u770b\u5b98\u65b9\u6587\u6863\u3002","title":"5.2 \u52a0\u5bc6\u4fe1\u606f"},{"location":"yaml-travis/travis-1/#53","text":"\u5982\u679c\u8981\u52a0\u5bc6\u7684\u662f\u6587\u4ef6\uff08\u6bd4\u5982\u79c1\u94a5\uff09\uff0cTravis \u63d0\u4f9b\u4e86\u52a0\u5bc6\u6587\u4ef6\u529f\u80fd\u3002 \u5b89\u88c5\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u4ee5\u540e\uff0c\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u767b\u5165 Travis CI\u3002 $ travis login \u7136\u540e\uff0c\u8fdb\u5165\u9879\u76ee\u7684\u6839\u76ee\u5f55\uff0c\u4f7f\u7528travis encrypt-file\u547d\u4ee4\u52a0\u5bc6\u90a3\u4e9b\u60f3\u8981\u52a0\u5bc6\u7684\u6587\u4ef6\u3002 $ travis encrypt-file bacon.txt encrypting bacon.txt for rkh/travis-encrypt-file-example storing result as bacon.txt.enc storing secure env variables for decryption Please add the following to your build script ( before_install stage in your .travis.yml, for instance ) : openssl aes-256-cbc -K $encrypted_0a6446eb3ae3_key -iv $encrypted_0a6446eb3ae3_key -in bacon.txt.enc -out bacon.txt -d Pro Tip: You can add it automatically by running with --add. Make sure to add bacon.txt.enc to the git repository. Make sure not to add bacon.txt to the git repository. Commit all changes to your .travis.yml. \u4e0a\u9762\u7684\u4ee3\u7801\u5bf9\u6587\u4ef6bacon.txt\u8fdb\u884c\u52a0\u5bc6\uff0c\u52a0\u5bc6\u540e\u4f1a\u751f\u6210bacon.txt.enc\uff0c\u8be5\u6587\u4ef6\u9700\u8981\u63d0\u4ea4\u5230\u4ee3\u7801\u5e93\u3002\u6b64\u5916\uff0c\u8be5\u547d\u4ee4\u8fd8\u4f1a\u751f\u6210\u4e00\u4e2a\u73af\u5883\u53d8\u91cf$encrypted_0a6446eb3ae3_key\uff0c\u4fdd\u5b58\u5bc6\u94a5\uff0c\u50a8\u5b58\u5728 Travis CI\uff0c\u6587\u4ef6\u89e3\u5bc6\u65f6\u9700\u8981\u8fd9\u4e2a\u73af\u5883\u53d8\u91cf\u3002\u4f60\u9700\u8981\u628a\u89e3\u5bc6\u6240\u9700\u7684openssl\u547d\u4ee4\uff0c\u5199\u5728.travis.yml\u7684before_install\u5b57\u6bb5\u91cc\u9762\u3002\u8fd9\u4e9b\u90fd\u5199\u5728\u4e0a\u9762\u7684\u547d\u4ee4\u884c\u63d0\u793a\u91cc\u9762\u3002 --add\u53c2\u6570\u53ef\u4ee5\u81ea\u52a8\u628a\u73af\u5883\u53d8\u91cf\u5199\u5165.travis.yml\u3002 $ travis encrypt-file bacon.txt --add encrypting bacon.txt for rkh/travis-encrypt-file-example storing result as bacon.txt.enc storing secure env variables for decryption Make sure to add bacon.txt.enc to the git repository. Make sure not to add bacon.txt to the git repository. Commit all changes to your .travis.yml. \u8be6\u7ec6\u4fe1\u606f\u8bf7\u770b\u5b98\u65b9\u6587\u6863\uff0c\u5b9e\u9645\u7684\u4f8b\u5b50\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u4e24\u7bc7\u6587\u7ae0\u3002 Auto-deploying built products to gh-pages with Travis SSH deploys with Travis CI","title":"5.3 \u52a0\u5bc6\u6587\u4ef6"},{"location":"yaml-travis/travis/","text":"Travis CI \u6301\u7eed\u96c6\u6210 \u00b6 Travis CI \u662f\u5728\u7ebf\u6258\u7ba1\u7684\u6301\u7eed\u96c6\u6210\u670d\u52a1\uff0c\u7ed1\u5b9aGithub\u9879\u76ee\uff0c\u6293\u53d6\u65b0\u7684\u4ee3\u7801\u81ea\u52a8\u8fdb\u884c\u6d4b\u8bd5\u6784\u5efa\uff0c\u751a\u81f3\u81ea\u52a8\u90e8\u7f72\u5230\u6d4b\u8bd5\u73af\u5883\u3002 \u4f7f\u7528\u8fd9\u9879\u670d\u52a1\uff0c\u6bcf\u6b21\u6211\u4eec\u63d0\u4ea4\u65b0\u7684\u4ee3\u7801\uff0c\u90fd\u80fd\u53ca\u65f6\u53d1\u73b0\u95ee\u9898\u5e76\u4fee\u590d\u3002 \u57fa\u672c\u6b65\u9aa4 \u8bbf\u95ee\u5b98\u7f51 travis-ci.org , \u7528Github\u8d26\u6237\u767b\u9646\u3002 Travis\u4f1a\u5217\u51fa\u4f60\u6240\u6709\u7684Github\u5e93\u4ee5\u53ca\u4f60\u6240\u5c5e\u7684\u7ec4\u7ec7\u3002\u6211\u4eec\u9009\u62e9\u9700\u8981\u5efa\u7acb Travis CI \u670d\u52a1\u7684\u9879\u76ee\uff0c\u5c06\u9879\u76ee\u65c1\u8fb9\u7684\u5f00\u5173\u6253\u5f00\u3002\u8fd9\u6837\uff0cTravis CI\u4f1a\u76d1\u542c\u8be5\u9879\u76ee\u7684\u53d8\u5316\uff0c\u5728\u6bcf\u6b21push/pull request\u64cd\u4f5c\u540e\u6267\u884c\u6d4b\u8bd5\u811a\u672c\u3002 \u7f16\u5199\u6d4b\u8bd5\u811a\u672c\u3002 \u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u65b0\u5efa.travis.yml\u914d\u7f6e\u6587\u4ef6\uff0c\u5e76\u63d0\u4ea4\u5230Github\u5e93\u4e2d\u3002 \u5982\u679c\u9700\u8981\u5728Github\u5e93\u4e0b\u7684README.md\u4e2d\u663e\u793a\u4e00\u4e2a\u9ad8\u5927\u4e0a\u7684build-passing\u56fe\u6807\uff0c\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u914d\u7f6e\uff1a \u5728Travis CI\u4e2d\u70b9\u51fb\u76d1\u542c\u9879\u76ee\u7684Settings \u70b9\u51fb\u5934\u50cf\u65c1\u8fb9\u7684build-passing\u56fe\u7247\uff0c\u590d\u5236url\u81f3Github\u9879\u76ee\u7684README.md\u672b\u5c3e\uff0c\u5373\u53ef\u770b\u5230\u5f53\u524d\u6d4b\u8bd5\u7684\u72b6\u6001\u3002\u70b9\u51fb\u8be5\u56fe\u6807\u53ef\u4ee5\u8df3\u8f6c\u5230 Travis \u67e5\u770b\u6d4b\u8bd5\u65e5\u5fd7 .travis.yml\u6587\u4ef6 \u00b6 \u8be5\u6587\u4ef6\u91c7\u7528yaml\u683c\u5f0f\uff0c\u5b58\u50a8\u4e86\u6d4b\u8bd5\u914d\u7f6e\u4fe1\u606f\u3002 \u4e0b\u9762\u8bf4\u660e.travis.yml\u4e2d\u7684\u4e3b\u8981\u5b57\u6bb5 language \u6307\u5b9a\u4e86\u9ed8\u8ba4\u7684\u8fd0\u884c\u73af\u5883 script \u6307\u5b9a\u4e86\u9700\u8981\u8fd0\u884c\u7684\u6d4b\u8bd5\u811a\u672c sudo \u6307\u5b9a\u662f\u5426\u9700\u8981root\u6743\u9650 \u5982\u4ee5\u4e0b\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684python\u8fd0\u884c\u73af\u5883\u7684\u914d\u7f6e\u6587\u4ef6 install \u6307\u5b9a\u5b89\u88c5\u811a\u672c env \u5b9a\u4e49\u73af\u5883\u53d8\u91cf services \u6307\u5b9a\u9700\u8981\u7684\u670d\u52a1 language : python sudo : required python : - '3.5' services : - mysql install : - pip install - r requirements . txt script : - python manage . py test .travis.yml\u8fd8\u63d0\u4f9b\u4e86\u52a0\u5bc6\u670d\u52a1 \u7b2c\u4e00\u79cd\u52a0\u5bc6\u65b9\u5f0f\u662f\u901a\u8fc7\u5728travis CI\u7f51\u9875\u4e0a\u5728\u4ed3\u5e93\u8bbe\u7f6e\u9875\u6dfb\u52a0\u73af\u5883\u53d8\u91cf\uff0c\u53ef\u4ee5\u7528\u6765\u52a0\u5bc6\u4fe1\u606f\u3002 \u7b2c\u4e8c\u79cd\u52a0\u5bc6\u65b9\u5f0f\u5219\u66f4\u4e3a\u5b89\u5168\uff0c\u5b9e\u7528\u6027\u66f4\u5e7f\u3002\u901a\u8fc7travis encrypt\u547d\u4ee4\u6765\u52a0\u5bc6\u4fe1\u606f\u6216\u6587\u4ef6\u3002 \u9996\u5148\u5b89\u88c5travis\u547d\u4ee4\u884c\u5ba2\u6237\u7aef $ apt install travis \u767b\u5f55travis CI $ travis login \u8fdb\u5165\u672c\u5730\u9879\u76ee\u7684\u6839\u76ee\u5f55\uff0c\u52a0\u5bc6\u6587\u4ef6\u3002 $ travis encrypt-file test.txt --add \u6ce8\uff1a--add\u64cd\u4f5c\u4f1a\u81ea\u52a8\u5c06\u52a0\u5bc6\u73af\u5883\u53d8\u91cf\u5199\u5165.travis.yml\u3002\u5982\u679c\u60f3\u8981\u81ea\u5df1\u6dfb\u52a0\uff0c\u5219\u53ef\u4e0d\u6dfb\u52a0--add\uff0c\u547d\u4ee4\u884c\u4f1a\u6253\u5370\u51fa\u79d8\u94a5\uff0c - openssl aes-256-cbc -K $encrypted_741b9a365d8e_key -iv $encrypted_741b9a365d8e_iv -in id_rsa.enc -out ~/.ssh/id_rsa -d \u5c06\u79d8\u94a5\u624b\u52a8\u6dfb\u52a0\u5230.travis.yml\u4e2d\u7684before_install\u5b57\u6bb5\u4e2d\u5373\u53ef\u3002 \u6b64\u5916\uff0c\u5728.travis.yml\u4e2d\u8fd8\u53ef\u4ee5\u914d\u7f6e\u94a9\u5b50\u65b9\u6cd5\uff0c\u5728\u6267\u884cscript\uff0cinstall\uff0cdeploy\u7684\u524d\u540e\u505a\u4e00\u4e9b\u5de5\u4f5c\uff0c\u63d0\u9ad8\u7075\u6d3b\u6027\u3002 \u6574\u4e2a\u6d4b\u8bd5\u914d\u7f6e\u7684\u5b8c\u6574\u751f\u547d\u5468\u671f\u5982\u4e0b\uff1a before_install install before_script script aftersuccess or afterfailure [ OPTIONAL ] before_deploy [ OPTIONAL ] deploy [ OPTIONAL ] after_deploy after_script ref: \u00b6 [1]. https://www.jianshu.com/p/8fa9322b8e73","title":"Intro"},{"location":"yaml-travis/travis/#travis-ci","text":"Travis CI \u662f\u5728\u7ebf\u6258\u7ba1\u7684\u6301\u7eed\u96c6\u6210\u670d\u52a1\uff0c\u7ed1\u5b9aGithub\u9879\u76ee\uff0c\u6293\u53d6\u65b0\u7684\u4ee3\u7801\u81ea\u52a8\u8fdb\u884c\u6d4b\u8bd5\u6784\u5efa\uff0c\u751a\u81f3\u81ea\u52a8\u90e8\u7f72\u5230\u6d4b\u8bd5\u73af\u5883\u3002 \u4f7f\u7528\u8fd9\u9879\u670d\u52a1\uff0c\u6bcf\u6b21\u6211\u4eec\u63d0\u4ea4\u65b0\u7684\u4ee3\u7801\uff0c\u90fd\u80fd\u53ca\u65f6\u53d1\u73b0\u95ee\u9898\u5e76\u4fee\u590d\u3002 \u57fa\u672c\u6b65\u9aa4 \u8bbf\u95ee\u5b98\u7f51 travis-ci.org , \u7528Github\u8d26\u6237\u767b\u9646\u3002 Travis\u4f1a\u5217\u51fa\u4f60\u6240\u6709\u7684Github\u5e93\u4ee5\u53ca\u4f60\u6240\u5c5e\u7684\u7ec4\u7ec7\u3002\u6211\u4eec\u9009\u62e9\u9700\u8981\u5efa\u7acb Travis CI \u670d\u52a1\u7684\u9879\u76ee\uff0c\u5c06\u9879\u76ee\u65c1\u8fb9\u7684\u5f00\u5173\u6253\u5f00\u3002\u8fd9\u6837\uff0cTravis CI\u4f1a\u76d1\u542c\u8be5\u9879\u76ee\u7684\u53d8\u5316\uff0c\u5728\u6bcf\u6b21push/pull request\u64cd\u4f5c\u540e\u6267\u884c\u6d4b\u8bd5\u811a\u672c\u3002 \u7f16\u5199\u6d4b\u8bd5\u811a\u672c\u3002 \u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u65b0\u5efa.travis.yml\u914d\u7f6e\u6587\u4ef6\uff0c\u5e76\u63d0\u4ea4\u5230Github\u5e93\u4e2d\u3002 \u5982\u679c\u9700\u8981\u5728Github\u5e93\u4e0b\u7684README.md\u4e2d\u663e\u793a\u4e00\u4e2a\u9ad8\u5927\u4e0a\u7684build-passing\u56fe\u6807\uff0c\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u914d\u7f6e\uff1a \u5728Travis CI\u4e2d\u70b9\u51fb\u76d1\u542c\u9879\u76ee\u7684Settings \u70b9\u51fb\u5934\u50cf\u65c1\u8fb9\u7684build-passing\u56fe\u7247\uff0c\u590d\u5236url\u81f3Github\u9879\u76ee\u7684README.md\u672b\u5c3e\uff0c\u5373\u53ef\u770b\u5230\u5f53\u524d\u6d4b\u8bd5\u7684\u72b6\u6001\u3002\u70b9\u51fb\u8be5\u56fe\u6807\u53ef\u4ee5\u8df3\u8f6c\u5230 Travis \u67e5\u770b\u6d4b\u8bd5\u65e5\u5fd7","title":"Travis CI \u6301\u7eed\u96c6\u6210"},{"location":"yaml-travis/travis/#travisyml","text":"\u8be5\u6587\u4ef6\u91c7\u7528yaml\u683c\u5f0f\uff0c\u5b58\u50a8\u4e86\u6d4b\u8bd5\u914d\u7f6e\u4fe1\u606f\u3002 \u4e0b\u9762\u8bf4\u660e.travis.yml\u4e2d\u7684\u4e3b\u8981\u5b57\u6bb5 language \u6307\u5b9a\u4e86\u9ed8\u8ba4\u7684\u8fd0\u884c\u73af\u5883 script \u6307\u5b9a\u4e86\u9700\u8981\u8fd0\u884c\u7684\u6d4b\u8bd5\u811a\u672c sudo \u6307\u5b9a\u662f\u5426\u9700\u8981root\u6743\u9650 \u5982\u4ee5\u4e0b\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684python\u8fd0\u884c\u73af\u5883\u7684\u914d\u7f6e\u6587\u4ef6 install \u6307\u5b9a\u5b89\u88c5\u811a\u672c env \u5b9a\u4e49\u73af\u5883\u53d8\u91cf services \u6307\u5b9a\u9700\u8981\u7684\u670d\u52a1 language : python sudo : required python : - '3.5' services : - mysql install : - pip install - r requirements . txt script : - python manage . py test .travis.yml\u8fd8\u63d0\u4f9b\u4e86\u52a0\u5bc6\u670d\u52a1 \u7b2c\u4e00\u79cd\u52a0\u5bc6\u65b9\u5f0f\u662f\u901a\u8fc7\u5728travis CI\u7f51\u9875\u4e0a\u5728\u4ed3\u5e93\u8bbe\u7f6e\u9875\u6dfb\u52a0\u73af\u5883\u53d8\u91cf\uff0c\u53ef\u4ee5\u7528\u6765\u52a0\u5bc6\u4fe1\u606f\u3002 \u7b2c\u4e8c\u79cd\u52a0\u5bc6\u65b9\u5f0f\u5219\u66f4\u4e3a\u5b89\u5168\uff0c\u5b9e\u7528\u6027\u66f4\u5e7f\u3002\u901a\u8fc7travis encrypt\u547d\u4ee4\u6765\u52a0\u5bc6\u4fe1\u606f\u6216\u6587\u4ef6\u3002 \u9996\u5148\u5b89\u88c5travis\u547d\u4ee4\u884c\u5ba2\u6237\u7aef $ apt install travis \u767b\u5f55travis CI $ travis login \u8fdb\u5165\u672c\u5730\u9879\u76ee\u7684\u6839\u76ee\u5f55\uff0c\u52a0\u5bc6\u6587\u4ef6\u3002 $ travis encrypt-file test.txt --add \u6ce8\uff1a--add\u64cd\u4f5c\u4f1a\u81ea\u52a8\u5c06\u52a0\u5bc6\u73af\u5883\u53d8\u91cf\u5199\u5165.travis.yml\u3002\u5982\u679c\u60f3\u8981\u81ea\u5df1\u6dfb\u52a0\uff0c\u5219\u53ef\u4e0d\u6dfb\u52a0--add\uff0c\u547d\u4ee4\u884c\u4f1a\u6253\u5370\u51fa\u79d8\u94a5\uff0c - openssl aes-256-cbc -K $encrypted_741b9a365d8e_key -iv $encrypted_741b9a365d8e_iv -in id_rsa.enc -out ~/.ssh/id_rsa -d \u5c06\u79d8\u94a5\u624b\u52a8\u6dfb\u52a0\u5230.travis.yml\u4e2d\u7684before_install\u5b57\u6bb5\u4e2d\u5373\u53ef\u3002 \u6b64\u5916\uff0c\u5728.travis.yml\u4e2d\u8fd8\u53ef\u4ee5\u914d\u7f6e\u94a9\u5b50\u65b9\u6cd5\uff0c\u5728\u6267\u884cscript\uff0cinstall\uff0cdeploy\u7684\u524d\u540e\u505a\u4e00\u4e9b\u5de5\u4f5c\uff0c\u63d0\u9ad8\u7075\u6d3b\u6027\u3002 \u6574\u4e2a\u6d4b\u8bd5\u914d\u7f6e\u7684\u5b8c\u6574\u751f\u547d\u5468\u671f\u5982\u4e0b\uff1a before_install install before_script script aftersuccess or afterfailure [ OPTIONAL ] before_deploy [ OPTIONAL ] deploy [ OPTIONAL ] after_deploy after_script","title":".travis.yml\u6587\u4ef6"},{"location":"yaml-travis/travis/#ref","text":"[1]. https://www.jianshu.com/p/8fa9322b8e73","title":"ref:"},{"location":"yaml-travis/yaml/","text":"YAML \u5165\u95e8\u6559\u7a0b \u00b6 YAML \u662f \"YAML Ain't a Markup Language\"\uff08YAML \u4e0d\u662f\u4e00\u79cd\u6807\u8bb0\u8bed\u8a00\uff09\u7684\u9012\u5f52\u7f29\u5199\u3002\u5728\u5f00\u53d1\u7684\u8fd9\u79cd\u8bed\u8a00\u65f6\uff0cYAML \u7684\u610f\u601d\u5176\u5b9e\u662f\uff1a\"Yet Another Markup Language\"\uff08\u4ecd\u662f\u4e00\u79cd\u6807\u8bb0\u8bed\u8a00\uff09\u3002 YAML\u7684\u8bed\u6cd5\u548c\u5176\u4ed6\u9ad8\u7ea7\u8bed\u8a00\u7c7b\u4f3c\uff0c\u5e76\u4e14\u53ef\u4ee5\u7b80\u5355\u8868\u8fbe\u6e05\u5355\u3001\u6563\u5217\u8868\uff0c\u6807\u91cf\u7b49\u6570\u636e\u5f62\u6001\u3002\u5b83\u4f7f\u7528\u7a7a\u767d\u7b26\u53f7\u7f29\u8fdb\u548c\u5927\u91cf\u4f9d\u8d56\u5916\u89c2\u7684\u7279\u8272\uff0c\u7279\u522b\u9002\u5408\u7528\u6765\u8868\u8fbe\u6216\u7f16\u8f91\u6570\u636e\u7ed3\u6784\u3001\u5404\u79cd\u914d\u7f6e\u6587\u4ef6\u3001\u503e\u5370\u8c03\u8bd5\u5185\u5bb9\u3001\u6587\u4ef6\u5927\u7eb2\uff08\u4f8b\u5982\uff1a\u8bb8\u591a\u7535\u5b50\u90ae\u4ef6\u6807\u9898\u683c\u5f0f\u548cYAML\u975e\u5e38\u63a5\u8fd1\uff09\u3002 YAML \u7684\u914d\u7f6e\u6587\u4ef6\u540e\u7f00\u4e3a .yml\uff0c\u5982\uff1amkdocs.yml \u3002 \u57fa\u672c\u8bed\u6cd5 \u00b6 \u5927\u5c0f\u5199\u654f\u611f \u4f7f\u7528\u7f29\u8fdb\u8868\u793a\u5c42\u7ea7\u5173\u7cfb \u7f29\u8fdb\u4e0d\u5141\u8bb8\u4f7f\u7528tab\uff0c\u53ea\u5141\u8bb8\u7a7a\u683c \u7f29\u8fdb\u7684\u7a7a\u683c\u6570\u4e0d\u91cd\u8981\uff0c\u53ea\u8981\u76f8\u540c\u5c42\u7ea7\u7684\u5143\u7d20\u5de6\u5bf9\u9f50\u5373\u53ef '#'\u8868\u793a\u6ce8\u91ca \u6570\u636e\u7c7b\u578b \u00b6 YAML \u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u6570\u636e\u7c7b\u578b\uff1a \u5bf9\u8c61\uff1a\u952e\u503c\u5bf9\u7684\u96c6\u5408\uff0c\u53c8\u79f0\u4e3a\u6620\u5c04\uff08mapping\uff09/ \u54c8\u5e0c\uff08hashes\uff09 / \u5b57\u5178\uff08dictionary\uff09 \u6570\u7ec4\uff1a\u4e00\u7ec4\u6309\u6b21\u5e8f\u6392\u5217\u7684\u503c\uff0c\u53c8\u79f0\u4e3a\u5e8f\u5217\uff08sequence\uff09 / \u5217\u8868\uff08list\uff09 \u7eaf\u91cf\uff08scalars\uff09\uff1a\u5355\u4e2a\u7684\u3001\u4e0d\u53ef\u518d\u5206\u7684\u503c YAML \u5bf9\u8c61 \u00b6 \u5bf9\u8c61\u952e\u503c\u5bf9\u4f7f\u7528\u5192\u53f7\u7ed3\u6784\u8868\u793a key: value\uff0c\u5192\u53f7\u540e\u9762\u8981\u52a0\u4e00\u4e2a\u7a7a\u683c\u3002 \u4e5f\u53ef\u4ee5\u4f7f\u7528 key:{key1: value1, key2: value2, ...}\u3002 \u8fd8\u53ef\u4ee5\u4f7f\u7528\u7f29\u8fdb\u8868\u793a\u5c42\u7ea7\u5173\u7cfb\uff1b key : child - key : value child - key2 : value2 \u8f83\u4e3a\u590d\u6742\u7684\u5bf9\u8c61\u683c\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528\u95ee\u53f7\u52a0\u4e00\u4e2a\u7a7a\u683c\u4ee3\u8868\u4e00\u4e2a\u590d\u6742\u7684 key\uff0c\u914d\u5408\u4e00\u4e2a\u5192\u53f7\u52a0\u4e00\u4e2a\u7a7a\u683c\u4ee3\u8868\u4e00\u4e2a value\uff1a ? - complexkey1 - complexkey2 : - complexvalue1 - complexvalue2 \u610f\u601d\u5373\u5bf9\u8c61\u7684\u5c5e\u6027\u662f\u4e00\u4e2a\u6570\u7ec4 [complexkey1,complexkey2]\uff0c\u5bf9\u5e94\u7684\u503c\u4e5f\u662f\u4e00\u4e2a\u6570\u7ec4 [complexvalue1,complexvalue2] YAML \u6570\u7ec4 \u00b6 \u4ee5 - \u5f00\u5934\u7684\u884c\u8868\u793a\u6784\u6210\u4e00\u4e2a\u6570\u7ec4\uff1a - A - B - C YAML \u652f\u6301\u591a\u7ef4\u6570\u7ec4\uff0c\u53ef\u4ee5\u4f7f\u7528\u884c\u5185\u8868\u793a\uff1a key: [value1, value2, ...] \u6570\u636e\u7ed3\u6784\u7684\u5b50\u6210\u5458\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5219\u53ef\u4ee5\u5728\u8be5\u9879\u4e0b\u9762\u7f29\u8fdb\u4e00\u4e2a\u7a7a\u683c\u3002 - - A - B - C \u4e00\u4e2a\u76f8\u5bf9\u590d\u6742\u7684\u4f8b\u5b50\uff1a companies: - id: 1 name: company1 price: 200W - id: 2 name: company2 price: 500W \u610f\u601d\u662f companies \u5c5e\u6027\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\u53c8\u662f\u7531 id\u3001name\u3001price \u4e09\u4e2a\u5c5e\u6027\u6784\u6210\u3002 \u6570\u7ec4\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6d41\u5f0f(flow)\u7684\u65b9\u5f0f\u8868\u793a\uff1a companies: [{id: 1,name: company1,price: 200W},{id: 2,name: company2,price: 500W}] \u590d\u5408\u7ed3\u6784 \u00b6 \u6570\u7ec4\u548c\u5bf9\u8c61\u53ef\u4ee5\u6784\u6210\u590d\u5408\u7ed3\u6784\uff0c\u4f8b\uff1a languages: - Ruby - Perl - Python websites: YAML: yaml.org Ruby: ruby-lang.org Python: python.org Perl: use.perl.org \u8f6c\u6362\u4e3a json \u4e3a\uff1a { languages: [ 'Ruby', 'Perl', 'Python'], websites: { YAML: 'yaml.org', Ruby: 'ruby-lang.org', Python: 'python.org', Perl: 'use.perl.org' } } \u7eaf\u91cf \u00b6 \u7eaf\u91cf\u662f\u6700\u57fa\u672c\u7684\uff0c\u4e0d\u53ef\u518d\u5206\u7684\u503c\uff0c\u5305\u62ec\uff1a \u5b57\u7b26\u4e32 \u5e03\u5c14\u503c \u6574\u6570 \u6d6e\u70b9\u6570 Null \u65f6\u95f4 \u65e5\u671f \u4f7f\u7528\u4e00\u4e2a\u4f8b\u5b50\u6765\u5feb\u901f\u4e86\u89e3\u7eaf\u91cf\u7684\u57fa\u672c\u4f7f\u7528\uff1a boolean: - TRUE #true,True\u90fd\u53ef\u4ee5 - FALSE #false\uff0cFalse\u90fd\u53ef\u4ee5 float: - 3.14 - 6.8523015e+5 #\u53ef\u4ee5\u4f7f\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5 int: - 123 - 0b1010_0111_0100_1010_1110 #\u4e8c\u8fdb\u5236\u8868\u793a null: nodeName: 'node' parent: ~ #\u4f7f\u7528~\u8868\u793anull string: - \u54c8\u54c8 - 'Hello world' #\u53ef\u4ee5\u4f7f\u7528\u53cc\u5f15\u53f7\u6216\u8005\u5355\u5f15\u53f7\u5305\u88f9\u7279\u6b8a\u5b57\u7b26 - newline newline2 #\u5b57\u7b26\u4e32\u53ef\u4ee5\u62c6\u6210\u591a\u884c\uff0c\u6bcf\u4e00\u884c\u4f1a\u88ab\u8f6c\u5316\u6210\u4e00\u4e2a\u7a7a\u683c date: - 2018-02-17 #\u65e5\u671f\u5fc5\u987b\u4f7f\u7528ISO 8601\u683c\u5f0f\uff0c\u5373yyyy-MM-dd datetime: - 2018-02-17T15:02:31+08:00 #\u65f6\u95f4\u4f7f\u7528ISO 8601\u683c\u5f0f\uff0c\u65f6\u95f4\u548c\u65e5\u671f\u4e4b\u95f4\u4f7f\u7528T\u8fde\u63a5\uff0c\u6700\u540e\u4f7f\u7528+\u4ee3\u8868\u65f6\u533a \u5f15\u7528 \u00b6 & \u951a\u70b9\u548c * \u522b\u540d\uff0c\u53ef\u4ee5\u7528\u6765\u5f15\u7528: defaults : & defaults adapter : postgres host : localhost development : database : myapp_development << : * defaults test : database : myapp_test << : * defaults \u76f8\u5f53\u4e8e: defaults : adapter : postgres host : localhost development : database : myapp_development adapter : postgres host : localhost test : database : myapp_test adapter : postgres host : localhost & \u7528\u6765\u5efa\u7acb\u951a\u70b9\uff08defaults\uff09\uff0c<< \u8868\u793a\u5408\u5e76\u5230\u5f53\u524d\u6570\u636e\uff0c* \u7528\u6765\u5f15\u7528\u951a\u70b9\u3002 \u4e0b\u9762\u662f\u53e6\u4e00\u4e2a\u4f8b\u5b50: - &showell Steve - Clark - Brian - Oren - *showell \u8f6c\u4e3a JavaScript \u4ee3\u7801\u5982\u4e0b: [ 'Steve', 'Clark', 'Brian', 'Oren', 'Steve' ] \u53c2\u8003\u5730\u5740\uff1a \u00b6 https://www.ruanyifeng.com/blog/2016/07/yaml.html https://www.jianshu.com/p/97222440cd08 https://daihainidewo.github.io/blog/yaml%E6%95%99%E7%A8%8B/ https://www.runoob.com/w3cnote/yaml-intro.html","title":"yaml intro"},{"location":"yaml-travis/yaml/#yaml","text":"YAML \u662f \"YAML Ain't a Markup Language\"\uff08YAML \u4e0d\u662f\u4e00\u79cd\u6807\u8bb0\u8bed\u8a00\uff09\u7684\u9012\u5f52\u7f29\u5199\u3002\u5728\u5f00\u53d1\u7684\u8fd9\u79cd\u8bed\u8a00\u65f6\uff0cYAML \u7684\u610f\u601d\u5176\u5b9e\u662f\uff1a\"Yet Another Markup Language\"\uff08\u4ecd\u662f\u4e00\u79cd\u6807\u8bb0\u8bed\u8a00\uff09\u3002 YAML\u7684\u8bed\u6cd5\u548c\u5176\u4ed6\u9ad8\u7ea7\u8bed\u8a00\u7c7b\u4f3c\uff0c\u5e76\u4e14\u53ef\u4ee5\u7b80\u5355\u8868\u8fbe\u6e05\u5355\u3001\u6563\u5217\u8868\uff0c\u6807\u91cf\u7b49\u6570\u636e\u5f62\u6001\u3002\u5b83\u4f7f\u7528\u7a7a\u767d\u7b26\u53f7\u7f29\u8fdb\u548c\u5927\u91cf\u4f9d\u8d56\u5916\u89c2\u7684\u7279\u8272\uff0c\u7279\u522b\u9002\u5408\u7528\u6765\u8868\u8fbe\u6216\u7f16\u8f91\u6570\u636e\u7ed3\u6784\u3001\u5404\u79cd\u914d\u7f6e\u6587\u4ef6\u3001\u503e\u5370\u8c03\u8bd5\u5185\u5bb9\u3001\u6587\u4ef6\u5927\u7eb2\uff08\u4f8b\u5982\uff1a\u8bb8\u591a\u7535\u5b50\u90ae\u4ef6\u6807\u9898\u683c\u5f0f\u548cYAML\u975e\u5e38\u63a5\u8fd1\uff09\u3002 YAML \u7684\u914d\u7f6e\u6587\u4ef6\u540e\u7f00\u4e3a .yml\uff0c\u5982\uff1amkdocs.yml \u3002","title":"YAML \u5165\u95e8\u6559\u7a0b"},{"location":"yaml-travis/yaml/#_1","text":"\u5927\u5c0f\u5199\u654f\u611f \u4f7f\u7528\u7f29\u8fdb\u8868\u793a\u5c42\u7ea7\u5173\u7cfb \u7f29\u8fdb\u4e0d\u5141\u8bb8\u4f7f\u7528tab\uff0c\u53ea\u5141\u8bb8\u7a7a\u683c \u7f29\u8fdb\u7684\u7a7a\u683c\u6570\u4e0d\u91cd\u8981\uff0c\u53ea\u8981\u76f8\u540c\u5c42\u7ea7\u7684\u5143\u7d20\u5de6\u5bf9\u9f50\u5373\u53ef '#'\u8868\u793a\u6ce8\u91ca","title":"\u57fa\u672c\u8bed\u6cd5"},{"location":"yaml-travis/yaml/#_2","text":"YAML \u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u6570\u636e\u7c7b\u578b\uff1a \u5bf9\u8c61\uff1a\u952e\u503c\u5bf9\u7684\u96c6\u5408\uff0c\u53c8\u79f0\u4e3a\u6620\u5c04\uff08mapping\uff09/ \u54c8\u5e0c\uff08hashes\uff09 / \u5b57\u5178\uff08dictionary\uff09 \u6570\u7ec4\uff1a\u4e00\u7ec4\u6309\u6b21\u5e8f\u6392\u5217\u7684\u503c\uff0c\u53c8\u79f0\u4e3a\u5e8f\u5217\uff08sequence\uff09 / \u5217\u8868\uff08list\uff09 \u7eaf\u91cf\uff08scalars\uff09\uff1a\u5355\u4e2a\u7684\u3001\u4e0d\u53ef\u518d\u5206\u7684\u503c","title":"\u6570\u636e\u7c7b\u578b"},{"location":"yaml-travis/yaml/#yaml_1","text":"\u5bf9\u8c61\u952e\u503c\u5bf9\u4f7f\u7528\u5192\u53f7\u7ed3\u6784\u8868\u793a key: value\uff0c\u5192\u53f7\u540e\u9762\u8981\u52a0\u4e00\u4e2a\u7a7a\u683c\u3002 \u4e5f\u53ef\u4ee5\u4f7f\u7528 key:{key1: value1, key2: value2, ...}\u3002 \u8fd8\u53ef\u4ee5\u4f7f\u7528\u7f29\u8fdb\u8868\u793a\u5c42\u7ea7\u5173\u7cfb\uff1b key : child - key : value child - key2 : value2 \u8f83\u4e3a\u590d\u6742\u7684\u5bf9\u8c61\u683c\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528\u95ee\u53f7\u52a0\u4e00\u4e2a\u7a7a\u683c\u4ee3\u8868\u4e00\u4e2a\u590d\u6742\u7684 key\uff0c\u914d\u5408\u4e00\u4e2a\u5192\u53f7\u52a0\u4e00\u4e2a\u7a7a\u683c\u4ee3\u8868\u4e00\u4e2a value\uff1a ? - complexkey1 - complexkey2 : - complexvalue1 - complexvalue2 \u610f\u601d\u5373\u5bf9\u8c61\u7684\u5c5e\u6027\u662f\u4e00\u4e2a\u6570\u7ec4 [complexkey1,complexkey2]\uff0c\u5bf9\u5e94\u7684\u503c\u4e5f\u662f\u4e00\u4e2a\u6570\u7ec4 [complexvalue1,complexvalue2]","title":"YAML \u5bf9\u8c61"},{"location":"yaml-travis/yaml/#yaml_2","text":"\u4ee5 - \u5f00\u5934\u7684\u884c\u8868\u793a\u6784\u6210\u4e00\u4e2a\u6570\u7ec4\uff1a - A - B - C YAML \u652f\u6301\u591a\u7ef4\u6570\u7ec4\uff0c\u53ef\u4ee5\u4f7f\u7528\u884c\u5185\u8868\u793a\uff1a key: [value1, value2, ...] \u6570\u636e\u7ed3\u6784\u7684\u5b50\u6210\u5458\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5219\u53ef\u4ee5\u5728\u8be5\u9879\u4e0b\u9762\u7f29\u8fdb\u4e00\u4e2a\u7a7a\u683c\u3002 - - A - B - C \u4e00\u4e2a\u76f8\u5bf9\u590d\u6742\u7684\u4f8b\u5b50\uff1a companies: - id: 1 name: company1 price: 200W - id: 2 name: company2 price: 500W \u610f\u601d\u662f companies \u5c5e\u6027\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\u53c8\u662f\u7531 id\u3001name\u3001price \u4e09\u4e2a\u5c5e\u6027\u6784\u6210\u3002 \u6570\u7ec4\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6d41\u5f0f(flow)\u7684\u65b9\u5f0f\u8868\u793a\uff1a companies: [{id: 1,name: company1,price: 200W},{id: 2,name: company2,price: 500W}]","title":"YAML \u6570\u7ec4"},{"location":"yaml-travis/yaml/#_3","text":"\u6570\u7ec4\u548c\u5bf9\u8c61\u53ef\u4ee5\u6784\u6210\u590d\u5408\u7ed3\u6784\uff0c\u4f8b\uff1a languages: - Ruby - Perl - Python websites: YAML: yaml.org Ruby: ruby-lang.org Python: python.org Perl: use.perl.org \u8f6c\u6362\u4e3a json \u4e3a\uff1a { languages: [ 'Ruby', 'Perl', 'Python'], websites: { YAML: 'yaml.org', Ruby: 'ruby-lang.org', Python: 'python.org', Perl: 'use.perl.org' } }","title":"\u590d\u5408\u7ed3\u6784"},{"location":"yaml-travis/yaml/#_4","text":"\u7eaf\u91cf\u662f\u6700\u57fa\u672c\u7684\uff0c\u4e0d\u53ef\u518d\u5206\u7684\u503c\uff0c\u5305\u62ec\uff1a \u5b57\u7b26\u4e32 \u5e03\u5c14\u503c \u6574\u6570 \u6d6e\u70b9\u6570 Null \u65f6\u95f4 \u65e5\u671f \u4f7f\u7528\u4e00\u4e2a\u4f8b\u5b50\u6765\u5feb\u901f\u4e86\u89e3\u7eaf\u91cf\u7684\u57fa\u672c\u4f7f\u7528\uff1a boolean: - TRUE #true,True\u90fd\u53ef\u4ee5 - FALSE #false\uff0cFalse\u90fd\u53ef\u4ee5 float: - 3.14 - 6.8523015e+5 #\u53ef\u4ee5\u4f7f\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5 int: - 123 - 0b1010_0111_0100_1010_1110 #\u4e8c\u8fdb\u5236\u8868\u793a null: nodeName: 'node' parent: ~ #\u4f7f\u7528~\u8868\u793anull string: - \u54c8\u54c8 - 'Hello world' #\u53ef\u4ee5\u4f7f\u7528\u53cc\u5f15\u53f7\u6216\u8005\u5355\u5f15\u53f7\u5305\u88f9\u7279\u6b8a\u5b57\u7b26 - newline newline2 #\u5b57\u7b26\u4e32\u53ef\u4ee5\u62c6\u6210\u591a\u884c\uff0c\u6bcf\u4e00\u884c\u4f1a\u88ab\u8f6c\u5316\u6210\u4e00\u4e2a\u7a7a\u683c date: - 2018-02-17 #\u65e5\u671f\u5fc5\u987b\u4f7f\u7528ISO 8601\u683c\u5f0f\uff0c\u5373yyyy-MM-dd datetime: - 2018-02-17T15:02:31+08:00 #\u65f6\u95f4\u4f7f\u7528ISO 8601\u683c\u5f0f\uff0c\u65f6\u95f4\u548c\u65e5\u671f\u4e4b\u95f4\u4f7f\u7528T\u8fde\u63a5\uff0c\u6700\u540e\u4f7f\u7528+\u4ee3\u8868\u65f6\u533a","title":"\u7eaf\u91cf"},{"location":"yaml-travis/yaml/#_5","text":"& \u951a\u70b9\u548c * \u522b\u540d\uff0c\u53ef\u4ee5\u7528\u6765\u5f15\u7528: defaults : & defaults adapter : postgres host : localhost development : database : myapp_development << : * defaults test : database : myapp_test << : * defaults \u76f8\u5f53\u4e8e: defaults : adapter : postgres host : localhost development : database : myapp_development adapter : postgres host : localhost test : database : myapp_test adapter : postgres host : localhost & \u7528\u6765\u5efa\u7acb\u951a\u70b9\uff08defaults\uff09\uff0c<< \u8868\u793a\u5408\u5e76\u5230\u5f53\u524d\u6570\u636e\uff0c* \u7528\u6765\u5f15\u7528\u951a\u70b9\u3002 \u4e0b\u9762\u662f\u53e6\u4e00\u4e2a\u4f8b\u5b50: - &showell Steve - Clark - Brian - Oren - *showell \u8f6c\u4e3a JavaScript \u4ee3\u7801\u5982\u4e0b: [ 'Steve', 'Clark', 'Brian', 'Oren', 'Steve' ]","title":"\u5f15\u7528"},{"location":"yaml-travis/yaml/#_6","text":"https://www.ruanyifeng.com/blog/2016/07/yaml.html https://www.jianshu.com/p/97222440cd08 https://daihainidewo.github.io/blog/yaml%E6%95%99%E7%A8%8B/ https://www.runoob.com/w3cnote/yaml-intro.html","title":"\u53c2\u8003\u5730\u5740\uff1a"}]}